
Finalembed2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bec  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb34  0800cb34  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb34  0800cb34  0001cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb3c  0800cb3c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  24000000  0800cb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240000a8  0800cbec  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000108  0800cc4c  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000930  24000168  0800ccac  00020168  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000a98  0800ccac  00020a98  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c9a6  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004163  00000000  00000000  0004cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00050ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001358  00000000  00000000  00052138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ba98  00000000  00000000  00053490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c222  00000000  00000000  0008ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001859ec  00000000  00000000  000ab14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00230b36  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005784  00000000  00000000  00230b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000168 	.word	0x24000168
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800af30 	.word	0x0800af30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400016c 	.word	0x2400016c
 80002d4:	0800af30 	.word	0x0800af30

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af02      	add	r7, sp, #8
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000722:	88f8      	ldrh	r0, [r7, #6]
 8000724:	88b9      	ldrh	r1, [r7, #4]
 8000726:	887a      	ldrh	r2, [r7, #2]
 8000728:	883c      	ldrh	r4, [r7, #0]
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f000 fa8c 	bl	8000c4c <ST7735_FillRectangle>
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fillScreen+0x2c>)
 8000748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <fillScreen+0x30>)
 800074e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	460b      	mov	r3, r1
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd2 	bl	8000704 <fillRect>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	240001e2 	.word	0x240001e2
 800076c:	240001e6 	.word	0x240001e6

08000770 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <ST7735_Select+0x14>)
 800077c:	f005 f84a 	bl	8005814 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00

08000788 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <ST7735_Unselect+0x14>)
 8000794:	f005 f83e 	bl	8005814 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58020c00 	.word	0x58020c00

080007a0 <ST7735_Reset>:

void ST7735_Reset()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_Reset+0x28>)
 80007ac:	f005 f832 	bl	8005814 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f002 f9f7 	bl	8002ba4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ST7735_Reset+0x28>)
 80007be:	f005 f829 	bl	8005814 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58021800 	.word	0x58021800

080007cc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <ST7735_WriteCommand+0x2c>)
 80007de:	f005 f819 	bl	8005814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ST7735_WriteCommand+0x30>)
 80007ec:	f007 fe2c 	bl	8008448 <HAL_SPI_Transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	240007dc 	.word	0x240007dc

08000800 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <ST7735_WriteData+0x30>)
 8000812:	f004 ffff 	bl	8005814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <ST7735_WriteData+0x34>)
 8000822:	f007 fe11 	bl	8008448 <HAL_SPI_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58020c00 	.word	0x58020c00
 8000834:	240007dc 	.word	0x240007dc

08000838 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800084a:	e034      	b.n	80008b6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffb7 	bl	80007cc <ST7735_WriteCommand>

        numArgs = *addr++;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	b29b      	uxth	r3, r3
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000878:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800087a:	7abb      	ldrb	r3, [r7, #10]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffbb 	bl	8000800 <ST7735_WriteData>
            addr += numArgs;
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00e      	beq.n	80008b6 <DisplayInit+0x7e>
            ms = *addr++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d102      	bne.n	80008ae <DisplayInit+0x76>
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f977 	bl	8002ba4 <HAL_Delay>
    while(numCommands--) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	73fa      	strb	r2, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1c5      	bne.n	800084c <DisplayInit+0x14>
        }
    }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4604      	mov	r4, r0
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4623      	mov	r3, r4
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4603      	mov	r3, r0
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	717b      	strb	r3, [r7, #5]
 80008e6:	4613      	mov	r3, r2
 80008e8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f7ff ff6e 	bl	80007cc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008f0:	2300      	movs	r3, #0
 80008f2:	733b      	strb	r3, [r7, #12]
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff72 	bl	8000800 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800091c:	202b      	movs	r0, #43	; 0x2b
 800091e:	f7ff ff55 	bl	80007cc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000946:	202c      	movs	r0, #44	; 0x2c
 8000948:	f7ff ff40 	bl	80007cc <ST7735_WriteCommand>
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	240001da 	.word	0x240001da
 8000958:	240001de 	.word	0x240001de

0800095c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000966:	f7ff ff03 	bl	8000770 <ST7735_Select>
    ST7735_Reset();
 800096a:	f7ff ff19 	bl	80007a0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <ST7735_Init+0x44>)
 8000970:	f7ff ff62 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds2);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <ST7735_Init+0x48>)
 8000976:	f7ff ff5f 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds3);
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ST7735_Init+0x4c>)
 800097c:	f7ff ff5c 	bl	8000838 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <ST7735_Init+0x50>)
 8000982:	2202      	movs	r2, #2
 8000984:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <ST7735_Init+0x54>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f810 	bl	80009b4 <ST7735_SetRotation>
    ST7735_Unselect();
 8000994:	f7ff fef8 	bl	8000788 <ST7735_Unselect>

}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800afd8 	.word	0x0800afd8
 80009a4:	0800b010 	.word	0x0800b010
 80009a8:	0800b020 	.word	0x0800b020
 80009ac:	240001db 	.word	0x240001db
 80009b0:	240001df 	.word	0x240001df

080009b4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009cc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d84e      	bhi.n	8000a74 <ST7735_SetRotation+0xc0>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <ST7735_SetRotation+0x28>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a0f 	.word	0x08000a0f
 80009e4:	08000a31 	.word	0x08000a31
 80009e8:	08000a53 	.word	0x08000a53
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <ST7735_SetRotation+0xe8>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <ST7735_SetRotation+0xec>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a02:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a0a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a0c:	e032      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a24:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a2e:	e021      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a46:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a50:	e010      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a72:	bf00      	nop
  }
  ST7735_Select();
 8000a74:	f7ff fe7c 	bl	8000770 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f7ff fea7 	bl	80007cc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff febb 	bl	8000800 <ST7735_WriteData>
  ST7735_Unselect();
 8000a8a:	f7ff fe7d 	bl	8000788 <ST7735_Unselect>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	240001e0 	.word	0x240001e0
 8000a9c:	240001e6 	.word	0x240001e6
 8000aa0:	240001e2 	.word	0x240001e2
 8000aa4:	240001db 	.word	0x240001db
 8000aa8:	240001da 	.word	0x240001da
 8000aac:	240001df 	.word	0x240001df
 8000ab0:	240001de 	.word	0x240001de

08000ab4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b089      	sub	sp, #36	; 0x24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2d8      	uxtb	r0, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2dc      	uxtb	r4, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4622      	mov	r2, r4
 8000af4:	f7ff feea 	bl	80008cc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e043      	b.n	8000b86 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	3b20      	subs	r3, #32
 8000b04:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e029      	b.n	8000b74 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	743b      	strb	r3, [r7, #16]
 8000b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe5a 	bl	8000800 <ST7735_WriteData>
 8000b4c:	e00f      	b.n	8000b6e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe49 	bl	8000800 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b78:	461a      	mov	r2, r3
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d3cf      	bcc.n	8000b20 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3301      	adds	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d3b5      	bcc.n	8000afe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3724      	adds	r7, #36	; 0x24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
	...

08000ba4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af04      	add	r7, sp, #16
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000bb8:	f7ff fdda 	bl	8000770 <ST7735_Select>

    while(*str) {
 8000bbc:	e033      	b.n	8000c26 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	7d3a      	ldrb	r2, [r7, #20]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <ST7735_WriteString+0xa0>)
 8000bc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	db16      	blt.n	8000bfc <ST7735_WriteString+0x58>
            x = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	7d7a      	ldrb	r2, [r7, #21]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <ST7735_WriteString+0xa4>)
 8000be4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da21      	bge.n	8000c30 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d103      	bne.n	8000bfc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
                continue;
 8000bfa:	e014      	b.n	8000c26 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	8bbb      	ldrh	r3, [r7, #28]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f7ff ff4f 	bl	8000ab4 <ST7735_WriteChar>
        x += font.width;
 8000c16:	7d3b      	ldrb	r3, [r7, #20]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1c7      	bne.n	8000bbe <ST7735_WriteString+0x1a>
 8000c2e:	e000      	b.n	8000c32 <ST7735_WriteString+0x8e>
                break;
 8000c30:	bf00      	nop
    }

    ST7735_Unselect();
 8000c32:	f7ff fda9 	bl	8000788 <ST7735_Unselect>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c40:	b002      	add	sp, #8
 8000c42:	4770      	bx	lr
 8000c44:	240001e2 	.word	0x240001e2
 8000c48:	240001e6 	.word	0x240001e6

08000c4c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	da67      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	da61      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd06      	ble.n	8000ca0 <ST7735_FillRectangle+0x54>
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd06      	ble.n	8000cbe <ST7735_FillRectangle+0x72>
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cbe:	f7ff fd57 	bl	8000770 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2dc      	uxtb	r4, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4622      	mov	r2, r4
 8000cec:	f7ff fdee 	bl	80008cc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf0:	8c3b      	ldrh	r3, [r7, #32]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	733b      	strb	r3, [r7, #12]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <ST7735_FillRectangle+0x10c>)
 8000d08:	f004 fd84 	bl	8005814 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	e013      	b.n	8000d3a <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e00a      	b.n	8000d2e <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ST7735_FillRectangle+0x110>)
 8000d24:	f007 fb90 	bl	8008448 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000d40:	f7ff fd22 	bl	8000788 <ST7735_Unselect>
 8000d44:	e000      	b.n	8000d48 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	240001e2 	.word	0x240001e2
 8000d54:	240001e6 	.word	0x240001e6
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	240007dc 	.word	0x240007dc

08000d60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af04      	add	r7, sp, #16
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000d6c:	bf00      	nop
 8000d6e:	4ba8      	ldr	r3, [pc, #672]	; (8001010 <main+0x2b0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <main+0x24>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	60fa      	str	r2, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0xe>
		;
	if (timeout < 0) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x2e>
		Error_Handler();
 8000d8a:	f001 fa73 	bl	8002274 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d8e:	f001 fe77 	bl	8002a80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d92:	f000 fb43 	bl	800141c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d96:	4b9e      	ldr	r3, [pc, #632]	; (8001010 <main+0x2b0>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a9c      	ldr	r2, [pc, #624]	; (8001010 <main+0x2b0>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b9a      	ldr	r3, [pc, #616]	; (8001010 <main+0x2b0>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 fd47 	bl	8005848 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f004 fd5d 	bl	800587c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000dc8:	bf00      	nop
 8000dca:	4b91      	ldr	r3, [pc, #580]	; (8001010 <main+0x2b0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x80>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	60fa      	str	r2, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dcf4      	bgt.n	8000dca <main+0x6a>
		;
	if (timeout < 0) {
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da01      	bge.n	8000dea <main+0x8a>
		Error_Handler();
 8000de6:	f001 fa45 	bl	8002274 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dea:	f000 fd45 	bl	8001878 <MX_GPIO_Init>
	MX_ETH_Init();
 8000dee:	f000 fb99 	bl	8001524 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000df2:	f000 fc93 	bl	800171c <MX_USART3_UART_Init>
	MX_DMA_Init();
 8000df6:	f000 fd0f 	bl	8001818 <MX_DMA_Init>
	MX_SPI1_Init();
 8000dfa:	f000 fbdf 	bl	80015bc <MX_SPI1_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 fcd9 	bl	80017b4 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI2_Init();
 8000e02:	f000 fc33 	bl	800166c <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	ST7735_Init(2);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff fda8 	bl	800095c <ST7735_Init>
	fillScreen(BLACK);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fc95 	bl	800073c <fillScreen>
	Write_MFRC522(0x2A, 0x80);
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	202a      	movs	r0, #42	; 0x2a
 8000e16:	f000 ffbd 	bl	8001d94 <Write_MFRC522>
	Write_MFRC522(0x2B, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000e1a:	21a9      	movs	r1, #169	; 0xa9
 8000e1c:	202b      	movs	r0, #43	; 0x2b
 8000e1e:	f000 ffb9 	bl	8001d94 <Write_MFRC522>
	Write_MFRC522(0x2D, 0x03); //30);
 8000e22:	2103      	movs	r1, #3
 8000e24:	202d      	movs	r0, #45	; 0x2d
 8000e26:	f000 ffb5 	bl	8001d94 <Write_MFRC522>
	Write_MFRC522(0x2C, 0xE8); //0);
 8000e2a:	21e8      	movs	r1, #232	; 0xe8
 8000e2c:	202c      	movs	r0, #44	; 0x2c
 8000e2e:	f000 ffb1 	bl	8001d94 <Write_MFRC522>
	Write_MFRC522(0x15, 0x40);     // force 100% ASK modulation
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	2015      	movs	r0, #21
 8000e36:	f000 ffad 	bl	8001d94 <Write_MFRC522>
	Write_MFRC522(0x11, 0x3D);       // CRC Initial value 0x6363
 8000e3a:	213d      	movs	r1, #61	; 0x3d
 8000e3c:	2011      	movs	r0, #17
 8000e3e:	f000 ffa9 	bl	8001d94 <Write_MFRC522>
	char tmp1;
	tmp1 = Read_MFRC522(0x14);
 8000e42:	2014      	movs	r0, #20
 8000e44:	f000 ffd8 	bl	8001df8 <Read_MFRC522>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
	Write_MFRC522(0x14, tmp1 | 0x03); // antenna on
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4619      	mov	r1, r3
 8000e56:	2014      	movs	r0, #20
 8000e58:	f000 ff9c 	bl	8001d94 <Write_MFRC522>
	card_data[0] = 0xFF;
 8000e5c:	4b6d      	ldr	r3, [pc, #436]	; (8001014 <main+0x2b4>)
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	601a      	str	r2, [r3, #0]
	card_data[1] = 0xFF;
 8000e62:	4b6c      	ldr	r3, [pc, #432]	; (8001014 <main+0x2b4>)
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	605a      	str	r2, [r3, #4]
	card_data[2] = 0xFF;
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <main+0x2b4>)
 8000e6a:	22ff      	movs	r2, #255	; 0xff
 8000e6c:	609a      	str	r2, [r3, #8]
	card_data[3] = 0xFF;
 8000e6e:	4b69      	ldr	r3, [pc, #420]	; (8001014 <main+0x2b4>)
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	60da      	str	r2, [r3, #12]
	card_data[4] = 0xFF;
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <main+0x2b4>)
 8000e76:	22ff      	movs	r2, #255	; 0xff
 8000e78:	611a      	str	r2, [r3, #16]
	card_data[5] = 0xFF;
 8000e7a:	4b66      	ldr	r3, [pc, #408]	; (8001014 <main+0x2b4>)
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	615a      	str	r2, [r3, #20]
	card_data[6] = 0xFF; //Access_bits[6]
 8000e80:	4b64      	ldr	r3, [pc, #400]	; (8001014 <main+0x2b4>)
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	619a      	str	r2, [r3, #24]
	card_data[7] = 0x07; //Access_bits[7]
 8000e86:	4b63      	ldr	r3, [pc, #396]	; (8001014 <main+0x2b4>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	61da      	str	r2, [r3, #28]
	card_data[8] = 0x80; //Access_bits[8]
 8000e8c:	4b61      	ldr	r3, [pc, #388]	; (8001014 <main+0x2b4>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	621a      	str	r2, [r3, #32]
	card_data[9] = 0x88; //user_byte[9]
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <main+0x2b4>)
 8000e94:	2288      	movs	r2, #136	; 0x88
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
	card_data[10] = 0x88; //user_byte[10]
 8000e98:	4b5e      	ldr	r3, [pc, #376]	; (8001014 <main+0x2b4>)
 8000e9a:	2288      	movs	r2, #136	; 0x88
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
	card_data[11] = 0x88; //user_byte[11]
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <main+0x2b4>)
 8000ea0:	2288      	movs	r2, #136	; 0x88
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	card_data[12] = 0x88; //user_byte[12]
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <main+0x2b4>)
 8000ea6:	2288      	movs	r2, #136	; 0x88
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
	card_data[13] = 0x88; //user_byte[13]
 8000eaa:	4b5a      	ldr	r3, [pc, #360]	; (8001014 <main+0x2b4>)
 8000eac:	2288      	movs	r2, #136	; 0x88
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
	card_data[14] = 0x88; //user_byte[14]
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <main+0x2b4>)
 8000eb2:	2288      	movs	r2, #136	; 0x88
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
	card_data[15] = 0x88; //user_byte[15]
 8000eb6:	4b57      	ldr	r3, [pc, #348]	; (8001014 <main+0x2b4>)
 8000eb8:	2288      	movs	r2, #136	; 0x88
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 16; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	e007      	b.n	8000ed2 <main+0x172>
			cardstr[i] = 0;
 8000ec2:	4a55      	ldr	r2, [pc, #340]	; (8001018 <main+0x2b8>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 16; i++) {
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	ddf4      	ble.n	8000ec2 <main+0x162>
		}
		findcard = MFRC522_Request(0x26, cardstr);
 8000ed8:	494f      	ldr	r1, [pc, #316]	; (8001018 <main+0x2b8>)
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f001 f889 	bl	8001ff2 <MFRC522_Request>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <main+0x2bc>)
 8000ee6:	601a      	str	r2, [r3, #0]
		if (findcard == 0) {
 8000ee8:	4b4c      	ldr	r3, [pc, #304]	; (800101c <main+0x2bc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d119      	bne.n	8000f24 <main+0x1c4>
			if (write == 0) {
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <main+0x2c0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10a      	bne.n	8000f0e <main+0x1ae>
				MFRC522_Read(4, uid);
 8000ef8:	494a      	ldr	r1, [pc, #296]	; (8001024 <main+0x2c4>)
 8000efa:	2004      	movs	r0, #4
 8000efc:	f001 f8d9 	bl	80020b2 <MFRC522_Read>
				if(1 == keyRFID){
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <main+0x2c8>)
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10e      	bne.n	8000f24 <main+0x1c4>
					lock = 1;
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <main+0x2cc>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e00a      	b.n	8000f24 <main+0x1c4>
				}
			} else {
				write = 0;
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <main+0x2c0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
				status_write = MFRC522_Write(4, card_data);
 8000f14:	493f      	ldr	r1, [pc, #252]	; (8001014 <main+0x2b4>)
 8000f16:	2004      	movs	r0, #4
 8000f18:	f001 f8f7 	bl	800210a <MFRC522_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b43      	ldr	r3, [pc, #268]	; (8001030 <main+0x2d0>)
 8000f22:	601a      	str	r2, [r3, #0]
			}
		}

		numbercar[0] = password[0] + 48;
 8000f24:	4b43      	ldr	r3, [pc, #268]	; (8001034 <main+0x2d4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	3330      	adds	r3, #48	; 0x30
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <main+0x2d8>)
 8000f30:	701a      	strb	r2, [r3, #0]
		numbercar[2] = password[1] + 48;
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <main+0x2d4>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3330      	adds	r3, #48	; 0x30
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <main+0x2d8>)
 8000f3e:	709a      	strb	r2, [r3, #2]
		numbercar[4] = password[2] + 48;
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <main+0x2d4>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3330      	adds	r3, #48	; 0x30
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <main+0x2d8>)
 8000f4c:	711a      	strb	r2, [r3, #4]
		numbercar[6] = password[3] + 48;
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <main+0x2d4>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3330      	adds	r3, #48	; 0x30
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b37      	ldr	r3, [pc, #220]	; (8001038 <main+0x2d8>)
 8000f5a:	719a      	strb	r2, [r3, #6]
		//		ST7735_WriteString(0, 51, "_ _ _ _", Font_16x26, YELLOW,BLACK);
		ST7735_WriteString(0, 50, numbercar, Font_16x26, YELLOW, BLACK);
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <main+0x2dc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	9202      	str	r2, [sp, #8]
 8000f62:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <main+0x2d8>)
 8000f70:	2132      	movs	r1, #50	; 0x32
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fe16 	bl	8000ba4 <ST7735_WriteString>
		if (lock == 0) {
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <main+0x2cc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10e      	bne.n	8000f9e <main+0x23e>
			ST7735_WriteString(0, 0, "LOCK  ", Font_16x26, RED, BLACK);
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <main+0x2dc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	9202      	str	r2, [sp, #8]
 8000f86:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <main+0x2e0>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fe04 	bl	8000ba4 <ST7735_WriteString>
 8000f9c:	e00d      	b.n	8000fba <main+0x25a>
		} else {
			ST7735_WriteString(0, 0, "UNLOCK", Font_16x26, GREEN, BLACK);
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <main+0x2dc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	9202      	str	r2, [sp, #8]
 8000fa4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <main+0x2e4>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fdf5 	bl	8000ba4 <ST7735_WriteString>
		}
		if(setpassword == 1 || setRFID == 1){
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <main+0x2e8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d003      	beq.n	8000fca <main+0x26a>
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <main+0x2ec>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10e      	bne.n	8000fe8 <main+0x288>
			ST7735_WriteString(0, 100, "Enter your password", Font_7x10, GREEN, BLACK);
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <main+0x2f0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9202      	str	r2, [sp, #8]
 8000fd0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	9200      	str	r2, [sp, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <main+0x2f4>)
 8000fde:	2164      	movs	r1, #100	; 0x64
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fddf 	bl	8000ba4 <ST7735_WriteString>
 8000fe6:	e05a      	b.n	800109e <main+0x33e>
		}
		else if(setpassword == 2){
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <main+0x2e8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d135      	bne.n	800105c <main+0x2fc>
			ST7735_WriteString(0, 100, "Enter your new password", Font_7x10, GREEN, BLACK);
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <main+0x2f0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	9202      	str	r2, [sp, #8]
 8000ff6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <main+0x2f8>)
 8001004:	2164      	movs	r1, #100	; 0x64
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fdcc 	bl	8000ba4 <ST7735_WriteString>
 800100c:	e047      	b.n	800109e <main+0x33e>
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	24000868 	.word	0x24000868
 8001018:	24000a54 	.word	0x24000a54
 800101c:	24000864 	.word	0x24000864
 8001020:	240001b4 	.word	0x240001b4
 8001024:	24000274 	.word	0x24000274
 8001028:	24000030 	.word	0x24000030
 800102c:	2400019c 	.word	0x2400019c
 8001030:	240001bc 	.word	0x240001bc
 8001034:	24000018 	.word	0x24000018
 8001038:	24000028 	.word	0x24000028
 800103c:	24000010 	.word	0x24000010
 8001040:	0800af48 	.word	0x0800af48
 8001044:	0800af50 	.word	0x0800af50
 8001048:	240001a0 	.word	0x240001a0
 800104c:	240001c0 	.word	0x240001c0
 8001050:	24000008 	.word	0x24000008
 8001054:	0800af58 	.word	0x0800af58
 8001058:	0800af6c 	.word	0x0800af6c
		}
		else if(setpassword == 3){
 800105c:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <main+0x544>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d10e      	bne.n	8001082 <main+0x322>
					ST7735_WriteString(0, 100, "One more time           ", Font_7x10, GREEN, BLACK);
 8001064:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <main+0x548>)
 8001066:	2200      	movs	r2, #0
 8001068:	9202      	str	r2, [sp, #8]
 800106a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800106e:	9201      	str	r2, [sp, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a8d      	ldr	r2, [pc, #564]	; (80012ac <main+0x54c>)
 8001078:	2164      	movs	r1, #100	; 0x64
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fd92 	bl	8000ba4 <ST7735_WriteString>
 8001080:	e00d      	b.n	800109e <main+0x33e>
				}
		else{
			ST7735_WriteString(0, 100, "                                    ", Font_16x26, GREEN, BLACK);
 8001082:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <main+0x550>)
 8001084:	2200      	movs	r2, #0
 8001086:	9202      	str	r2, [sp, #8]
 8001088:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	9200      	str	r2, [sp, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a87      	ldr	r2, [pc, #540]	; (80012b4 <main+0x554>)
 8001096:	2164      	movs	r1, #100	; 0x64
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fd83 	bl	8000ba4 <ST7735_WriteString>
		}
		lockcount[0] = lock;
 800109e:	4b86      	ldr	r3, [pc, #536]	; (80012b8 <main+0x558>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a86      	ldr	r2, [pc, #536]	; (80012bc <main+0x55c>)
 80010a4:	6013      	str	r3, [r2, #0]
		if(lockcount[0] == 1 && lockcount[1] == 0){
 80010a6:	4b85      	ldr	r3, [pc, #532]	; (80012bc <main+0x55c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d109      	bne.n	80010c2 <main+0x362>
 80010ae:	4b83      	ldr	r3, [pc, #524]	; (80012bc <main+0x55c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <main+0x362>
			locktimestamp = HAL_GetTick();
 80010b6:	f001 fd69 	bl	8002b8c <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b80      	ldr	r3, [pc, #512]	; (80012c0 <main+0x560>)
 80010c0:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - locktimestamp >= 10000){
 80010c2:	f001 fd63 	bl	8002b8c <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a7d      	ldr	r2, [pc, #500]	; (80012c0 <main+0x560>)
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d902      	bls.n	80010dc <main+0x37c>
			lock = 0;
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <main+0x558>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
		}
		lockcount[1] = lockcount[0];
 80010dc:	4b77      	ldr	r3, [pc, #476]	; (80012bc <main+0x55c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a76      	ldr	r2, [pc, #472]	; (80012bc <main+0x55c>)
 80010e2:	6053      	str	r3, [r2, #4]
		ButtonMatrixUpdate();
 80010e4:	f000 fd20 	bl	8001b28 <ButtonMatrixUpdate>
		press[0] = ButtonMatrixState;
 80010e8:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <main+0x564>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b76      	ldr	r3, [pc, #472]	; (80012c8 <main+0x568>)
 80010f0:	601a      	str	r2, [r3, #0]

		if (press[0] != press[1] && press[0] != 0) {
 80010f2:	4b75      	ldr	r3, [pc, #468]	; (80012c8 <main+0x568>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <main+0x568>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	f000 817b 	beq.w	80013f6 <main+0x696>
 8001100:	4b71      	ldr	r3, [pc, #452]	; (80012c8 <main+0x568>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8176 	beq.w	80013f6 <main+0x696>
			if (state == 0) {
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <main+0x56c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d110      	bne.n	8001134 <main+0x3d4>
				if (ButtonMatrixState != 0b100000000000) {
 8001112:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <main+0x564>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111a:	d061      	beq.n	80011e0 <main+0x480>
					password[0] = Button(ButtonMatrixState);
 800111c:	4b69      	ldr	r3, [pc, #420]	; (80012c4 <main+0x564>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fd93 	bl	8001c4c <Button>
 8001126:	4603      	mov	r3, r0
 8001128:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <main+0x570>)
 800112a:	6013      	str	r3, [r2, #0]
					state = 1;
 800112c:	4b67      	ldr	r3, [pc, #412]	; (80012cc <main+0x56c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e055      	b.n	80011e0 <main+0x480>
				}
			} else if (state == 1) {
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <main+0x56c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d118      	bne.n	800116e <main+0x40e>
				if (ButtonMatrixState == 0b100000000000) {
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <main+0x564>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001144:	d107      	bne.n	8001156 <main+0x3f6>
					password[0] = -16;
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <main+0x570>)
 8001148:	f06f 020f 	mvn.w	r2, #15
 800114c:	601a      	str	r2, [r3, #0]
					state = 0;
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <main+0x56c>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e044      	b.n	80011e0 <main+0x480>
				} else {
					password[1] = Button(ButtonMatrixState);
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <main+0x564>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd76 	bl	8001c4c <Button>
 8001160:	4603      	mov	r3, r0
 8001162:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <main+0x570>)
 8001164:	6053      	str	r3, [r2, #4]
					state = 2;
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <main+0x56c>)
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e038      	b.n	80011e0 <main+0x480>
				}
			} else if (state == 2) {
 800116e:	4b57      	ldr	r3, [pc, #348]	; (80012cc <main+0x56c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d118      	bne.n	80011a8 <main+0x448>
				if (ButtonMatrixState == 0b100000000000) {
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <main+0x564>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800117e:	d107      	bne.n	8001190 <main+0x430>
					password[1] = -16;
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <main+0x570>)
 8001182:	f06f 020f 	mvn.w	r2, #15
 8001186:	605a      	str	r2, [r3, #4]
					state = 1;
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <main+0x56c>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e027      	b.n	80011e0 <main+0x480>
				} else {
					password[2] = Button(ButtonMatrixState);
 8001190:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <main+0x564>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fd59 	bl	8001c4c <Button>
 800119a:	4603      	mov	r3, r0
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <main+0x570>)
 800119e:	6093      	str	r3, [r2, #8]
					state = 3;
 80011a0:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <main+0x56c>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e01b      	b.n	80011e0 <main+0x480>
				}
			} else if (state == 3) {
 80011a8:	4b48      	ldr	r3, [pc, #288]	; (80012cc <main+0x56c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d117      	bne.n	80011e0 <main+0x480>
				if (ButtonMatrixState == 0b100000000000) {
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <main+0x564>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b8:	d107      	bne.n	80011ca <main+0x46a>
					password[2] = -16;
 80011ba:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <main+0x570>)
 80011bc:	f06f 020f 	mvn.w	r2, #15
 80011c0:	609a      	str	r2, [r3, #8]
					state = 2;
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <main+0x56c>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e00a      	b.n	80011e0 <main+0x480>
				} else {
					password[3] = Button(ButtonMatrixState);
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <main+0x564>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd3c 	bl	8001c4c <Button>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <main+0x570>)
 80011d8:	60d3      	str	r3, [r2, #12]
					state = 4;
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <main+0x56c>)
 80011dc:	2204      	movs	r2, #4
 80011de:	601a      	str	r2, [r3, #0]
				}
			}
			if (state == 4) {
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <main+0x56c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	f040 8106 	bne.w	80013f6 <main+0x696>
				if (setRFID == 1) {
 80011ea:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <main+0x574>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <main+0x4a6>
					write = 1;
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <main+0x578>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
					setpassword = 0;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <main+0x544>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
					state = 0;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <main+0x56c>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e0e7      	b.n	80013d6 <main+0x676>
				} else if (setpassword == 3) {
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <main+0x544>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d12e      	bne.n	800126c <main+0x50c>
					if (password[0] == verify[0] && password[1] == verify[1]
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <main+0x570>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <main+0x57c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d121      	bne.n	800125e <main+0x4fe>
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <main+0x570>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <main+0x57c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d11b      	bne.n	800125e <main+0x4fe>
							&& password[2] == verify[2]
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <main+0x570>)
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <main+0x57c>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	429a      	cmp	r2, r3
 8001230:	d115      	bne.n	800125e <main+0x4fe>
							&& password[3] == verify[3]) {
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <main+0x570>)
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <main+0x57c>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	429a      	cmp	r2, r3
 800123c:	d10f      	bne.n	800125e <main+0x4fe>
						key[0] = verify[0];
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <main+0x57c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <main+0x580>)
 8001244:	6013      	str	r3, [r2, #0]
						key[1] = verify[1];
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <main+0x57c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <main+0x580>)
 800124c:	6053      	str	r3, [r2, #4]
						key[2] = verify[2];
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <main+0x57c>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <main+0x580>)
 8001254:	6093      	str	r3, [r2, #8]
						key[3] = verify[3];
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <main+0x57c>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <main+0x580>)
 800125c:	60d3      	str	r3, [r2, #12]
					}
					setpassword = 0;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <main+0x544>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
					state = 0;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <main+0x56c>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e0b4      	b.n	80013d6 <main+0x676>
				} else if (setpassword == 2) {
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <main+0x544>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d137      	bne.n	80012e4 <main+0x584>
					verify[0] = password[0];
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <main+0x570>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <main+0x57c>)
 800127a:	6013      	str	r3, [r2, #0]
					verify[1] = password[1];
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <main+0x570>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <main+0x57c>)
 8001282:	6053      	str	r3, [r2, #4]
					verify[2] = password[2];
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <main+0x570>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <main+0x57c>)
 800128a:	6093      	str	r3, [r2, #8]
					verify[3] = password[3];
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <main+0x570>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <main+0x57c>)
 8001292:	60d3      	str	r3, [r2, #12]
					setpassword = 3;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <main+0x544>)
 8001296:	2203      	movs	r2, #3
 8001298:	601a      	str	r2, [r3, #0]
					state = 0;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <main+0x56c>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e099      	b.n	80013d6 <main+0x676>
 80012a2:	bf00      	nop
 80012a4:	240001a0 	.word	0x240001a0
 80012a8:	24000008 	.word	0x24000008
 80012ac:	0800af84 	.word	0x0800af84
 80012b0:	24000010 	.word	0x24000010
 80012b4:	0800afa0 	.word	0x0800afa0
 80012b8:	2400019c 	.word	0x2400019c
 80012bc:	240001c4 	.word	0x240001c4
 80012c0:	240001cc 	.word	0x240001cc
 80012c4:	24000184 	.word	0x24000184
 80012c8:	240007d4 	.word	0x240007d4
 80012cc:	24000188 	.word	0x24000188
 80012d0:	24000018 	.word	0x24000018
 80012d4:	240001c0 	.word	0x240001c0
 80012d8:	240001b4 	.word	0x240001b4
 80012dc:	240001a4 	.word	0x240001a4
 80012e0:	2400018c 	.word	0x2400018c
				} else if (setpassword == 1) {
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <main+0x6a0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d122      	bne.n	8001332 <main+0x5d2>
					if (password[0] == key[0] && password[1] == key[1]
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <main+0x6a4>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b45      	ldr	r3, [pc, #276]	; (8001408 <main+0x6a8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d115      	bne.n	8001324 <main+0x5c4>
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <main+0x6a4>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <main+0x6a8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10f      	bne.n	8001324 <main+0x5c4>
							&& password[2] == key[3] && password[3] == key[4]) {
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <main+0x6a4>)
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <main+0x6a8>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d109      	bne.n	8001324 <main+0x5c4>
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <main+0x6a4>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <main+0x6a8>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d103      	bne.n	8001324 <main+0x5c4>
						setpassword = 2;
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <main+0x6a0>)
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e002      	b.n	800132a <main+0x5ca>
					} else {
						setpassword = 0;
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <main+0x6a0>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
					}
					state = 0;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <main+0x6ac>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e051      	b.n	80013d6 <main+0x676>
				} else if (password[0] == -6 && password[1] == 1
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <main+0x6a4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f113 0f06 	cmn.w	r3, #6
 800133a:	d112      	bne.n	8001362 <main+0x602>
 800133c:	4b31      	ldr	r3, [pc, #196]	; (8001404 <main+0x6a4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10e      	bne.n	8001362 <main+0x602>
						&& password[2] == 2 && password[3] == 3) {
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <main+0x6a4>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d10a      	bne.n	8001362 <main+0x602>
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <main+0x6a4>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d106      	bne.n	8001362 <main+0x602>
					state = 0;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <main+0x6ac>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
					setpassword = 1;
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <main+0x6a0>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e039      	b.n	80013d6 <main+0x676>
				} else if (password[0] == -6 && password[1] == 4
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <main+0x6a4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f113 0f06 	cmn.w	r3, #6
 800136a:	d112      	bne.n	8001392 <main+0x632>
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <main+0x6a4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d10e      	bne.n	8001392 <main+0x632>
						&& password[2] == 5 && password[3] == 6) {
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <main+0x6a4>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d10a      	bne.n	8001392 <main+0x632>
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <main+0x6a4>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b06      	cmp	r3, #6
 8001382:	d106      	bne.n	8001392 <main+0x632>
					setRFID = 1;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <main+0x6b0>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
					state = 0;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <main+0x6ac>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e021      	b.n	80013d6 <main+0x676>
				} else if (password[0] == key[0] && password[1] == key[1]
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <main+0x6a4>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <main+0x6a8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d118      	bne.n	80013d0 <main+0x670>
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <main+0x6a4>)
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <main+0x6a8>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d112      	bne.n	80013d0 <main+0x670>
						&& password[2] == key[2] && password[3] == key[3]) {
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <main+0x6a4>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <main+0x6a8>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d10c      	bne.n	80013d0 <main+0x670>
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <main+0x6a4>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <main+0x6a8>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d106      	bne.n	80013d0 <main+0x670>
					lock = 1;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <main+0x6b4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
					state = 0;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <main+0x6ac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e002      	b.n	80013d6 <main+0x676>
				} else {
					state = 0;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <main+0x6ac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
				}
				password[0] = -16;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <main+0x6a4>)
 80013d8:	f06f 020f 	mvn.w	r2, #15
 80013dc:	601a      	str	r2, [r3, #0]
				password[1] = -16;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <main+0x6a4>)
 80013e0:	f06f 020f 	mvn.w	r2, #15
 80013e4:	605a      	str	r2, [r3, #4]
				password[2] = -16;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <main+0x6a4>)
 80013e8:	f06f 020f 	mvn.w	r2, #15
 80013ec:	609a      	str	r2, [r3, #8]
				password[3] = -16;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <main+0x6a4>)
 80013f0:	f06f 020f 	mvn.w	r2, #15
 80013f4:	60da      	str	r2, [r3, #12]
			}
		}

		press[1] = press[0];
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <main+0x6b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <main+0x6b8>)
 80013fc:	6053      	str	r3, [r2, #4]
		for (int i = 0; i < 16; i++) {
 80013fe:	e55d      	b.n	8000ebc <main+0x15c>
 8001400:	240001a0 	.word	0x240001a0
 8001404:	24000018 	.word	0x24000018
 8001408:	2400018c 	.word	0x2400018c
 800140c:	24000188 	.word	0x24000188
 8001410:	240001c0 	.word	0x240001c0
 8001414:	2400019c 	.word	0x2400019c
 8001418:	240007d4 	.word	0x240007d4

0800141c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b09c      	sub	sp, #112	; 0x70
 8001420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	224c      	movs	r2, #76	; 0x4c
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f009 fd78 	bl	800af20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2220      	movs	r2, #32
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fd72 	bl	800af20 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800143c:	2004      	movs	r0, #4
 800143e:	f004 fb79 	bl	8005b34 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <SystemClock_Config+0xfc>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <SystemClock_Config+0xfc>)
 800144c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <SystemClock_Config+0xfc>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <SystemClock_Config+0x100>)
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <SystemClock_Config+0x100>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <SystemClock_Config+0x100>)
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001474:	bf00      	nop
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <SystemClock_Config+0xfc>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d1f8      	bne.n	8001476 <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <SystemClock_Config+0x104>)
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <SystemClock_Config+0x104>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001498:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	2302      	movs	r3, #2
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 80014aa:	2378      	movs	r3, #120	; 0x78
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80014b2:	2306      	movs	r3, #6
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014ba:	230c      	movs	r3, #12
 80014bc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014be:	2300      	movs	r3, #0
 80014c0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fb9c 	bl	8005c08 <HAL_RCC_OscConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0xbe>
		Error_Handler();
 80014d6:	f000 fecd 	bl	8002274 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014da:	233f      	movs	r3, #63	; 0x3f
 80014dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014de:	2303      	movs	r3, #3
 80014e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014e6:	2308      	movs	r3, #8
 80014e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2104      	movs	r1, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f004 ffad 	bl	8006460 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xf4>
		Error_Handler();
 800150c:	f000 feb2 	bl	8002274 <Error_Handler>
	}
}
 8001510:	bf00      	nop
 8001512:	3770      	adds	r7, #112	; 0x70
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024800 	.word	0x58024800
 800151c:	58000400 	.word	0x58000400
 8001520:	58024400 	.word	0x58024400

08001524 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_ETH_Init+0x80>)
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <MX_ETH_Init+0x84>)
 800152c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_ETH_Init+0x88>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_ETH_Init+0x88>)
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_ETH_Init+0x88>)
 800153c:	22e1      	movs	r2, #225	; 0xe1
 800153e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_ETH_Init+0x88>)
 8001542:	2200      	movs	r2, #0
 8001544:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_ETH_Init+0x88>)
 8001548:	2200      	movs	r2, #0
 800154a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_ETH_Init+0x88>)
 800154e:	2200      	movs	r2, #0
 8001550:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_ETH_Init+0x80>)
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_ETH_Init+0x88>)
 8001556:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_ETH_Init+0x80>)
 800155a:	2201      	movs	r2, #1
 800155c:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_ETH_Init+0x80>)
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_ETH_Init+0x8c>)
 8001562:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_ETH_Init+0x80>)
 8001566:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <MX_ETH_Init+0x90>)
 8001568:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_ETH_Init+0x80>)
 800156c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001570:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <MX_ETH_Init+0x80>)
 8001574:	f003 fb70 	bl	8004c58 <HAL_ETH_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ETH_Init+0x5e>
		Error_Handler();
 800157e:	f000 fe79 	bl	8002274 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001582:	2234      	movs	r2, #52	; 0x34
 8001584:	2100      	movs	r1, #0
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_ETH_Init+0x94>)
 8001588:	f009 fcca 	bl	800af20 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_ETH_Init+0x94>)
 800158e:	2221      	movs	r2, #33	; 0x21
 8001590:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_ETH_Init+0x94>)
 8001594:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001598:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_ETH_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24000920 	.word	0x24000920
 80015a8:	40028000 	.word	0x40028000
 80015ac:	240001d4 	.word	0x240001d4
 80015b0:	24000108 	.word	0x24000108
 80015b4:	240000a8 	.word	0x240000a8
 80015b8:	240009a8 	.word	0x240009a8

080015bc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015c2:	4a29      	ldr	r2, [pc, #164]	; (8001668 <MX_SPI1_Init+0xac>)
 80015c4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015cc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d4:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015d8:	2207      	movs	r2, #7
 80015da:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ee:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015f2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015f6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_SPI1_Init+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001606:	2200      	movs	r2, #0
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_SPI1_Init+0xa8>)
 800160c:	2200      	movs	r2, #0
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001616:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_SPI1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_SPI1_Init+0xa8>)
 800162c:	2200      	movs	r2, #0
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001632:	2200      	movs	r2, #0
 8001634:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001638:	2200      	movs	r2, #0
 800163a:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_SPI1_Init+0xa8>)
 800163e:	2200      	movs	r2, #0
 8001640:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001644:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_SPI1_Init+0xa8>)
 800164c:	2200      	movs	r2, #0
 800164e:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_SPI1_Init+0xa8>)
 8001652:	f006 fdf3 	bl	800823c <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_SPI1_Init+0xa4>
		Error_Handler();
 800165c:	f000 fe0a 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	240007dc 	.word	0x240007dc
 8001668:	40013000 	.word	0x40013000

0800166c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <MX_SPI2_Init+0xac>)
 8001674:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800167c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001686:	2207      	movs	r2, #7
 8001688:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <MX_SPI2_Init+0xa8>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001698:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800169c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_SPI2_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_SPI2_Init+0xa8>)
 8001700:	f006 fd9c 	bl	800823c <HAL_SPI_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_SPI2_Init+0xa2>
		Error_Handler();
 800170a:	f000 fdb3 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	240001ec 	.word	0x240001ec
 8001718:	40003800 	.word	0x40003800

0800171c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <MX_USART3_UART_Init+0x94>)
 8001724:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_USART3_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART3_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001764:	4811      	ldr	r0, [pc, #68]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001766:	f008 f84a 	bl	80097fe <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001770:	f000 fd80 	bl	8002274 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_USART3_UART_Init+0x90>)
 8001778:	f008 ffe0 	bl	800a73c <HAL_UARTEx_SetTxFifoThreshold>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001782:	f000 fd77 	bl	8002274 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <MX_USART3_UART_Init+0x90>)
 800178a:	f009 f815 	bl	800a7b8 <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001794:	f000 fd6e 	bl	8002274 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_USART3_UART_Init+0x90>)
 800179a:	f008 ff96 	bl	800a6ca <HAL_UARTEx_DisableFifoMode>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 80017a4:	f000 fd66 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	240002b4 	.word	0x240002b4
 80017b0:	40004800 	.word	0x40004800

080017b4 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017bc:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c0:	2209      	movs	r2, #9
 80017c2:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fc:	f004 f852 	bl	80058a4 <HAL_PCD_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 8001806:	f000 fd35 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000344 	.word	0x24000344
 8001814:	40080000 	.word	0x40080000

08001818 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_DMA_Init+0x5c>)
 8001820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <MX_DMA_Init+0x5c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_DMA_Init+0x5c>)
 8001830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	200b      	movs	r0, #11
 8001842:	f001 face 	bl	8002de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001846:	200b      	movs	r0, #11
 8001848:	f001 fae5 	bl	8002e16 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	200c      	movs	r0, #12
 8001852:	f001 fac6 	bl	8002de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001856:	200c      	movs	r0, #12
 8001858:	f001 fadd 	bl	8002e16 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200d      	movs	r0, #13
 8001862:	f001 fabe 	bl	8002de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001866:	200d      	movs	r0, #13
 8001868:	f001 fad5 	bl	8002e16 <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58024400 	.word	0x58024400

08001878 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b9f      	ldr	r3, [pc, #636]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a9d      	ldr	r2, [pc, #628]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b9b      	ldr	r3, [pc, #620]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018ac:	4b97      	ldr	r3, [pc, #604]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018bc:	4b93      	ldr	r3, [pc, #588]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	4a8e      	ldr	r2, [pc, #568]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018da:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a87      	ldr	r2, [pc, #540]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b84      	ldr	r3, [pc, #528]	; (8001b0c <MX_GPIO_Init+0x294>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a7f      	ldr	r2, [pc, #508]	; (8001b0c <MX_GPIO_Init+0x294>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	4a78      	ldr	r2, [pc, #480]	; (8001b0c <MX_GPIO_Init+0x294>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001942:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a70      	ldr	r2, [pc, #448]	; (8001b0c <MX_GPIO_Init+0x294>)
 800194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <MX_GPIO_Init+0x294>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f244 0101 	movw	r1, #16385	; 0x4001
 8001966:	486a      	ldr	r0, [pc, #424]	; (8001b10 <MX_GPIO_Init+0x298>)
 8001968:	f003 ff54 	bl	8005814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 | RFIDreset_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001972:	4868      	ldr	r0, [pc, #416]	; (8001b14 <MX_GPIO_Init+0x29c>)
 8001974:	f003 ff4e 	bl	8005814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RFIDcs_Pin | GPIO_PIN_6 | GPIO_PIN_7,
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 800197e:	4864      	ldr	r0, [pc, #400]	; (8001b10 <MX_GPIO_Init+0x298>)
 8001980:	f003 ff48 	bl	8005814 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | LCDc_d_Pin,
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800198a:	4863      	ldr	r0, [pc, #396]	; (8001b18 <MX_GPIO_Init+0x2a0>)
 800198c:	f003 ff42 	bl	8005814 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCDcs_GPIO_Port, LCDcs_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001996:	4860      	ldr	r0, [pc, #384]	; (8001b18 <MX_GPIO_Init+0x2a0>)
 8001998:	f003 ff3c 	bl	8005814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LCDreset_Pin | GPIO_PIN_14, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80019a2:	485e      	ldr	r0, [pc, #376]	; (8001b1c <MX_GPIO_Init+0x2a4>)
 80019a4:	f003 ff36 	bl	8005814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2102      	movs	r1, #2
 80019ac:	4859      	ldr	r0, [pc, #356]	; (8001b14 <MX_GPIO_Init+0x29c>)
 80019ae:	f003 ff31 	bl	8005814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4856      	ldr	r0, [pc, #344]	; (8001b20 <MX_GPIO_Init+0x2a8>)
 80019c8:	f003 fd5c 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin RFIDcs_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | RFIDcs_Pin | LD3_Pin;
 80019cc:	f644 0301 	movw	r3, #18433	; 0x4801
 80019d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	484a      	ldr	r0, [pc, #296]	; (8001b10 <MX_GPIO_Init+0x298>)
 80019e6:	f003 fd4d 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_14;
 80019ea:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80019ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4845      	ldr	r0, [pc, #276]	; (8001b14 <MX_GPIO_Init+0x29c>)
 8001a00:	f003 fd40 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a0a:	2311      	movs	r3, #17
 8001a0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	483d      	ldr	r0, [pc, #244]	; (8001b14 <MX_GPIO_Init+0x29c>)
 8001a1e:	f003 fd31 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : RFIDreset_Pin LD2_Pin */
	GPIO_InitStruct.Pin = RFIDreset_Pin | LD2_Pin;
 8001a22:	f248 0302 	movw	r3, #32770	; 0x8002
 8001a26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4836      	ldr	r0, [pc, #216]	; (8001b14 <MX_GPIO_Init+0x29c>)
 8001a3c:	f003 fd22 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin LCDcs_Pin LCDc_d_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | LCDcs_Pin | LCDc_d_Pin;
 8001a40:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	482f      	ldr	r0, [pc, #188]	; (8001b18 <MX_GPIO_Init+0x2a0>)
 8001a5a:	f003 fd13 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a66:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	482a      	ldr	r0, [pc, #168]	; (8001b1c <MX_GPIO_Init+0x2a4>)
 8001a74:	f003 fd06 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4825      	ldr	r0, [pc, #148]	; (8001b24 <MX_GPIO_Init+0x2ac>)
 8001a8e:	f003 fcf9 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCDreset_Pin */
	GPIO_InitStruct.Pin = LCDreset_Pin;
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCDreset_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <MX_GPIO_Init+0x2a4>)
 8001aac:	f003 fcea 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4815      	ldr	r0, [pc, #84]	; (8001b1c <MX_GPIO_Init+0x2a4>)
 8001ac6:	f003 fcdd 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ace:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ad0:	2311      	movs	r3, #17
 8001ad2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480e      	ldr	r0, [pc, #56]	; (8001b1c <MX_GPIO_Init+0x2a4>)
 8001ae4:	f003 fcce 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aec:	2311      	movs	r3, #17
 8001aee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_GPIO_Init+0x298>)
 8001b00:	f003 fcc0 	bl	8005484 <HAL_GPIO_Init>

}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	58020400 	.word	0x58020400
 8001b14:	58021000 	.word	0x58021000
 8001b18:	58020c00 	.word	0x58020c00
 8001b1c:	58021800 	.word	0x58021800
 8001b20:	58020800 	.word	0x58020800
 8001b24:	58020000 	.word	0x58020000

08001b28 <ButtonMatrixUpdate>:
uint16_t ButtonMatrixPin[8] = { GPIO_PIN_12, GPIO_PIN_8, GPIO_PIN_11,
GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_14,
GPIO_PIN_6, GPIO_PIN_7 };

uint8_t ButtonMatrixRow = 0;  //What  R Now
void ButtonMatrixUpdate() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ButtonMatrixTimestamp >= 50) {
 8001b2e:	f001 f82d 	bl	8002b8c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <ButtonMatrixUpdate+0x10c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b31      	cmp	r3, #49	; 0x31
 8001b3c:	d975      	bls.n	8001c2a <ButtonMatrixUpdate+0x102>
		x = x + 1;
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <ButtonMatrixUpdate+0x110>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <ButtonMatrixUpdate+0x110>)
 8001b46:	6013      	str	r3, [r2, #0]
		ButtonMatrixTimestamp = HAL_GetTick();
 8001b48:	f001 f820 	bl	8002b8c <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <ButtonMatrixUpdate+0x10c>)
 8001b50:	6013      	str	r3, [r2, #0]
		int i;
		for (i = 0; i < 4; i += 1) { //0-3
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	e038      	b.n	8001bca <ButtonMatrixUpdate+0xa2>
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i],
 8001b58:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <ButtonMatrixUpdate+0x114>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <ButtonMatrixUpdate+0x118>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f003 fe3a 	bl	80057e4 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	707b      	strb	r3, [r7, #1]
					ButtonMatrixPin[i]);
			if (PinState == GPIO_PIN_RESET) // Button Press
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d111      	bne.n	8001b9e <ButtonMatrixUpdate+0x76>
					{
				ButtonMatrixState |= (uint16_t) 1 << (i + ButtonMatrixRow * 4);
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009a      	lsls	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	2201      	movs	r2, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <ButtonMatrixUpdate+0x120>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <ButtonMatrixUpdate+0x120>)
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	e012      	b.n	8001bc4 <ButtonMatrixUpdate+0x9c>
			} else {
				ButtonMatrixState &=
						~((uint16_t) 1 << (i + ButtonMatrixRow * 4));
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2201      	movs	r2, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
				ButtonMatrixState &=
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <ButtonMatrixUpdate+0x120>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <ButtonMatrixUpdate+0x120>)
 8001bc2:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; i += 1) { //0-3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	ddc3      	ble.n	8001b58 <ButtonMatrixUpdate+0x30>
			}
		}
		uint8_t NowOutputPin = ButtonMatrixRow + 4;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	70fb      	strb	r3, [r7, #3]
		//SET Rn
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin],
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <ButtonMatrixUpdate+0x114>)
 8001bdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <ButtonMatrixUpdate+0x118>)
 8001be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f003 fe12 	bl	8005814 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
		// update New Row
		ButtonMatrixRow = (ButtonMatrixRow + 1) % 4;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	425a      	negs	r2, r3
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	bf58      	it	pl
 8001c02:	4253      	negpl	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001c08:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixRow + 4;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <ButtonMatrixUpdate+0x11c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	70bb      	strb	r3, [r7, #2]
		//Reset Rn+1
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin],
 8001c12:	78bb      	ldrb	r3, [r7, #2]
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <ButtonMatrixUpdate+0x114>)
 8001c16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c1a:	78bb      	ldrb	r3, [r7, #2]
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <ButtonMatrixUpdate+0x118>)
 8001c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	f003 fdf5 	bl	8005814 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);

	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	240001b8 	.word	0x240001b8
 8001c38:	240001e8 	.word	0x240001e8
 8001c3c:	24000070 	.word	0x24000070
 8001c40:	24000090 	.word	0x24000090
 8001c44:	240001d0 	.word	0x240001d0
 8001c48:	24000184 	.word	0x24000184

08001c4c <Button>:
int Button( ButtonMatrixState) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	int pass = -16;
 8001c54:	f06f 030f 	mvn.w	r3, #15
 8001c58:	60fb      	str	r3, [r7, #12]
	switch (ButtonMatrixState) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c60:	f000 808d 	beq.w	8001d7e <Button+0x132>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	f300 808b 	bgt.w	8001d84 <Button+0x138>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	f000 8080 	beq.w	8001d78 <Button+0x12c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7e:	f300 8081 	bgt.w	8001d84 <Button+0x138>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c88:	d073      	beq.n	8001d72 <Button+0x126>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c90:	dc78      	bgt.n	8001d84 <Button+0x138>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b80      	cmp	r3, #128	; 0x80
 8001c96:	d069      	beq.n	8001d6c <Button+0x120>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b80      	cmp	r3, #128	; 0x80
 8001c9c:	dc72      	bgt.n	8001d84 <Button+0x138>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	dc49      	bgt.n	8001d38 <Button+0xec>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	dd6c      	ble.n	8001d84 <Button+0x138>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	2b1f      	cmp	r3, #31
 8001cb0:	d868      	bhi.n	8001d84 <Button+0x138>
 8001cb2:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <Button+0x6c>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001d41 	.word	0x08001d41
 8001cbc:	08001d47 	.word	0x08001d47
 8001cc0:	08001d85 	.word	0x08001d85
 8001cc4:	08001d4d 	.word	0x08001d4d
 8001cc8:	08001d85 	.word	0x08001d85
 8001ccc:	08001d85 	.word	0x08001d85
 8001cd0:	08001d85 	.word	0x08001d85
 8001cd4:	08001d53 	.word	0x08001d53
 8001cd8:	08001d85 	.word	0x08001d85
 8001cdc:	08001d85 	.word	0x08001d85
 8001ce0:	08001d85 	.word	0x08001d85
 8001ce4:	08001d85 	.word	0x08001d85
 8001ce8:	08001d85 	.word	0x08001d85
 8001cec:	08001d85 	.word	0x08001d85
 8001cf0:	08001d85 	.word	0x08001d85
 8001cf4:	08001d5b 	.word	0x08001d5b
 8001cf8:	08001d85 	.word	0x08001d85
 8001cfc:	08001d85 	.word	0x08001d85
 8001d00:	08001d85 	.word	0x08001d85
 8001d04:	08001d85 	.word	0x08001d85
 8001d08:	08001d85 	.word	0x08001d85
 8001d0c:	08001d85 	.word	0x08001d85
 8001d10:	08001d85 	.word	0x08001d85
 8001d14:	08001d85 	.word	0x08001d85
 8001d18:	08001d85 	.word	0x08001d85
 8001d1c:	08001d85 	.word	0x08001d85
 8001d20:	08001d85 	.word	0x08001d85
 8001d24:	08001d85 	.word	0x08001d85
 8001d28:	08001d85 	.word	0x08001d85
 8001d2c:	08001d85 	.word	0x08001d85
 8001d30:	08001d85 	.word	0x08001d85
 8001d34:	08001d61 	.word	0x08001d61
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d013      	beq.n	8001d66 <Button+0x11a>
		break;
	case 0b10000000000:
		pass = 9;
		break;
	default:
		break;
 8001d3e:	e021      	b.n	8001d84 <Button+0x138>
		pass = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
		break;
 8001d44:	e01f      	b.n	8001d86 <Button+0x13a>
		pass = 4;
 8001d46:	2304      	movs	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
		break;
 8001d4a:	e01c      	b.n	8001d86 <Button+0x13a>
		pass = 7;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
		break;
 8001d50:	e019      	b.n	8001d86 <Button+0x13a>
		pass = -6;
 8001d52:	f06f 0305 	mvn.w	r3, #5
 8001d56:	60fb      	str	r3, [r7, #12]
		break;
 8001d58:	e015      	b.n	8001d86 <Button+0x13a>
		pass = 2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	60fb      	str	r3, [r7, #12]
		break;
 8001d5e:	e012      	b.n	8001d86 <Button+0x13a>
		pass = 5;
 8001d60:	2305      	movs	r3, #5
 8001d62:	60fb      	str	r3, [r7, #12]
		break;
 8001d64:	e00f      	b.n	8001d86 <Button+0x13a>
		pass = 8;
 8001d66:	2308      	movs	r3, #8
 8001d68:	60fb      	str	r3, [r7, #12]
		break;
 8001d6a:	e00c      	b.n	8001d86 <Button+0x13a>
		pass = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
		break;
 8001d70:	e009      	b.n	8001d86 <Button+0x13a>
		pass = 3;
 8001d72:	2303      	movs	r3, #3
 8001d74:	60fb      	str	r3, [r7, #12]
		break;
 8001d76:	e006      	b.n	8001d86 <Button+0x13a>
		pass = 6;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	60fb      	str	r3, [r7, #12]
		break;
 8001d7c:	e003      	b.n	8001d86 <Button+0x13a>
		pass = 9;
 8001d7e:	2309      	movs	r3, #9
 8001d80:	60fb      	str	r3, [r7, #12]
		break;
 8001d82:	e000      	b.n	8001d86 <Button+0x13a>
		break;
 8001d84:	bf00      	nop
	}
	return pass;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <Write_MFRC522>:

void Write_MFRC522(char addr, char val) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
	char addr_bits = (((addr << 1) & 0x7E));
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <Write_MFRC522+0x5c>)
 8001dba:	f003 fd2b 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001dbe:	f107 010f 	add.w	r1, r7, #15
 8001dc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <Write_MFRC522+0x60>)
 8001dca:	f006 fb3d 	bl	8008448 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001dce:	1db9      	adds	r1, r7, #6
 8001dd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <Write_MFRC522+0x60>)
 8001dd8:	f006 fb36 	bl	8008448 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <Write_MFRC522+0x5c>)
 8001de4:	f003 fd16 	bl	8005814 <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58020400 	.word	0x58020400
 8001df4:	240001ec 	.word	0x240001ec

08001df8 <Read_MFRC522>:
char Read_MFRC522(char addr) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	char rx_bits;
	char addr_bits = (((addr << 1) & 0x7E) | 0x80);
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1e:	480f      	ldr	r0, [pc, #60]	; (8001e5c <Read_MFRC522+0x64>)
 8001e20:	f003 fcf8 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001e24:	f107 010e 	add.w	r1, r7, #14
 8001e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <Read_MFRC522+0x68>)
 8001e30:	f006 fb0a 	bl	8008448 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001e34:	f107 010f 	add.w	r1, r7, #15
 8001e38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4808      	ldr	r0, [pc, #32]	; (8001e60 <Read_MFRC522+0x68>)
 8001e40:	f006 fcf4 	bl	800882c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <Read_MFRC522+0x64>)
 8001e4c:	f003 fce2 	bl	8005814 <HAL_GPIO_WritePin>
	return (char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58020400 	.word	0x58020400
 8001e60:	240001ec 	.word	0x240001ec

08001e64 <MFRC522_ToCard>:
char MFRC522_ToCard(char command, char *sendData, char sendLen, char *backData,
		int *backLen) {
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	4613      	mov	r3, r2
 8001e74:	73bb      	strb	r3, [r7, #14]
	char status = 2;
 8001e76:	2302      	movs	r3, #2
 8001e78:	77fb      	strb	r3, [r7, #31]
	char irqEn = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	77bb      	strb	r3, [r7, #30]
	char waitIRq = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	777b      	strb	r3, [r7, #29]
	char lastBits;
	char n;
	int i;

	switch (command) {
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d006      	beq.n	8001e96 <MFRC522_ToCard+0x32>
 8001e88:	2b0e      	cmp	r3, #14
 8001e8a:	d109      	bne.n	8001ea0 <MFRC522_ToCard+0x3c>
	case 0x0E:     // Certification cards close
	{
		irqEn = 0x12;
 8001e8c:	2312      	movs	r3, #18
 8001e8e:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8001e90:	2310      	movs	r3, #16
 8001e92:	777b      	strb	r3, [r7, #29]
		break;
 8001e94:	e005      	b.n	8001ea2 <MFRC522_ToCard+0x3e>
	}
	case 0x0C:  // Transmit FIFO data
	{
		irqEn = 0x77;
 8001e96:	2377      	movs	r3, #119	; 0x77
 8001e98:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8001e9a:	2330      	movs	r3, #48	; 0x30
 8001e9c:	777b      	strb	r3, [r7, #29]
		break;
 8001e9e:	e000      	b.n	8001ea2 <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8001ea0:	bf00      	nop
	}

	Write_MFRC522(0x02, irqEn | 0x80);  // Interrupt request
 8001ea2:	7fbb      	ldrb	r3, [r7, #30]
 8001ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff ff71 	bl	8001d94 <Write_MFRC522>
	ClearBitMask(0x04, 0x80);         // Clear all interrupt request bit
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	2004      	movs	r0, #4
 8001eb6:	f000 f8c1 	bl	800203c <ClearBitMask>
	SetBitMask(0x0A, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f000 f8dd 	bl	800207c <SetBitMask>

	Write_MFRC522(0x01, 0x00);    // NO action; Cancel the current command
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff ff65 	bl	8001d94 <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e00a      	b.n	8001ee6 <MFRC522_ToCard+0x82>
		Write_MFRC522(0x09, sendData[i]);
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2009      	movs	r0, #9
 8001edc:	f7ff ff5a 	bl	8001d94 <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf0      	blt.n	8001ed0 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(0x01, command);
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff ff4e 	bl	8001d94 <Write_MFRC522>
	if (command == 0x0C) {
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d103      	bne.n	8001f06 <MFRC522_ToCard+0xa2>
		SetBitMask(0x0D, 0x80);      // StartSend=1,transmission of data starts
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	200d      	movs	r0, #13
 8001f02:	f000 f8bb 	bl	800207c <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000; // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001f06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f0a:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(0x04);
 8001f0c:	2004      	movs	r0, #4
 8001f0e:	f7ff ff73 	bl	8001df8 <Read_MFRC522>
 8001f12:	4603      	mov	r3, r0
 8001f14:	773b      	strb	r3, [r7, #28]
		i--;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <MFRC522_ToCard+0xd4>
 8001f22:	7f3b      	ldrb	r3, [r7, #28]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <MFRC522_ToCard+0xd4>
 8001f2c:	7f3a      	ldrb	r2, [r7, #28]
 8001f2e:	7f7b      	ldrb	r3, [r7, #29]
 8001f30:	4013      	ands	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0e9      	beq.n	8001f0c <MFRC522_ToCard+0xa8>

	ClearBitMask(0x0D, 0x80);      // StartSend=0
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	200d      	movs	r0, #13
 8001f3c:	f000 f87e 	bl	800203c <ClearBitMask>

	if (i != 0) {
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d050      	beq.n	8001fe8 <MFRC522_ToCard+0x184>
		if (!(Read_MFRC522(0x06) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 8001f46:	2006      	movs	r0, #6
 8001f48:	f7ff ff56 	bl	8001df8 <Read_MFRC522>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 031b 	and.w	r3, r3, #27
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d146      	bne.n	8001fe4 <MFRC522_ToCard+0x180>
		{
			status = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8001f5a:	7f3a      	ldrb	r2, [r7, #28]
 8001f5c:	7fbb      	ldrb	r3, [r7, #30]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MFRC522_ToCard+0x10a>
				status = 1;             // ??
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
			}

			if (command == 0x0C) {
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d139      	bne.n	8001fe8 <MFRC522_ToCard+0x184>
				n = Read_MFRC522(0x0A);
 8001f74:	200a      	movs	r0, #10
 8001f76:	f7ff ff3f 	bl	8001df8 <Read_MFRC522>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(0x0C) & 0x07;
 8001f7e:	200c      	movs	r0, #12
 8001f80:	f7ff ff3a 	bl	8001df8 <Read_MFRC522>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <MFRC522_ToCard+0x13e>
					*backLen = (n - 1) * 8 + lastBits;
 8001f92:	7f3b      	ldrb	r3, [r7, #28]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	00da      	lsls	r2, r3, #3
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e003      	b.n	8001faa <MFRC522_ToCard+0x146>
				} else {
					*backLen = n * 8;
 8001fa2:	7f3b      	ldrb	r3, [r7, #28]
 8001fa4:	00da      	lsls	r2, r3, #3
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8001faa:	7f3b      	ldrb	r3, [r7, #28]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <MFRC522_ToCard+0x150>
					n = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	773b      	strb	r3, [r7, #28]
				}
				if (n > 16) {
 8001fb4:	7f3b      	ldrb	r3, [r7, #28]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d901      	bls.n	8001fbe <MFRC522_ToCard+0x15a>
					n = 16;
 8001fba:	2310      	movs	r3, #16
 8001fbc:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e00a      	b.n	8001fda <MFRC522_ToCard+0x176>
					backData[i] = Read_MFRC522(0x09);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	18d4      	adds	r4, r2, r3
 8001fca:	2009      	movs	r0, #9
 8001fcc:	f7ff ff14 	bl	8001df8 <Read_MFRC522>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	7f3b      	ldrb	r3, [r7, #28]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbf0      	blt.n	8001fc4 <MFRC522_ToCard+0x160>
 8001fe2:	e001      	b.n	8001fe8 <MFRC522_ToCard+0x184>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			status = 2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	77fb      	strb	r3, [r7, #31]
		}
	} else {
		//printf("~~~ request timed out\r\n");
	}

	return status;
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <MFRC522_Request>:
char MFRC522_Request(char reqMode, char *TagType) {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	6039      	str	r1, [r7, #0]
 8001ffc:	71fb      	strb	r3, [r7, #7]
	char status;
	int backBits; // The received data bits

	Write_MFRC522(0x0D, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001ffe:	2107      	movs	r1, #7
 8002000:	200d      	movs	r0, #13
 8002002:	f7ff fec7 	bl	8001d94 <Write_MFRC522>

	TagType[0] = reqMode;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(0x0C, TagType, 1, TagType, &backBits);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2201      	movs	r2, #1
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	200c      	movs	r0, #12
 800201a:	f7ff ff23 	bl	8001e64 <MFRC522_ToCard>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	if ((status != 0) || (backBits != 0x10)) {
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <MFRC522_Request+0x3c>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d001      	beq.n	8002032 <MFRC522_Request+0x40>
		status = 2;
 800202e:	2302      	movs	r3, #2
 8002030:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <ClearBitMask>:
void ClearBitMask(char reg, char mask) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
	char tmp;
	tmp = Read_MFRC522(reg);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fed2 	bl	8001df8 <Read_MFRC522>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800205c:	43db      	mvns	r3, r3
 800205e:	b25a      	sxtb	r2, r3
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4013      	ands	r3, r2
 8002066:	b25b      	sxtb	r3, r3
 8002068:	b2da      	uxtb	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fe90 	bl	8001d94 <Write_MFRC522>
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <SetBitMask>:
void SetBitMask(char reg, char mask) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
	char tmp;
	tmp = Read_MFRC522(reg);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff feb2 	bl	8001df8 <Read_MFRC522>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	4313      	orrs	r3, r2
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fe75 	bl	8001d94 <Write_MFRC522>
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <MFRC522_Read>:
char MFRC522_Read(char blockAddr, char *recvData) {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af02      	add	r7, sp, #8
 80020b8:	4603      	mov	r3, r0
 80020ba:	6039      	str	r1, [r7, #0]
 80020bc:	71fb      	strb	r3, [r7, #7]
	char status;
	int unLen;

	recvData[0] = 0x30;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2230      	movs	r2, #48	; 0x30
 80020c2:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3302      	adds	r3, #2
 80020d0:	461a      	mov	r2, r3
 80020d2:	2102      	movs	r1, #2
 80020d4:	6838      	ldr	r0, [r7, #0]
 80020d6:	f000 f884 	bl	80021e2 <CalulateCRC>
	status = MFRC522_ToCard(0x0C, recvData, 4, recvData, &unLen);
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	200c      	movs	r0, #12
 80020e8:	f7ff febc 	bl	8001e64 <MFRC522_ToCard>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]

	if ((status != 0) || (unLen != 0x90)) {
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <MFRC522_Read+0x4a>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b90      	cmp	r3, #144	; 0x90
 80020fa:	d001      	beq.n	8002100 <MFRC522_Read+0x4e>
		status = 2;
 80020fc:	2302      	movs	r3, #2
 80020fe:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <MFRC522_Write>:
char MFRC522_Write(char blockAddr, char *writeData) {
 800210a:	b580      	push	{r7, lr}
 800210c:	b08c      	sub	sp, #48	; 0x30
 800210e:	af02      	add	r7, sp, #8
 8002110:	4603      	mov	r3, r0
 8002112:	6039      	str	r1, [r7, #0]
 8002114:	71fb      	strb	r3, [r7, #7]
	char status;
	int recvBits;
	char i;
	char buff[18];

	buff[0] = 0xA0;
 8002116:	23a0      	movs	r3, #160	; 0xa0
 8002118:	733b      	strb	r3, [r7, #12]
	buff[1] = blockAddr;
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	737b      	strb	r3, [r7, #13]
	CalulateCRC(buff, 2, &buff[2]);
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2102      	movs	r1, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f859 	bl	80021e2 <CalulateCRC>
	status = MFRC522_ToCard(0x0C, buff, 4, buff, &recvBits);
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	f107 010c 	add.w	r1, r7, #12
 8002138:	f107 0320 	add.w	r3, r7, #32
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	2204      	movs	r2, #4
 8002142:	200c      	movs	r0, #12
 8002144:	f7ff fe8e 	bl	8001e64 <MFRC522_ToCard>
 8002148:	4603      	mov	r3, r0
 800214a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((status != 0))  // || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 800214e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <MFRC522_Write+0x52>
	{
		status = 2;
 8002156:	2302      	movs	r3, #2
 8002158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (status == 0) {
 800215c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002160:	2b00      	cmp	r3, #0
 8002162:	d138      	bne.n	80021d6 <MFRC522_Write+0xcc>
		for (i = 0; i < 16; i++)		//Data to the FIFO write 16Byte
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800216a:	e010      	b.n	800218e <MFRC522_Write+0x84>
				{
			buff[i] = *(writeData + i);
 800216c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	441a      	add	r2, r3
 8002174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800217e:	440b      	add	r3, r1
 8002180:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (i = 0; i < 16; i++)		//Data to the FIFO write 16Byte
 8002184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002188:	3301      	adds	r3, #1
 800218a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800218e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d9ea      	bls.n	800216c <MFRC522_Write+0x62>
		}
		CalulateCRC(buff, 16, &buff[16]);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	f103 0210 	add.w	r2, r3, #16
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2110      	movs	r1, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f81c 	bl	80021e2 <CalulateCRC>
		status = MFRC522_ToCard(0x0C, buff, 18, buff, &recvBits);
 80021aa:	f107 020c 	add.w	r2, r7, #12
 80021ae:	f107 010c 	add.w	r1, r7, #12
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	2212      	movs	r2, #18
 80021bc:	200c      	movs	r0, #12
 80021be:	f7ff fe51 	bl	8001e64 <MFRC522_ToCard>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if ((status != 0))	// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 80021c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <MFRC522_Write+0xcc>
		{
			status = 2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	return status;
 80021d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <CalulateCRC>:
void CalulateCRC(char *pIndata, char len, char *pOutData) {
 80021e2:	b590      	push	{r4, r7, lr}
 80021e4:	b087      	sub	sp, #28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	460b      	mov	r3, r1
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	72fb      	strb	r3, [r7, #11]
	char i, n;

	ClearBitMask(0x05, 0x04);			//CRCIrq = 0
 80021f0:	2104      	movs	r1, #4
 80021f2:	2005      	movs	r0, #5
 80021f4:	f7ff ff22 	bl	800203c <ClearBitMask>
	SetBitMask(0x0A, 0x80);			//Clear the FIFO pointer
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	200a      	movs	r0, #10
 80021fc:	f7ff ff3e 	bl	800207c <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]
 8002204:	e00a      	b.n	800221c <CalulateCRC+0x3a>
		Write_MFRC522(0x09, *(pIndata + i));
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	2009      	movs	r0, #9
 8002212:	f7ff fdbf 	bl	8001d94 <Write_MFRC522>
	for (i = 0; i < len; i++) {
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	3301      	adds	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
 800221c:	7dfa      	ldrb	r2, [r7, #23]
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3f0      	bcc.n	8002206 <CalulateCRC+0x24>
	}
	Write_MFRC522(0x01, 0x03);
 8002224:	2103      	movs	r1, #3
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff fdb4 	bl	8001d94 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 800222c:	23ff      	movs	r3, #255	; 0xff
 800222e:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(0x05);
 8002230:	2005      	movs	r0, #5
 8002232:	f7ff fde1 	bl	8001df8 <Read_MFRC522>
 8002236:	4603      	mov	r3, r0
 8002238:	75bb      	strb	r3, [r7, #22]
		i--;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	3b01      	subs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <CalulateCRC+0x6e>
 8002246:	7dbb      	ldrb	r3, [r7, #22]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(0x22);
 8002250:	2022      	movs	r0, #34	; 0x22
 8002252:	f7ff fdd1 	bl	8001df8 <Read_MFRC522>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(0x21);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	1c5c      	adds	r4, r3, #1
 8002262:	2021      	movs	r0, #33	; 0x21
 8002264:	f7ff fdc8 	bl	8001df8 <Read_MFRC522>
 8002268:	4603      	mov	r3, r0
 800226a:	7023      	strb	r3, [r4, #0]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}

08002274 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800227c:	e7fe      	b.n	800227c <Error_Handler+0x8>
	...

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_MspInit+0x30>)
 8002288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_MspInit+0x30>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_MspInit+0x30>)
 8002298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	58024400 	.word	0x58024400

080022b4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a59      	ldr	r2, [pc, #356]	; (8002438 <HAL_ETH_MspInit+0x184>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f040 80ab 	bne.w	800242e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80022d8:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_ETH_MspInit+0x188>)
 80022da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022de:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_ETH_MspInit+0x188>)
 80022e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_ETH_MspInit+0x188>)
 80022ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80022f6:	4b51      	ldr	r3, [pc, #324]	; (800243c <HAL_ETH_MspInit+0x188>)
 80022f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_ETH_MspInit+0x188>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002314:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800231a:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_ETH_MspInit+0x188>)
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002324:	4b45      	ldr	r3, [pc, #276]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002332:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002338:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_ETH_MspInit+0x188>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b33      	ldr	r3, [pc, #204]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_ETH_MspInit+0x188>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002392:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_ETH_MspInit+0x188>)
 8002394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_ETH_MspInit+0x188>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80023aa:	2332      	movs	r3, #50	; 0x32
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023ba:	230b      	movs	r3, #11
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	481e      	ldr	r0, [pc, #120]	; (8002440 <HAL_ETH_MspInit+0x18c>)
 80023c6:	f003 f85d 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80023ca:	2386      	movs	r3, #134	; 0x86
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023da:	230b      	movs	r3, #11
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	4817      	ldr	r0, [pc, #92]	; (8002444 <HAL_ETH_MspInit+0x190>)
 80023e6:	f003 f84d 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023fc:	230b      	movs	r3, #11
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4810      	ldr	r0, [pc, #64]	; (8002448 <HAL_ETH_MspInit+0x194>)
 8002408:	f003 f83c 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800240c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800241e:	230b      	movs	r3, #11
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	4619      	mov	r1, r3
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <HAL_ETH_MspInit+0x198>)
 800242a:	f003 f82b 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3738      	adds	r7, #56	; 0x38
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40028000 	.word	0x40028000
 800243c:	58024400 	.word	0x58024400
 8002440:	58020800 	.word	0x58020800
 8002444:	58020000 	.word	0x58020000
 8002448:	58020400 	.word	0x58020400
 800244c:	58021800 	.word	0x58021800

08002450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0bc      	sub	sp, #240	; 0xf0
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 0320 	add.w	r3, r7, #32
 800246c:	22bc      	movs	r2, #188	; 0xbc
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f008 fd55 	bl	800af20 <memset>
  if(hspi->Instance==SPI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4abb      	ldr	r2, [pc, #748]	; (8002768 <HAL_SPI_MspInit+0x318>)
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 809d 	bne.w	80025bc <HAL_SPI_MspInit+0x16c>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002486:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002488:	2300      	movs	r3, #0
 800248a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fb71 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800249c:	f7ff feea 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a0:	4bb2      	ldr	r3, [pc, #712]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a6:	4ab1      	ldr	r2, [pc, #708]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024b0:	4bae      	ldr	r3, [pc, #696]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4bab      	ldr	r3, [pc, #684]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	4aa9      	ldr	r2, [pc, #676]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ce:	4ba7      	ldr	r3, [pc, #668]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4ba3      	ldr	r3, [pc, #652]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	4aa2      	ldr	r2, [pc, #648]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ec:	4b9f      	ldr	r3, [pc, #636]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024fa:	2320      	movs	r3, #32
 80024fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002512:	2305      	movs	r3, #5
 8002514:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800251c:	4619      	mov	r1, r3
 800251e:	4894      	ldr	r0, [pc, #592]	; (8002770 <HAL_SPI_MspInit+0x320>)
 8002520:	f002 ffb0 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002524:	2320      	movs	r3, #32
 8002526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800253c:	2305      	movs	r3, #5
 800253e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002546:	4619      	mov	r1, r3
 8002548:	488a      	ldr	r0, [pc, #552]	; (8002774 <HAL_SPI_MspInit+0x324>)
 800254a:	f002 ff9b 	bl	8005484 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800254e:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002550:	4a8a      	ldr	r2, [pc, #552]	; (800277c <HAL_SPI_MspInit+0x32c>)
 8002552:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002554:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002556:	2226      	movs	r2, #38	; 0x26
 8002558:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800255a:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_SPI_MspInit+0x328>)
 800255c:	2240      	movs	r2, #64	; 0x40
 800255e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002560:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002566:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_SPI_MspInit+0x328>)
 800257c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002580:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002588:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_SPI_MspInit+0x328>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800258e:	487a      	ldr	r0, [pc, #488]	; (8002778 <HAL_SPI_MspInit+0x328>)
 8002590:	f000 fc5c 	bl	8002e4c <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800259a:	f7ff fe6b 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_SPI_MspInit+0x328>)
 80025a2:	679a      	str	r2, [r3, #120]	; 0x78
 80025a4:	4a74      	ldr	r2, [pc, #464]	; (8002778 <HAL_SPI_MspInit+0x328>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2023      	movs	r0, #35	; 0x23
 80025b0:	f000 fc17 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025b4:	2023      	movs	r0, #35	; 0x23
 80025b6:	f000 fc2e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025ba:	e0d0      	b.n	800275e <HAL_SPI_MspInit+0x30e>
  else if(hspi->Instance==SPI2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6f      	ldr	r2, [pc, #444]	; (8002780 <HAL_SPI_MspInit+0x330>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	f040 80cb 	bne.w	800275e <HAL_SPI_MspInit+0x30e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d2:	f107 0320 	add.w	r3, r7, #32
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 face 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_SPI_MspInit+0x196>
      Error_Handler();
 80025e2:	f7ff fe47 	bl	8002274 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	4a5f      	ldr	r2, [pc, #380]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80025ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_SPI_MspInit+0x31c>)
 80025f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_SPI_MspInit+0x31c>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_SPI_MspInit+0x31c>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_SPI_MspInit+0x31c>)
 8002616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b52      	ldr	r3, [pc, #328]	; (800276c <HAL_SPI_MspInit+0x31c>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <HAL_SPI_MspInit+0x31c>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002632:	4b4e      	ldr	r3, [pc, #312]	; (800276c <HAL_SPI_MspInit+0x31c>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002640:	230c      	movs	r3, #12
 8002642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002658:	2305      	movs	r3, #5
 800265a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002662:	4619      	mov	r1, r3
 8002664:	4847      	ldr	r0, [pc, #284]	; (8002784 <HAL_SPI_MspInit+0x334>)
 8002666:	f002 ff0d 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002684:	2305      	movs	r3, #5
 8002686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800268e:	4619      	mov	r1, r3
 8002690:	4838      	ldr	r0, [pc, #224]	; (8002774 <HAL_SPI_MspInit+0x324>)
 8002692:	f002 fef7 	bl	8005484 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8002696:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_SPI_MspInit+0x338>)
 8002698:	4a3c      	ldr	r2, [pc, #240]	; (800278c <HAL_SPI_MspInit+0x33c>)
 800269a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_SPI_MspInit+0x338>)
 800269e:	2228      	movs	r2, #40	; 0x28
 80026a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b6:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80026d6:	482c      	ldr	r0, [pc, #176]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026d8:	f000 fbb8 	bl	8002e4c <HAL_DMA_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 80026e2:	f7ff fdc7 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026ea:	679a      	str	r2, [r3, #120]	; 0x78
 80026ec:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_SPI_MspInit+0x338>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_SPI_MspInit+0x340>)
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_SPI_MspInit+0x344>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_SPI_MspInit+0x340>)
 80026fa:	2227      	movs	r2, #39	; 0x27
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_SPI_MspInit+0x340>)
 800270c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002710:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_SPI_MspInit+0x340>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002724:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_SPI_MspInit+0x340>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002732:	4817      	ldr	r0, [pc, #92]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002734:	f000 fb8a 	bl	8002e4c <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_SPI_MspInit+0x2f2>
      Error_Handler();
 800273e:	f7ff fd99 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_SPI_MspInit+0x340>)
 8002746:	67da      	str	r2, [r3, #124]	; 0x7c
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_SPI_MspInit+0x340>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2024      	movs	r0, #36	; 0x24
 8002754:	f000 fb45 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002758:	2024      	movs	r0, #36	; 0x24
 800275a:	f000 fb5c 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	37f0      	adds	r7, #240	; 0xf0
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40013000 	.word	0x40013000
 800276c:	58024400 	.word	0x58024400
 8002770:	58020000 	.word	0x58020000
 8002774:	58020400 	.word	0x58020400
 8002778:	240009dc 	.word	0x240009dc
 800277c:	40020010 	.word	0x40020010
 8002780:	40003800 	.word	0x40003800
 8002784:	58020800 	.word	0x58020800
 8002788:	240008a8 	.word	0x240008a8
 800278c:	40020028 	.word	0x40020028
 8002790:	2400074c 	.word	0x2400074c
 8002794:	40020040 	.word	0x40020040

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b8      	sub	sp, #224	; 0xe0
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	22bc      	movs	r2, #188	; 0xbc
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f008 fbb1 	bl	800af20 <memset>
  if(huart->Instance==USART3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_UART_MspInit+0xc0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d142      	bne.n	800284e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027c8:	2302      	movs	r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 f9ce 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027e2:	f7ff fd47 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_UART_MspInit+0xc4>)
 80027e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_UART_MspInit+0xc4>)
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_UART_MspInit+0xc4>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_UART_MspInit+0xc4>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_UART_MspInit+0xc4>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_UART_MspInit+0xc4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800283c:	2307      	movs	r3, #7
 800283e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_UART_MspInit+0xc8>)
 800284a:	f002 fe1b 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	37e0      	adds	r7, #224	; 0xe0
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40004800 	.word	0x40004800
 800285c:	58024400 	.word	0x58024400
 8002860:	58020c00 	.word	0x58020c00

08002864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0b8      	sub	sp, #224	; 0xe0
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	22bc      	movs	r2, #188	; 0xbc
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f008 fb4b 	bl	800af20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a36      	ldr	r2, [pc, #216]	; (8002968 <HAL_PCD_MspInit+0x104>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d165      	bne.n	8002960 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002894:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800289e:	2318      	movs	r3, #24
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80028a6:	2304      	movs	r3, #4
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80028aa:	2302      	movs	r3, #2
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80028ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80028b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 f957 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80028d0:	f7ff fcd0 	bl	8002274 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80028d4:	f003 f988 	bl	8005be8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_PCD_MspInit+0x108>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_PCD_MspInit+0x108>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_PCD_MspInit+0x108>)
 80028ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800290e:	4619      	mov	r1, r3
 8002910:	4817      	ldr	r0, [pc, #92]	; (8002970 <HAL_PCD_MspInit+0x10c>)
 8002912:	f002 fdb7 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002916:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800291a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002930:	230a      	movs	r3, #10
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800293a:	4619      	mov	r1, r3
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <HAL_PCD_MspInit+0x10c>)
 800293e:	f002 fda1 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_PCD_MspInit+0x108>)
 8002944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002948:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_PCD_MspInit+0x108>)
 800294a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800294e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_PCD_MspInit+0x108>)
 8002954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	37e0      	adds	r7, #224	; 0xe0
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40080000 	.word	0x40080000
 800296c:	58024400 	.word	0x58024400
 8002970:	58020000 	.word	0x58020000

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>

0800297a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler+0x4>

08002980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0x4>

08002986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <UsageFault_Handler+0x4>

08002992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c0:	f000 f8d0 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <DMA1_Stream0_IRQHandler+0x10>)
 80029ce:	f000 ffdd 	bl	800398c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	240009dc 	.word	0x240009dc

080029dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <DMA1_Stream1_IRQHandler+0x10>)
 80029e2:	f000 ffd3 	bl	800398c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	240008a8 	.word	0x240008a8

080029f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <DMA1_Stream2_IRQHandler+0x10>)
 80029f6:	f000 ffc9 	bl	800398c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2400074c 	.word	0x2400074c

08002a04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <SPI1_IRQHandler+0x10>)
 8002a0a:	f006 fbed 	bl	80091e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	240007dc 	.word	0x240007dc

08002a18 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <SPI2_IRQHandler+0x10>)
 8002a1e:	f006 fbe3 	bl	80091e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	240001ec 	.word	0x240001ec

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a30:	f7fd fdce 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	; (8002a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f008 fa3d 	bl	800aed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7fe f97f 	bl	8000d60 <main>
  bx  lr
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a6c:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8002a70:	0800cb44 	.word	0x0800cb44
  ldr r2, =_sbss
 8002a74:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8002a78:	24000a98 	.word	0x24000a98

08002a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC3_IRQHandler>
	...

08002a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a86:	2003      	movs	r0, #3
 8002a88:	f000 f9a0 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a8c:	f003 fe9e 	bl	80067cc <HAL_RCC_GetSysClockFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_Init+0x68>)
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	4913      	ldr	r1, [pc, #76]	; (8002aec <HAL_Init+0x6c>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_Init+0x68>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_Init+0x6c>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_Init+0x70>)
 8002ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <HAL_Init+0x74>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f814 	bl	8002af8 <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e002      	b.n	8002ae0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ada:	f7ff fbd1 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	0800afc8 	.word	0x0800afc8
 8002af0:	24000004 	.word	0x24000004
 8002af4:	24000000 	.word	0x24000000

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_InitTick+0x60>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e021      	b.n	8002b50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_InitTick+0x64>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_InitTick+0x60>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f985 	bl	8002e32 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f000 f94f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_InitTick+0x68>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	240000a4 	.word	0x240000a4
 8002b5c:	24000000 	.word	0x24000000
 8002b60:	240000a0 	.word	0x240000a0

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	240000a4 	.word	0x240000a4
 8002b88:	24000a94 	.word	0x24000a94

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	24000a94 	.word	0x24000a94

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	240000a4 	.word	0x240000a4

08002bec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetREVID+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	5c001000 	.word	0x5c001000

08002c04 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c14:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	58000400 	.word	0x58000400

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	05fa0000 	.word	0x05fa0000

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff40 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff90 	bl	8002d20 <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5f 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff33 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa4 	bl	8002d88 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff fe9a 	bl	8002b8c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e316      	b.n	8003492 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a66      	ldr	r2, [pc, #408]	; (8003004 <HAL_DMA_Init+0x1b8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04a      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_DMA_Init+0x1bc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d045      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a63      	ldr	r2, [pc, #396]	; (800300c <HAL_DMA_Init+0x1c0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d040      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a62      	ldr	r2, [pc, #392]	; (8003010 <HAL_DMA_Init+0x1c4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03b      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a60      	ldr	r2, [pc, #384]	; (8003014 <HAL_DMA_Init+0x1c8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d036      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <HAL_DMA_Init+0x1cc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5d      	ldr	r2, [pc, #372]	; (800301c <HAL_DMA_Init+0x1d0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02c      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5c      	ldr	r2, [pc, #368]	; (8003020 <HAL_DMA_Init+0x1d4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d027      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5a      	ldr	r2, [pc, #360]	; (8003024 <HAL_DMA_Init+0x1d8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a59      	ldr	r2, [pc, #356]	; (8003028 <HAL_DMA_Init+0x1dc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a57      	ldr	r2, [pc, #348]	; (800302c <HAL_DMA_Init+0x1e0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_DMA_Init+0x1e4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a54      	ldr	r2, [pc, #336]	; (8003034 <HAL_DMA_Init+0x1e8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a53      	ldr	r2, [pc, #332]	; (8003038 <HAL_DMA_Init+0x1ec>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_DMA_Init+0x1f0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Init+0xb8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_DMA_Init+0x1f4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Init+0xbc>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_Init+0xbe>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 813b 	beq.w	8003186 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a37      	ldr	r2, [pc, #220]	; (8003004 <HAL_DMA_Init+0x1b8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a36      	ldr	r2, [pc, #216]	; (8003008 <HAL_DMA_Init+0x1bc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_DMA_Init+0x1c0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <HAL_DMA_Init+0x1c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_DMA_Init+0x1c8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a30      	ldr	r2, [pc, #192]	; (8003018 <HAL_DMA_Init+0x1cc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_DMA_Init+0x1d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_DMA_Init+0x1d4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_DMA_Init+0x1d8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_DMA_Init+0x1dc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <HAL_DMA_Init+0x1e0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_DMA_Init+0x1e4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_DMA_Init+0x1e8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_DMA_Init+0x1ec>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_DMA_Init+0x1f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_Init+0x174>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_DMA_Init+0x1f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <HAL_DMA_Init+0x186>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_DMA_Init+0x196>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fe2:	e02f      	b.n	8003044 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fe4:	f7ff fdd2 	bl	8002b8c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d928      	bls.n	8003044 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e246      	b.n	8003492 <HAL_DMA_Init+0x646>
 8003004:	40020010 	.word	0x40020010
 8003008:	40020028 	.word	0x40020028
 800300c:	40020040 	.word	0x40020040
 8003010:	40020058 	.word	0x40020058
 8003014:	40020070 	.word	0x40020070
 8003018:	40020088 	.word	0x40020088
 800301c:	400200a0 	.word	0x400200a0
 8003020:	400200b8 	.word	0x400200b8
 8003024:	40020410 	.word	0x40020410
 8003028:	40020428 	.word	0x40020428
 800302c:	40020440 	.word	0x40020440
 8003030:	40020458 	.word	0x40020458
 8003034:	40020470 	.word	0x40020470
 8003038:	40020488 	.word	0x40020488
 800303c:	400204a0 	.word	0x400204a0
 8003040:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1c8      	bne.n	8002fe4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4b83      	ldr	r3, [pc, #524]	; (800326c <HAL_DMA_Init+0x420>)
 800305e:	4013      	ands	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800306a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4313      	orrs	r3, r2
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030a8:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_DMA_Init+0x424>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b71      	ldr	r3, [pc, #452]	; (8003274 <HAL_DMA_Init+0x428>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b4:	d328      	bcc.n	8003108 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b28      	cmp	r3, #40	; 0x28
 80030bc:	d903      	bls.n	80030c6 <HAL_DMA_Init+0x27a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b2e      	cmp	r3, #46	; 0x2e
 80030c4:	d917      	bls.n	80030f6 <HAL_DMA_Init+0x2aa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b3e      	cmp	r3, #62	; 0x3e
 80030cc:	d903      	bls.n	80030d6 <HAL_DMA_Init+0x28a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b42      	cmp	r3, #66	; 0x42
 80030d4:	d90f      	bls.n	80030f6 <HAL_DMA_Init+0x2aa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b46      	cmp	r3, #70	; 0x46
 80030dc:	d903      	bls.n	80030e6 <HAL_DMA_Init+0x29a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b48      	cmp	r3, #72	; 0x48
 80030e4:	d907      	bls.n	80030f6 <HAL_DMA_Init+0x2aa>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b4e      	cmp	r3, #78	; 0x4e
 80030ec:	d905      	bls.n	80030fa <HAL_DMA_Init+0x2ae>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b52      	cmp	r3, #82	; 0x52
 80030f4:	d801      	bhi.n	80030fa <HAL_DMA_Init+0x2ae>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_DMA_Init+0x2b0>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b04      	cmp	r3, #4
 8003130:	d117      	bne.n	8003162 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f001 fbfd 	bl	8004944 <DMA_CheckFifoParam>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e197      	b.n	8003492 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f001 fb38 	bl	80047e0 <DMA_CalcBaseAndBitshift>
 8003170:	4603      	mov	r3, r0
 8003172:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	223f      	movs	r2, #63	; 0x3f
 800317e:	409a      	lsls	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e0cd      	b.n	8003322 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <HAL_DMA_Init+0x42c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a39      	ldr	r2, [pc, #228]	; (800327c <HAL_DMA_Init+0x430>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_DMA_Init+0x434>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a36      	ldr	r2, [pc, #216]	; (8003284 <HAL_DMA_Init+0x438>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a35      	ldr	r2, [pc, #212]	; (8003288 <HAL_DMA_Init+0x43c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a33      	ldr	r2, [pc, #204]	; (800328c <HAL_DMA_Init+0x440>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <HAL_DMA_Init+0x444>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Init+0x38a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a30      	ldr	r2, [pc, #192]	; (8003294 <HAL_DMA_Init+0x448>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_DMA_Init+0x38e>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_DMA_Init+0x390>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8097 	beq.w	8003310 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a24      	ldr	r2, [pc, #144]	; (8003278 <HAL_DMA_Init+0x42c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d021      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_DMA_Init+0x430>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01c      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_DMA_Init+0x434>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d017      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_DMA_Init+0x438>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d012      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_DMA_Init+0x43c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00d      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_DMA_Init+0x440>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d008      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_DMA_Init+0x444>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <HAL_DMA_Init+0x3e4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_DMA_Init+0x448>)
 800322e:	4293      	cmp	r3, r2
 8003230:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_DMA_Init+0x44c>)
 800324e:	4013      	ands	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d020      	beq.n	800329c <HAL_DMA_Init+0x450>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d102      	bne.n	8003268 <HAL_DMA_Init+0x41c>
 8003262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003266:	e01a      	b.n	800329e <HAL_DMA_Init+0x452>
 8003268:	2300      	movs	r3, #0
 800326a:	e018      	b.n	800329e <HAL_DMA_Init+0x452>
 800326c:	fe10803f 	.word	0xfe10803f
 8003270:	5c001000 	.word	0x5c001000
 8003274:	ffff0000 	.word	0xffff0000
 8003278:	58025408 	.word	0x58025408
 800327c:	5802541c 	.word	0x5802541c
 8003280:	58025430 	.word	0x58025430
 8003284:	58025444 	.word	0x58025444
 8003288:	58025458 	.word	0x58025458
 800328c:	5802546c 	.word	0x5802546c
 8003290:	58025480 	.word	0x58025480
 8003294:	58025494 	.word	0x58025494
 8003298:	fffe000f 	.word	0xfffe000f
 800329c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <HAL_DMA_Init+0x650>)
 80032e4:	4413      	add	r3, r2
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_DMA_Init+0x654>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 fa73 	bl	80047e0 <DMA_CalcBaseAndBitshift>
 80032fa:	4603      	mov	r3, r0
 80032fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e008      	b.n	8003322 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0b7      	b.n	8003492 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <HAL_DMA_Init+0x658>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d072      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5d      	ldr	r2, [pc, #372]	; (80034a8 <HAL_DMA_Init+0x65c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5c      	ldr	r2, [pc, #368]	; (80034ac <HAL_DMA_Init+0x660>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d068      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5a      	ldr	r2, [pc, #360]	; (80034b0 <HAL_DMA_Init+0x664>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d063      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a59      	ldr	r2, [pc, #356]	; (80034b4 <HAL_DMA_Init+0x668>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a57      	ldr	r2, [pc, #348]	; (80034b8 <HAL_DMA_Init+0x66c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d059      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_DMA_Init+0x670>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d054      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_DMA_Init+0x674>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_DMA_Init+0x678>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a51      	ldr	r2, [pc, #324]	; (80034c8 <HAL_DMA_Init+0x67c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a50      	ldr	r2, [pc, #320]	; (80034cc <HAL_DMA_Init+0x680>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a4e      	ldr	r2, [pc, #312]	; (80034d0 <HAL_DMA_Init+0x684>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a4d      	ldr	r2, [pc, #308]	; (80034d4 <HAL_DMA_Init+0x688>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_DMA_Init+0x68c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_DMA_Init+0x690>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a48      	ldr	r2, [pc, #288]	; (80034e0 <HAL_DMA_Init+0x694>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_DMA_Init+0x698>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a45      	ldr	r2, [pc, #276]	; (80034e8 <HAL_DMA_Init+0x69c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a44      	ldr	r2, [pc, #272]	; (80034ec <HAL_DMA_Init+0x6a0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_DMA_Init+0x6a4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a41      	ldr	r2, [pc, #260]	; (80034f4 <HAL_DMA_Init+0x6a8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3f      	ldr	r2, [pc, #252]	; (80034f8 <HAL_DMA_Init+0x6ac>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_DMA_Init+0x6b0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Init+0x5c6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <HAL_DMA_Init+0x6b4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Init+0x5ca>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Init+0x5cc>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d032      	beq.n	8003482 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f001 fb0d 	bl	8004a3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d102      	bne.n	8003430 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003444:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_DMA_Init+0x624>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d80c      	bhi.n	8003470 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 fb8a 	bl	8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	e008      	b.n	8003482 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	a7fdabf8 	.word	0xa7fdabf8
 80034a0:	cccccccd 	.word	0xcccccccd
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
 80034e4:	58025408 	.word	0x58025408
 80034e8:	5802541c 	.word	0x5802541c
 80034ec:	58025430 	.word	0x58025430
 80034f0:	58025444 	.word	0x58025444
 80034f4:	58025458 	.word	0x58025458
 80034f8:	5802546c 	.word	0x5802546c
 80034fc:	58025480 	.word	0x58025480
 8003500:	58025494 	.word	0x58025494

08003504 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e205      	b.n	8003922 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d004      	beq.n	800352c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e1fa      	b.n	8003922 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a8c      	ldr	r2, [pc, #560]	; (8003764 <HAL_DMA_Abort_IT+0x260>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04a      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a8b      	ldr	r2, [pc, #556]	; (8003768 <HAL_DMA_Abort_IT+0x264>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d045      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a89      	ldr	r2, [pc, #548]	; (800376c <HAL_DMA_Abort_IT+0x268>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d040      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a88      	ldr	r2, [pc, #544]	; (8003770 <HAL_DMA_Abort_IT+0x26c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d03b      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a86      	ldr	r2, [pc, #536]	; (8003774 <HAL_DMA_Abort_IT+0x270>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d036      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a85      	ldr	r2, [pc, #532]	; (8003778 <HAL_DMA_Abort_IT+0x274>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d031      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a83      	ldr	r2, [pc, #524]	; (800377c <HAL_DMA_Abort_IT+0x278>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02c      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a82      	ldr	r2, [pc, #520]	; (8003780 <HAL_DMA_Abort_IT+0x27c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d027      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a80      	ldr	r2, [pc, #512]	; (8003784 <HAL_DMA_Abort_IT+0x280>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <HAL_DMA_Abort_IT+0x284>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01d      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7d      	ldr	r2, [pc, #500]	; (800378c <HAL_DMA_Abort_IT+0x288>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7c      	ldr	r2, [pc, #496]	; (8003790 <HAL_DMA_Abort_IT+0x28c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_DMA_Abort_IT+0x290>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a79      	ldr	r2, [pc, #484]	; (8003798 <HAL_DMA_Abort_IT+0x294>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_DMA_Abort_IT+0x298>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_DMA_Abort_IT+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a76      	ldr	r2, [pc, #472]	; (80037a0 <HAL_DMA_Abort_IT+0x29c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_DMA_Abort_IT+0xcc>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_DMA_Abort_IT+0xce>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d065      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a60      	ldr	r2, [pc, #384]	; (8003764 <HAL_DMA_Abort_IT+0x260>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04a      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_DMA_Abort_IT+0x264>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d045      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5d      	ldr	r2, [pc, #372]	; (800376c <HAL_DMA_Abort_IT+0x268>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d040      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <HAL_DMA_Abort_IT+0x26c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d03b      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5a      	ldr	r2, [pc, #360]	; (8003774 <HAL_DMA_Abort_IT+0x270>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d036      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a58      	ldr	r2, [pc, #352]	; (8003778 <HAL_DMA_Abort_IT+0x274>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d031      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_DMA_Abort_IT+0x278>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d02c      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a55      	ldr	r2, [pc, #340]	; (8003780 <HAL_DMA_Abort_IT+0x27c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d027      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a54      	ldr	r2, [pc, #336]	; (8003784 <HAL_DMA_Abort_IT+0x280>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_DMA_Abort_IT+0x284>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01d      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a51      	ldr	r2, [pc, #324]	; (800378c <HAL_DMA_Abort_IT+0x288>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4f      	ldr	r2, [pc, #316]	; (8003790 <HAL_DMA_Abort_IT+0x28c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4e      	ldr	r2, [pc, #312]	; (8003794 <HAL_DMA_Abort_IT+0x290>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_DMA_Abort_IT+0x294>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4b      	ldr	r2, [pc, #300]	; (800379c <HAL_DMA_Abort_IT+0x298>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_DMA_Abort_IT+0x17a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <HAL_DMA_Abort_IT+0x29c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <HAL_DMA_Abort_IT+0x18c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e147      	b.n	8003920 <HAL_DMA_Abort_IT+0x41c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e13e      	b.n	8003920 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 020e 	bic.w	r2, r2, #14
 80036b0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_DMA_Abort_IT+0x260>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_DMA_Abort_IT+0x264>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a28      	ldr	r2, [pc, #160]	; (800376c <HAL_DMA_Abort_IT+0x268>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_DMA_Abort_IT+0x26c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a25      	ldr	r2, [pc, #148]	; (8003774 <HAL_DMA_Abort_IT+0x270>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a23      	ldr	r2, [pc, #140]	; (8003778 <HAL_DMA_Abort_IT+0x274>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a22      	ldr	r2, [pc, #136]	; (800377c <HAL_DMA_Abort_IT+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <HAL_DMA_Abort_IT+0x27c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <HAL_DMA_Abort_IT+0x280>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_DMA_Abort_IT+0x284>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_DMA_Abort_IT+0x288>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <HAL_DMA_Abort_IT+0x28c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_DMA_Abort_IT+0x290>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <HAL_DMA_Abort_IT+0x294>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a16      	ldr	r2, [pc, #88]	; (800379c <HAL_DMA_Abort_IT+0x298>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_Abort_IT+0x24e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_DMA_Abort_IT+0x29c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d128      	bne.n	80037a4 <HAL_DMA_Abort_IT+0x2a0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e027      	b.n	80037b4 <HAL_DMA_Abort_IT+0x2b0>
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5c      	ldr	r2, [pc, #368]	; (800392c <HAL_DMA_Abort_IT+0x428>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d072      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5b      	ldr	r2, [pc, #364]	; (8003930 <HAL_DMA_Abort_IT+0x42c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d06d      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a59      	ldr	r2, [pc, #356]	; (8003934 <HAL_DMA_Abort_IT+0x430>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d068      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_DMA_Abort_IT+0x434>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d063      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_DMA_Abort_IT+0x438>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d05e      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a55      	ldr	r2, [pc, #340]	; (8003940 <HAL_DMA_Abort_IT+0x43c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d059      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_DMA_Abort_IT+0x440>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d054      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_DMA_Abort_IT+0x444>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04f      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a50      	ldr	r2, [pc, #320]	; (800394c <HAL_DMA_Abort_IT+0x448>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <HAL_DMA_Abort_IT+0x44c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_DMA_Abort_IT+0x450>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4c      	ldr	r2, [pc, #304]	; (8003958 <HAL_DMA_Abort_IT+0x454>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_DMA_Abort_IT+0x458>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a49      	ldr	r2, [pc, #292]	; (8003960 <HAL_DMA_Abort_IT+0x45c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a47      	ldr	r2, [pc, #284]	; (8003964 <HAL_DMA_Abort_IT+0x460>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a46      	ldr	r2, [pc, #280]	; (8003968 <HAL_DMA_Abort_IT+0x464>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a44      	ldr	r2, [pc, #272]	; (800396c <HAL_DMA_Abort_IT+0x468>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a43      	ldr	r2, [pc, #268]	; (8003970 <HAL_DMA_Abort_IT+0x46c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a41      	ldr	r2, [pc, #260]	; (8003974 <HAL_DMA_Abort_IT+0x470>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a40      	ldr	r2, [pc, #256]	; (8003978 <HAL_DMA_Abort_IT+0x474>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a3e      	ldr	r2, [pc, #248]	; (800397c <HAL_DMA_Abort_IT+0x478>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_DMA_Abort_IT+0x47c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <HAL_DMA_Abort_IT+0x480>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x3a0>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <HAL_DMA_Abort_IT+0x484>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_DMA_Abort_IT+0x3a4>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_DMA_Abort_IT+0x3a6>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2201      	movs	r2, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
 800396c:	58025408 	.word	0x58025408
 8003970:	5802541c 	.word	0x5802541c
 8003974:	58025430 	.word	0x58025430
 8003978:	58025444 	.word	0x58025444
 800397c:	58025458 	.word	0x58025458
 8003980:	5802546c 	.word	0x5802546c
 8003984:	58025480 	.word	0x58025480
 8003988:	58025494 	.word	0x58025494

0800398c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003998:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <HAL_DMA_IRQHandler+0x1ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a67      	ldr	r2, [pc, #412]	; (8003b3c <HAL_DMA_IRQHandler+0x1b0>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <HAL_DMA_IRQHandler+0x1b4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <HAL_DMA_IRQHandler+0x1b8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <HAL_DMA_IRQHandler+0x1bc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5a      	ldr	r2, [pc, #360]	; (8003b4c <HAL_DMA_IRQHandler+0x1c0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <HAL_DMA_IRQHandler+0x1c4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_DMA_IRQHandler+0x1c8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_DMA_IRQHandler+0x1cc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a54      	ldr	r2, [pc, #336]	; (8003b5c <HAL_DMA_IRQHandler+0x1d0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a53      	ldr	r2, [pc, #332]	; (8003b60 <HAL_DMA_IRQHandler+0x1d4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_DMA_IRQHandler+0x1d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_DMA_IRQHandler+0x1dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <HAL_DMA_IRQHandler+0x1e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4d      	ldr	r2, [pc, #308]	; (8003b70 <HAL_DMA_IRQHandler+0x1e4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	; (8003b74 <HAL_DMA_IRQHandler+0x1e8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_DMA_IRQHandler+0x1ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xd2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a48      	ldr	r2, [pc, #288]	; (8003b7c <HAL_DMA_IRQHandler+0x1f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_DMA_IRQHandler+0xd6>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0xd8>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 842b 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2208      	movs	r2, #8
 8003a74:	409a      	lsls	r2, r3
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a2 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2e      	ldr	r2, [pc, #184]	; (8003b40 <HAL_DMA_IRQHandler+0x1b4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04a      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <HAL_DMA_IRQHandler+0x1b8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <HAL_DMA_IRQHandler+0x1bc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_DMA_IRQHandler+0x1c0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d03b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_DMA_IRQHandler+0x1c4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d036      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a27      	ldr	r2, [pc, #156]	; (8003b54 <HAL_DMA_IRQHandler+0x1c8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <HAL_DMA_IRQHandler+0x1cc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <HAL_DMA_IRQHandler+0x1d0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d027      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_DMA_IRQHandler+0x1d4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_DMA_IRQHandler+0x1d8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_DMA_IRQHandler+0x1dc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_DMA_IRQHandler+0x1e0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_DMA_IRQHandler+0x1e4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_DMA_IRQHandler+0x1e8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_DMA_IRQHandler+0x1ec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x194>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_DMA_IRQHandler+0x1f0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d12f      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x1f4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e02e      	b.n	8003b94 <HAL_DMA_IRQHandler+0x208>
 8003b36:	bf00      	nop
 8003b38:	24000000 	.word	0x24000000
 8003b3c:	1b4e81b5 	.word	0x1b4e81b5
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d015      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0204 	bic.w	r2, r2, #4
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06e      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a69      	ldr	r2, [pc, #420]	; (8003d84 <HAL_DMA_IRQHandler+0x3f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <HAL_DMA_IRQHandler+0x3fc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a66      	ldr	r2, [pc, #408]	; (8003d8c <HAL_DMA_IRQHandler+0x400>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a64      	ldr	r2, [pc, #400]	; (8003d90 <HAL_DMA_IRQHandler+0x404>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a63      	ldr	r2, [pc, #396]	; (8003d94 <HAL_DMA_IRQHandler+0x408>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a61      	ldr	r2, [pc, #388]	; (8003d98 <HAL_DMA_IRQHandler+0x40c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a60      	ldr	r2, [pc, #384]	; (8003d9c <HAL_DMA_IRQHandler+0x410>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5e      	ldr	r2, [pc, #376]	; (8003da0 <HAL_DMA_IRQHandler+0x414>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5d      	ldr	r2, [pc, #372]	; (8003da4 <HAL_DMA_IRQHandler+0x418>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a5b      	ldr	r2, [pc, #364]	; (8003da8 <HAL_DMA_IRQHandler+0x41c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5a      	ldr	r2, [pc, #360]	; (8003dac <HAL_DMA_IRQHandler+0x420>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_DMA_IRQHandler+0x424>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <HAL_DMA_IRQHandler+0x428>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_DMA_IRQHandler+0x42c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a54      	ldr	r2, [pc, #336]	; (8003dbc <HAL_DMA_IRQHandler+0x430>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x2ee>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_DMA_IRQHandler+0x434>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10a      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x304>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e003      	b.n	8003c98 <HAL_DMA_IRQHandler+0x30c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0202 	orr.w	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 808f 	beq.w	8003dec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <HAL_DMA_IRQHandler+0x3f8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04a      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_DMA_IRQHandler+0x3fc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d045      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_DMA_IRQHandler+0x400>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d040      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <HAL_DMA_IRQHandler+0x404>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d03b      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_DMA_IRQHandler+0x408>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d036      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <HAL_DMA_IRQHandler+0x40c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <HAL_DMA_IRQHandler+0x410>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d02c      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_DMA_IRQHandler+0x414>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d027      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <HAL_DMA_IRQHandler+0x418>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_DMA_IRQHandler+0x41c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_DMA_IRQHandler+0x420>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_DMA_IRQHandler+0x424>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_DMA_IRQHandler+0x428>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_DMA_IRQHandler+0x42c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_DMA_IRQHandler+0x430>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x3e2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <HAL_DMA_IRQHandler+0x434>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d12a      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x438>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e023      	b.n	8003dcc <HAL_DMA_IRQHandler+0x440>
 8003d84:	40020010 	.word	0x40020010
 8003d88:	40020028 	.word	0x40020028
 8003d8c:	40020040 	.word	0x40020040
 8003d90:	40020058 	.word	0x40020058
 8003d94:	40020070 	.word	0x40020070
 8003d98:	40020088 	.word	0x40020088
 8003d9c:	400200a0 	.word	0x400200a0
 8003da0:	400200b8 	.word	0x400200b8
 8003da4:	40020410 	.word	0x40020410
 8003da8:	40020428 	.word	0x40020428
 8003dac:	40020440 	.word	0x40020440
 8003db0:	40020458 	.word	0x40020458
 8003db4:	40020470 	.word	0x40020470
 8003db8:	40020488 	.word	0x40020488
 8003dbc:	400204a0 	.word	0x400204a0
 8003dc0:	400204b8 	.word	0x400204b8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2204      	movs	r2, #4
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2210      	movs	r2, #16
 8003df6:	409a      	lsls	r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a6 	beq.w	8003f4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a85      	ldr	r2, [pc, #532]	; (800401c <HAL_DMA_IRQHandler+0x690>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d04a      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a83      	ldr	r2, [pc, #524]	; (8004020 <HAL_DMA_IRQHandler+0x694>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d045      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a82      	ldr	r2, [pc, #520]	; (8004024 <HAL_DMA_IRQHandler+0x698>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d040      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a80      	ldr	r2, [pc, #512]	; (8004028 <HAL_DMA_IRQHandler+0x69c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d03b      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7f      	ldr	r2, [pc, #508]	; (800402c <HAL_DMA_IRQHandler+0x6a0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d036      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a7d      	ldr	r2, [pc, #500]	; (8004030 <HAL_DMA_IRQHandler+0x6a4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d031      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7c      	ldr	r2, [pc, #496]	; (8004034 <HAL_DMA_IRQHandler+0x6a8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d02c      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <HAL_DMA_IRQHandler+0x6ac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d027      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a79      	ldr	r2, [pc, #484]	; (800403c <HAL_DMA_IRQHandler+0x6b0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a77      	ldr	r2, [pc, #476]	; (8004040 <HAL_DMA_IRQHandler+0x6b4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01d      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a76      	ldr	r2, [pc, #472]	; (8004044 <HAL_DMA_IRQHandler+0x6b8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a74      	ldr	r2, [pc, #464]	; (8004048 <HAL_DMA_IRQHandler+0x6bc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a73      	ldr	r2, [pc, #460]	; (800404c <HAL_DMA_IRQHandler+0x6c0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a71      	ldr	r2, [pc, #452]	; (8004050 <HAL_DMA_IRQHandler+0x6c4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a70      	ldr	r2, [pc, #448]	; (8004054 <HAL_DMA_IRQHandler+0x6c8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x516>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_DMA_IRQHandler+0x6cc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x52c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e009      	b.n	8003ecc <HAL_DMA_IRQHandler+0x540>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d03e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2210      	movs	r2, #16
 8003eda:	409a      	lsls	r2, r3
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d108      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d024      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
 8003f0c:	e01f      	b.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e016      	b.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0208 	bic.w	r2, r2, #8
 8003f3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2220      	movs	r2, #32
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8110 	beq.w	8004184 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_DMA_IRQHandler+0x690>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <HAL_DMA_IRQHandler+0x694>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d045      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_DMA_IRQHandler+0x698>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d040      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a28      	ldr	r2, [pc, #160]	; (8004028 <HAL_DMA_IRQHandler+0x69c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d03b      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_DMA_IRQHandler+0x6a0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d036      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <HAL_DMA_IRQHandler+0x6a4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d031      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_DMA_IRQHandler+0x6a8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_DMA_IRQHandler+0x6ac>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d027      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <HAL_DMA_IRQHandler+0x6b0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_DMA_IRQHandler+0x6b4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_DMA_IRQHandler+0x6b8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_DMA_IRQHandler+0x6bc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_DMA_IRQHandler+0x6c0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_DMA_IRQHandler+0x6c4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_DMA_IRQHandler+0x6c8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_DMA_IRQHandler+0x678>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	; (8004058 <HAL_DMA_IRQHandler+0x6cc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d12b      	bne.n	800405c <HAL_DMA_IRQHandler+0x6d0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e02a      	b.n	8004070 <HAL_DMA_IRQHandler+0x6e4>
 800401a:	bf00      	nop
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8087 	beq.w	8004184 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2220      	movs	r2, #32
 8004080:	409a      	lsls	r2, r3
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b04      	cmp	r3, #4
 8004090:	d139      	bne.n	8004106 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0216 	bic.w	r2, r2, #22
 80040a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_DMA_IRQHandler+0x736>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0208 	bic.w	r2, r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	223f      	movs	r2, #63	; 0x3f
 80040dc:	409a      	lsls	r2, r3
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 834a 	beq.w	8004790 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
          }
          return;
 8004104:	e344      	b.n	8004790 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02c      	beq.n	8004184 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e027      	b.n	8004184 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d023      	beq.n	8004184 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
 8004144:	e01e      	b.n	8004184 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0210 	bic.w	r2, r2, #16
 8004162:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8306 	beq.w	800479a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8088 	beq.w	80042ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_DMA_IRQHandler+0xa08>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d04a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a79      	ldr	r2, [pc, #484]	; (8004398 <HAL_DMA_IRQHandler+0xa0c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d045      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a77      	ldr	r2, [pc, #476]	; (800439c <HAL_DMA_IRQHandler+0xa10>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d040      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a76      	ldr	r2, [pc, #472]	; (80043a0 <HAL_DMA_IRQHandler+0xa14>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d03b      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a74      	ldr	r2, [pc, #464]	; (80043a4 <HAL_DMA_IRQHandler+0xa18>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d036      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a73      	ldr	r2, [pc, #460]	; (80043a8 <HAL_DMA_IRQHandler+0xa1c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d031      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a71      	ldr	r2, [pc, #452]	; (80043ac <HAL_DMA_IRQHandler+0xa20>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02c      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a70      	ldr	r2, [pc, #448]	; (80043b0 <HAL_DMA_IRQHandler+0xa24>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d027      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_DMA_IRQHandler+0xa28>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6d      	ldr	r2, [pc, #436]	; (80043b8 <HAL_DMA_IRQHandler+0xa2c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d01d      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6b      	ldr	r2, [pc, #428]	; (80043bc <HAL_DMA_IRQHandler+0xa30>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6a      	ldr	r2, [pc, #424]	; (80043c0 <HAL_DMA_IRQHandler+0xa34>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	; (80043c4 <HAL_DMA_IRQHandler+0xa38>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a67      	ldr	r2, [pc, #412]	; (80043c8 <HAL_DMA_IRQHandler+0xa3c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a65      	ldr	r2, [pc, #404]	; (80043cc <HAL_DMA_IRQHandler+0xa40>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_DMA_IRQHandler+0x8b8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a64      	ldr	r2, [pc, #400]	; (80043d0 <HAL_DMA_IRQHandler+0xa44>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <HAL_DMA_IRQHandler+0x8ca>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e007      	b.n	8004266 <HAL_DMA_IRQHandler+0x8da>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	429a      	cmp	r2, r3
 8004270:	d307      	bcc.n	8004282 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f2      	bne.n	8004266 <HAL_DMA_IRQHandler+0x8da>
 8004280:	e000      	b.n	8004284 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004282:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800429a:	e003      	b.n	80042a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8272 	beq.w	800479a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
 80042be:	e26c      	b.n	800479a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a43      	ldr	r2, [pc, #268]	; (80043d4 <HAL_DMA_IRQHandler+0xa48>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a42      	ldr	r2, [pc, #264]	; (80043d8 <HAL_DMA_IRQHandler+0xa4c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a40      	ldr	r2, [pc, #256]	; (80043dc <HAL_DMA_IRQHandler+0xa50>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3f      	ldr	r2, [pc, #252]	; (80043e0 <HAL_DMA_IRQHandler+0xa54>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3d      	ldr	r2, [pc, #244]	; (80043e4 <HAL_DMA_IRQHandler+0xa58>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <HAL_DMA_IRQHandler+0xa5c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3a      	ldr	r2, [pc, #232]	; (80043ec <HAL_DMA_IRQHandler+0xa60>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_IRQHandler+0x984>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a39      	ldr	r2, [pc, #228]	; (80043f0 <HAL_DMA_IRQHandler+0xa64>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_DMA_IRQHandler+0x988>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_DMA_IRQHandler+0x98a>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 823f 	beq.w	800479a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2204      	movs	r2, #4
 800432e:	409a      	lsls	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80cd 	beq.w	80044d4 <HAL_DMA_IRQHandler+0xb48>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80c7 	beq.w	80044d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2204      	movs	r2, #4
 8004350:	409a      	lsls	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d049      	beq.n	80043f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8210 	beq.w	8004794 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437c:	e20a      	b.n	8004794 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8206 	beq.w	8004794 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004390:	e200      	b.n	8004794 <HAL_DMA_IRQHandler+0xe08>
 8004392:	bf00      	nop
 8004394:	40020010 	.word	0x40020010
 8004398:	40020028 	.word	0x40020028
 800439c:	40020040 	.word	0x40020040
 80043a0:	40020058 	.word	0x40020058
 80043a4:	40020070 	.word	0x40020070
 80043a8:	40020088 	.word	0x40020088
 80043ac:	400200a0 	.word	0x400200a0
 80043b0:	400200b8 	.word	0x400200b8
 80043b4:	40020410 	.word	0x40020410
 80043b8:	40020428 	.word	0x40020428
 80043bc:	40020440 	.word	0x40020440
 80043c0:	40020458 	.word	0x40020458
 80043c4:	40020470 	.word	0x40020470
 80043c8:	40020488 	.word	0x40020488
 80043cc:	400204a0 	.word	0x400204a0
 80043d0:	400204b8 	.word	0x400204b8
 80043d4:	58025408 	.word	0x58025408
 80043d8:	5802541c 	.word	0x5802541c
 80043dc:	58025430 	.word	0x58025430
 80043e0:	58025444 	.word	0x58025444
 80043e4:	58025458 	.word	0x58025458
 80043e8:	5802546c 	.word	0x5802546c
 80043ec:	58025480 	.word	0x58025480
 80043f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d160      	bne.n	80044c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a8c      	ldr	r2, [pc, #560]	; (8004634 <HAL_DMA_IRQHandler+0xca8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04a      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a8a      	ldr	r2, [pc, #552]	; (8004638 <HAL_DMA_IRQHandler+0xcac>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d045      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a89      	ldr	r2, [pc, #548]	; (800463c <HAL_DMA_IRQHandler+0xcb0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a87      	ldr	r2, [pc, #540]	; (8004640 <HAL_DMA_IRQHandler+0xcb4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d03b      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a86      	ldr	r2, [pc, #536]	; (8004644 <HAL_DMA_IRQHandler+0xcb8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d036      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a84      	ldr	r2, [pc, #528]	; (8004648 <HAL_DMA_IRQHandler+0xcbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a83      	ldr	r2, [pc, #524]	; (800464c <HAL_DMA_IRQHandler+0xcc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d02c      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a81      	ldr	r2, [pc, #516]	; (8004650 <HAL_DMA_IRQHandler+0xcc4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d027      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a80      	ldr	r2, [pc, #512]	; (8004654 <HAL_DMA_IRQHandler+0xcc8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_DMA_IRQHandler+0xccc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7d      	ldr	r2, [pc, #500]	; (800465c <HAL_DMA_IRQHandler+0xcd0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a7b      	ldr	r2, [pc, #492]	; (8004660 <HAL_DMA_IRQHandler+0xcd4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7a      	ldr	r2, [pc, #488]	; (8004664 <HAL_DMA_IRQHandler+0xcd8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a78      	ldr	r2, [pc, #480]	; (8004668 <HAL_DMA_IRQHandler+0xcdc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a77      	ldr	r2, [pc, #476]	; (800466c <HAL_DMA_IRQHandler+0xce0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_DMA_IRQHandler+0xb12>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_DMA_IRQHandler+0xce4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xb24>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0208 	bic.w	r2, r2, #8
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <HAL_DMA_IRQHandler+0xb34>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0204 	bic.w	r2, r2, #4
 80044be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8165 	beq.w	8004794 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d2:	e15f      	b.n	8004794 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2202      	movs	r2, #2
 80044de:	409a      	lsls	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80c5 	beq.w	8004674 <HAL_DMA_IRQHandler+0xce8>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80bf 	beq.w	8004674 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2202      	movs	r2, #2
 8004500:	409a      	lsls	r2, r3
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 813a 	beq.w	8004798 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800452c:	e134      	b.n	8004798 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8130 	beq.w	8004798 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004540:	e12a      	b.n	8004798 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d168      	bne.n	800461e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a38      	ldr	r2, [pc, #224]	; (8004634 <HAL_DMA_IRQHandler+0xca8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d04a      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a37      	ldr	r2, [pc, #220]	; (8004638 <HAL_DMA_IRQHandler+0xcac>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d045      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a35      	ldr	r2, [pc, #212]	; (800463c <HAL_DMA_IRQHandler+0xcb0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d040      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a34      	ldr	r2, [pc, #208]	; (8004640 <HAL_DMA_IRQHandler+0xcb4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d03b      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a32      	ldr	r2, [pc, #200]	; (8004644 <HAL_DMA_IRQHandler+0xcb8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d036      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a31      	ldr	r2, [pc, #196]	; (8004648 <HAL_DMA_IRQHandler+0xcbc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d031      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2f      	ldr	r2, [pc, #188]	; (800464c <HAL_DMA_IRQHandler+0xcc0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02c      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <HAL_DMA_IRQHandler+0xcc4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d027      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_DMA_IRQHandler+0xcc8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_DMA_IRQHandler+0xccc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01d      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_DMA_IRQHandler+0xcd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_DMA_IRQHandler+0xcd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a26      	ldr	r2, [pc, #152]	; (8004664 <HAL_DMA_IRQHandler+0xcd8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a25      	ldr	r2, [pc, #148]	; (8004668 <HAL_DMA_IRQHandler+0xcdc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_DMA_IRQHandler+0xce0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_IRQHandler+0xc60>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a22      	ldr	r2, [pc, #136]	; (8004670 <HAL_DMA_IRQHandler+0xce4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d108      	bne.n	80045fe <HAL_DMA_IRQHandler+0xc72>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0214 	bic.w	r2, r2, #20
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <HAL_DMA_IRQHandler+0xc82>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 020a 	bic.w	r2, r2, #10
 800460c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80b8 	beq.w	8004798 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004630:	e0b2      	b.n	8004798 <HAL_DMA_IRQHandler+0xe0c>
 8004632:	bf00      	nop
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2208      	movs	r2, #8
 800467e:	409a      	lsls	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8088 	beq.w	800479a <HAL_DMA_IRQHandler+0xe0e>
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8082 	beq.w	800479a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <HAL_DMA_IRQHandler+0xe14>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d04a      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_DMA_IRQHandler+0xe18>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d045      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_DMA_IRQHandler+0xe1c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d040      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3c      	ldr	r2, [pc, #240]	; (80047ac <HAL_DMA_IRQHandler+0xe20>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d03b      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_DMA_IRQHandler+0xe24>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d036      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a39      	ldr	r2, [pc, #228]	; (80047b4 <HAL_DMA_IRQHandler+0xe28>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d031      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a38      	ldr	r2, [pc, #224]	; (80047b8 <HAL_DMA_IRQHandler+0xe2c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d02c      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a36      	ldr	r2, [pc, #216]	; (80047bc <HAL_DMA_IRQHandler+0xe30>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d027      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a35      	ldr	r2, [pc, #212]	; (80047c0 <HAL_DMA_IRQHandler+0xe34>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a33      	ldr	r2, [pc, #204]	; (80047c4 <HAL_DMA_IRQHandler+0xe38>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a32      	ldr	r2, [pc, #200]	; (80047c8 <HAL_DMA_IRQHandler+0xe3c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a30      	ldr	r2, [pc, #192]	; (80047cc <HAL_DMA_IRQHandler+0xe40>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <HAL_DMA_IRQHandler+0xe44>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2d      	ldr	r2, [pc, #180]	; (80047d4 <HAL_DMA_IRQHandler+0xe48>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <HAL_DMA_IRQHandler+0xe4c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_IRQHandler+0xdaa>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <HAL_DMA_IRQHandler+0xe50>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <HAL_DMA_IRQHandler+0xdbc>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 021c 	bic.w	r2, r2, #28
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e007      	b.n	8004758 <HAL_DMA_IRQHandler+0xdcc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 020e 	bic.w	r2, r2, #14
 8004756:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
 800478e:	e004      	b.n	800479a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004798:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8

080047e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a42      	ldr	r2, [pc, #264]	; (80048f8 <DMA_CalcBaseAndBitshift+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d04a      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a41      	ldr	r2, [pc, #260]	; (80048fc <DMA_CalcBaseAndBitshift+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d045      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <DMA_CalcBaseAndBitshift+0x120>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d040      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3e      	ldr	r2, [pc, #248]	; (8004904 <DMA_CalcBaseAndBitshift+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d03b      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3c      	ldr	r2, [pc, #240]	; (8004908 <DMA_CalcBaseAndBitshift+0x128>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d036      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a3b      	ldr	r2, [pc, #236]	; (800490c <DMA_CalcBaseAndBitshift+0x12c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d031      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a39      	ldr	r2, [pc, #228]	; (8004910 <DMA_CalcBaseAndBitshift+0x130>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02c      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a38      	ldr	r2, [pc, #224]	; (8004914 <DMA_CalcBaseAndBitshift+0x134>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d027      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a36      	ldr	r2, [pc, #216]	; (8004918 <DMA_CalcBaseAndBitshift+0x138>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a35      	ldr	r2, [pc, #212]	; (800491c <DMA_CalcBaseAndBitshift+0x13c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01d      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a33      	ldr	r2, [pc, #204]	; (8004920 <DMA_CalcBaseAndBitshift+0x140>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d018      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a32      	ldr	r2, [pc, #200]	; (8004924 <DMA_CalcBaseAndBitshift+0x144>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a30      	ldr	r2, [pc, #192]	; (8004928 <DMA_CalcBaseAndBitshift+0x148>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2f      	ldr	r2, [pc, #188]	; (800492c <DMA_CalcBaseAndBitshift+0x14c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2d      	ldr	r2, [pc, #180]	; (8004930 <DMA_CalcBaseAndBitshift+0x150>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <DMA_CalcBaseAndBitshift+0xa8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <DMA_CalcBaseAndBitshift+0x154>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <DMA_CalcBaseAndBitshift+0xac>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <DMA_CalcBaseAndBitshift+0xae>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d024      	beq.n	80048dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3b10      	subs	r3, #16
 800489a:	4a27      	ldr	r2, [pc, #156]	; (8004938 <DMA_CalcBaseAndBitshift+0x158>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	4a24      	ldr	r2, [pc, #144]	; (800493c <DMA_CalcBaseAndBitshift+0x15c>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d908      	bls.n	80048cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <DMA_CalcBaseAndBitshift+0x160>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	659a      	str	r2, [r3, #88]	; 0x58
 80048ca:	e00d      	b.n	80048e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <DMA_CalcBaseAndBitshift+0x160>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
 80048da:	e005      	b.n	80048e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8
 8004938:	aaaaaaab 	.word	0xaaaaaaab
 800493c:	0800cb04 	.word	0x0800cb04
 8004940:	fffffc00 	.word	0xfffffc00

08004944 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d120      	bne.n	800499a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	2b03      	cmp	r3, #3
 800495e:	d858      	bhi.n	8004a12 <DMA_CheckFifoParam+0xce>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <DMA_CheckFifoParam+0x24>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	0800498b 	.word	0x0800498b
 8004970:	08004979 	.word	0x08004979
 8004974:	08004a13 	.word	0x08004a13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d048      	beq.n	8004a16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004988:	e045      	b.n	8004a16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004992:	d142      	bne.n	8004a1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004998:	e03f      	b.n	8004a1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a2:	d123      	bne.n	80049ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d838      	bhi.n	8004a1e <DMA_CheckFifoParam+0xda>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <DMA_CheckFifoParam+0x70>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049cb 	.word	0x080049cb
 80049bc:	080049c5 	.word	0x080049c5
 80049c0:	080049dd 	.word	0x080049dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        break;
 80049c8:	e030      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d025      	beq.n	8004a22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049da:	e022      	b.n	8004a22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049e4:	d11f      	bne.n	8004a26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049ea:	e01c      	b.n	8004a26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d902      	bls.n	80049fa <DMA_CheckFifoParam+0xb6>
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d003      	beq.n	8004a00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80049f8:	e018      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
        break;
 80049fe:	e015      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00e      	beq.n	8004a2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a10:	e00b      	b.n	8004a2a <DMA_CheckFifoParam+0xe6>
        break;
 8004a12:	bf00      	nop
 8004a14:	e00a      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        break;
 8004a16:	bf00      	nop
 8004a18:	e008      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e006      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e004      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        break;
 8004a22:	bf00      	nop
 8004a24:	e002      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
        break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <DMA_CheckFifoParam+0xe8>
    break;
 8004a2a:	bf00      	nop
    }
  }

  return status;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop

08004a3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a36      	ldr	r2, [pc, #216]	; (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a35      	ldr	r2, [pc, #212]	; (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a30      	ldr	r2, [pc, #192]	; (8004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01a      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3b08      	subs	r3, #8
 8004aac:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ac8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ad8:	e024      	b.n	8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b10      	subs	r3, #16
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d806      	bhi.n	8004b02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d902      	bls.n	8004b02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3308      	adds	r3, #8
 8004b00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	58025408 	.word	0x58025408
 8004b34:	5802541c 	.word	0x5802541c
 8004b38:	58025430 	.word	0x58025430
 8004b3c:	58025444 	.word	0x58025444
 8004b40:	58025458 	.word	0x58025458
 8004b44:	5802546c 	.word	0x5802546c
 8004b48:	58025480 	.word	0x58025480
 8004b4c:	58025494 	.word	0x58025494
 8004b50:	cccccccd 	.word	0xcccccccd
 8004b54:	16009600 	.word	0x16009600
 8004b58:	58025880 	.word	0x58025880
 8004b5c:	aaaaaaab 	.word	0xaaaaaaab
 8004b60:	400204b8 	.word	0x400204b8
 8004b64:	4002040f 	.word	0x4002040f
 8004b68:	10008200 	.word	0x10008200
 8004b6c:	40020880 	.word	0x40020880

08004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04a      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d847      	bhi.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a22      	ldr	r2, [pc, #136]	; (8004c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004bf8:	671a      	str	r2, [r3, #112]	; 0x70
 8004bfa:	e009      	b.n	8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	2201      	movs	r2, #1
 8004c16:	409a      	lsls	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	58025408 	.word	0x58025408
 8004c2c:	5802541c 	.word	0x5802541c
 8004c30:	58025430 	.word	0x58025430
 8004c34:	58025444 	.word	0x58025444
 8004c38:	58025458 	.word	0x58025458
 8004c3c:	5802546c 	.word	0x5802546c
 8004c40:	58025480 	.word	0x58025480
 8004c44:	58025494 	.word	0x58025494
 8004c48:	1600963f 	.word	0x1600963f
 8004c4c:	58025940 	.word	0x58025940
 8004c50:	1000823f 	.word	0x1000823f
 8004c54:	40020940 	.word	0x40020940

08004c58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0c6      	b.n	8004df8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fd fb1e 	bl	80022b4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2223      	movs	r2, #35	; 0x23
 8004c7c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7e:	4b60      	ldr	r3, [pc, #384]	; (8004e00 <HAL_ETH_Init+0x1a8>)
 8004c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c84:	4a5e      	ldr	r2, [pc, #376]	; (8004e00 <HAL_ETH_Init+0x1a8>)
 8004c86:	f043 0302 	orr.w	r3, r3, #2
 8004c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_ETH_Init+0x1a8>)
 8004c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	7a1b      	ldrb	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fd ffad 	bl	8002c04 <HAL_SYSCFG_ETHInterfaceSelect>
 8004caa:	e003      	b.n	8004cb4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004cac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004cb0:	f7fd ffa8 	bl	8002c04 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ccc:	f7fd ff5e 	bl	8002b8c <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004cd2:	e00f      	b.n	8004cf4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004cd4:	f7fd ff5a 	bl	8002b8c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ce2:	d907      	bls.n	8004cf4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	22e0      	movs	r2, #224	; 0xe0
 8004cee:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e081      	b.n	8004df8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fac0 	bl	800528c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004d0c:	f001 fed8 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <HAL_ETH_Init+0x1ac>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	0c9a      	lsrs	r2, r3, #18
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa13 	bl	8005150 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d44:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	22e0      	movs	r2, #224	; 0xe0
 8004d5c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e04a      	b.n	8004df8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d6a:	4413      	add	r3, r2
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <HAL_ETH_Init+0x1b0>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6952      	ldr	r2, [r2, #20]
 8004d76:	0052      	lsls	r2, r2, #1
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	6809      	ldr	r1, [r1, #0]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d82:	440b      	add	r3, r1
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fad8 	bl	800533c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb1c 	bl	80053ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	3305      	adds	r3, #5
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	061a      	lsls	r2, r3, #24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004dd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004dde:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004de0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2210      	movs	r2, #16
 8004dee:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2210      	movs	r2, #16
 8004df4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024400 	.word	0x58024400
 8004e04:	431bde83 	.word	0x431bde83
 8004e08:	ffff8001 	.word	0xffff8001

08004e0c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004e1e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004e26:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	7b1b      	ldrb	r3, [r3, #12]
 8004e2c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e2e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	7b5b      	ldrb	r3, [r3, #13]
 8004e34:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e36:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	7b9b      	ldrb	r3, [r3, #14]
 8004e3c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	7bdb      	ldrb	r3, [r3, #15]
 8004e44:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e46:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	7c12      	ldrb	r2, [r2, #16]
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d102      	bne.n	8004e56 <ETH_SetMACConfig+0x4a>
 8004e50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e54:	e000      	b.n	8004e58 <ETH_SetMACConfig+0x4c>
 8004e56:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e58:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	7c52      	ldrb	r2, [r2, #17]
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d102      	bne.n	8004e68 <ETH_SetMACConfig+0x5c>
 8004e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e66:	e000      	b.n	8004e6a <ETH_SetMACConfig+0x5e>
 8004e68:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e6a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	7c9b      	ldrb	r3, [r3, #18]
 8004e70:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e72:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e78:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004e7e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	7f1b      	ldrb	r3, [r3, #28]
 8004e84:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004e86:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	7f5b      	ldrb	r3, [r3, #29]
 8004e8c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e8e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	7f92      	ldrb	r2, [r2, #30]
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d102      	bne.n	8004e9e <ETH_SetMACConfig+0x92>
 8004e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e9c:	e000      	b.n	8004ea0 <ETH_SetMACConfig+0x94>
 8004e9e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004ea0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	7fdb      	ldrb	r3, [r3, #31]
 8004ea6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ea8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d102      	bne.n	8004eba <ETH_SetMACConfig+0xae>
 8004eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eb8:	e000      	b.n	8004ebc <ETH_SetMACConfig+0xb0>
 8004eba:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ebc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ec2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eca:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004ecc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4b56      	ldr	r3, [pc, #344]	; (8005038 <ETH_SetMACConfig+0x22c>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ef6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ef8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f02:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f0a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004f0c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d102      	bne.n	8004f1e <ETH_SetMACConfig+0x112>
 8004f18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f1c:	e000      	b.n	8004f20 <ETH_SetMACConfig+0x114>
 8004f1e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f20:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b42      	ldr	r3, [pc, #264]	; (800503c <ETH_SetMACConfig+0x230>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	4b3a      	ldr	r3, [pc, #232]	; (8005040 <ETH_SetMACConfig+0x234>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	68f9      	ldr	r1, [r7, #12]
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f6e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d101      	bne.n	8004f7e <ETH_SetMACConfig+0x172>
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	e000      	b.n	8004f80 <ETH_SetMACConfig+0x174>
 8004f7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004f80:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f92:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	68f9      	ldr	r1, [r7, #12]
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004fa8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004fb0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f023 0103 	bic.w	r1, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004fd6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004ff2:	2a00      	cmp	r2, #0
 8004ff4:	d101      	bne.n	8004ffa <ETH_SetMACConfig+0x1ee>
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	e000      	b.n	8004ffc <ETH_SetMACConfig+0x1f0>
 8004ffa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004ffc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005004:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005006:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800500e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800501c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	430a      	orrs	r2, r1
 8005028:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	00048083 	.word	0x00048083
 800503c:	c0f88000 	.word	0xc0f88000
 8005040:	fffffef0 	.word	0xfffffef0

08005044 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b38      	ldr	r3, [pc, #224]	; (800513c <ETH_SetDMAConfig+0xf8>)
 800505a:	4013      	ands	r3, r2
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	6809      	ldr	r1, [r1, #0]
 8005064:	431a      	orrs	r2, r3
 8005066:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800506a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	791b      	ldrb	r3, [r3, #4]
 8005070:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005076:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	7b1b      	ldrb	r3, [r3, #12]
 800507c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	f241 0304 	movw	r3, #4100	; 0x1004
 800508a:	4413      	add	r3, r2
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <ETH_SetDMAConfig+0xfc>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	431a      	orrs	r2, r3
 800509a:	f241 0304 	movw	r3, #4100	; 0x1004
 800509e:	440b      	add	r3, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	7b5b      	ldrb	r3, [r3, #13]
 80050a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <ETH_SetDMAConfig+0x100>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6811      	ldr	r1, [r2, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80050ca:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	7d1b      	ldrb	r3, [r3, #20]
 80050d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80050d6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	7f5b      	ldrb	r3, [r3, #29]
 80050dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f241 1304 	movw	r3, #4356	; 0x1104
 80050ea:	4413      	add	r3, r2
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <ETH_SetDMAConfig+0x104>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80050fe:	440b      	add	r3, r1
 8005100:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	7f1b      	ldrb	r3, [r3, #28]
 8005106:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	f241 1308 	movw	r3, #4360	; 0x1108
 8005118:	4413      	add	r3, r2
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <ETH_SetDMAConfig+0x108>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6811      	ldr	r1, [r2, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	431a      	orrs	r2, r3
 8005128:	f241 1308 	movw	r3, #4360	; 0x1108
 800512c:	440b      	add	r3, r1
 800512e:	601a      	str	r2, [r3, #0]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	ffff87fd 	.word	0xffff87fd
 8005140:	ffff2ffe 	.word	0xffff2ffe
 8005144:	fffec000 	.word	0xfffec000
 8005148:	ffc0efef 	.word	0xffc0efef
 800514c:	7fc0ffff 	.word	0x7fc0ffff

08005150 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b0a4      	sub	sp, #144	; 0x90
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800515e:	2300      	movs	r3, #0
 8005160:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800518c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005198:	2300      	movs	r3, #0
 800519a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80051a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80051ac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80051b4:	2300      	movs	r3, #0
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80051ca:	2300      	movs	r3, #0
 80051cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051d2:	2300      	movs	r3, #0
 80051d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80051e8:	2320      	movs	r3, #32
 80051ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80051fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005204:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800520c:	2302      	movs	r3, #2
 800520e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005212:	2300      	movs	r3, #0
 8005214:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800522a:	2300      	movs	r3, #0
 800522c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fde6 	bl	8004e0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005240:	2301      	movs	r3, #1
 8005242:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005244:	2301      	movs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005252:	2300      	movs	r3, #0
 8005254:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005256:	2300      	movs	r3, #0
 8005258:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800525a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800525e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005268:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005270:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fee1 	bl	8005044 <ETH_SetDMAConfig>
}
 8005282:	bf00      	nop
 8005284:	3790      	adds	r7, #144	; 0x90
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800529c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052a6:	f001 fc0b 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 80052aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d908      	bls.n	80052c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d804      	bhi.n	80052c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e027      	b.n	8005316 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d908      	bls.n	80052e0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a17      	ldr	r2, [pc, #92]	; (8005330 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d204      	bcs.n	80052e0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e01a      	b.n	8005316 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d303      	bcc.n	80052f0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d911      	bls.n	8005314 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d908      	bls.n	800530a <ETH_MAC_MDIO_ClkConfig+0x7e>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d804      	bhi.n	800530a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e005      	b.n	8005316 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e000      	b.n	8005316 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005314:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	01312cff 	.word	0x01312cff
 800532c:	02160ebf 	.word	0x02160ebf
 8005330:	03938700 	.word	0x03938700
 8005334:	05f5e0ff 	.word	0x05f5e0ff
 8005338:	08f0d17f 	.word	0x08f0d17f

0800533c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e01d      	b.n	8005386 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68d9      	ldr	r1, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	440b      	add	r3, r1
 800535a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	3206      	adds	r2, #6
 800537c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d9de      	bls.n	800534a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	f241 132c 	movw	r3, #4396	; 0x112c
 800539a:	4413      	add	r3, r2
 800539c:	2203      	movs	r2, #3
 800539e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68d9      	ldr	r1, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	f241 1314 	movw	r3, #4372	; 0x1114
 80053ac:	4413      	add	r3, r2
 80053ae:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e024      	b.n	8005422 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6919      	ldr	r1, [r3, #16]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3310      	adds	r3, #16
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d9d7      	bls.n	80053d8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	f241 1330 	movw	r3, #4400	; 0x1130
 800544e:	4413      	add	r3, r2
 8005450:	2203      	movs	r2, #3
 8005452:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6919      	ldr	r1, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f241 131c 	movw	r3, #4380	; 0x111c
 8005460:	4413      	add	r3, r2
 8005462:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	f241 1328 	movw	r3, #4392	; 0x1128
 8005474:	4413      	add	r3, r2
 8005476:	6019      	str	r1, [r3, #0]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005492:	4b89      	ldr	r3, [pc, #548]	; (80056b8 <HAL_GPIO_Init+0x234>)
 8005494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005496:	e194      	b.n	80057c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8186 	beq.w	80057bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d005      	beq.n	80054c8 <HAL_GPIO_Init+0x44>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d130      	bne.n	800552a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2203      	movs	r2, #3
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054fe:	2201      	movs	r2, #1
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 0201 	and.w	r2, r3, #1
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d017      	beq.n	8005566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	2203      	movs	r2, #3
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d123      	bne.n	80055ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	08da      	lsrs	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3208      	adds	r2, #8
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	220f      	movs	r2, #15
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	08da      	lsrs	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3208      	adds	r2, #8
 80055b4:	69b9      	ldr	r1, [r7, #24]
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	2203      	movs	r2, #3
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0203 	and.w	r2, r3, #3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80e0 	beq.w	80057bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fc:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_GPIO_Init+0x238>)
 80055fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005602:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <HAL_GPIO_Init+0x238>)
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_GPIO_Init+0x238>)
 800560e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800561a:	4a29      	ldr	r2, [pc, #164]	; (80056c0 <HAL_GPIO_Init+0x23c>)
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	3302      	adds	r3, #2
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <HAL_GPIO_Init+0x240>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d052      	beq.n	80056ec <HAL_GPIO_Init+0x268>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <HAL_GPIO_Init+0x244>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d031      	beq.n	80056b2 <HAL_GPIO_Init+0x22e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_GPIO_Init+0x248>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02b      	beq.n	80056ae <HAL_GPIO_Init+0x22a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <HAL_GPIO_Init+0x24c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d025      	beq.n	80056aa <HAL_GPIO_Init+0x226>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <HAL_GPIO_Init+0x250>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01f      	beq.n	80056a6 <HAL_GPIO_Init+0x222>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <HAL_GPIO_Init+0x254>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d019      	beq.n	80056a2 <HAL_GPIO_Init+0x21e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_GPIO_Init+0x258>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_GPIO_Init+0x21a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <HAL_GPIO_Init+0x25c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00d      	beq.n	800569a <HAL_GPIO_Init+0x216>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_GPIO_Init+0x260>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <HAL_GPIO_Init+0x212>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_GPIO_Init+0x264>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_GPIO_Init+0x20e>
 800568e:	2309      	movs	r3, #9
 8005690:	e02d      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 8005692:	230a      	movs	r3, #10
 8005694:	e02b      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 8005696:	2308      	movs	r3, #8
 8005698:	e029      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 800569a:	2307      	movs	r3, #7
 800569c:	e027      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 800569e:	2306      	movs	r3, #6
 80056a0:	e025      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056a2:	2305      	movs	r3, #5
 80056a4:	e023      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e021      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056aa:	2303      	movs	r3, #3
 80056ac:	e01f      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e01d      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01b      	b.n	80056ee <HAL_GPIO_Init+0x26a>
 80056b6:	bf00      	nop
 80056b8:	58000080 	.word	0x58000080
 80056bc:	58024400 	.word	0x58024400
 80056c0:	58000400 	.word	0x58000400
 80056c4:	58020000 	.word	0x58020000
 80056c8:	58020400 	.word	0x58020400
 80056cc:	58020800 	.word	0x58020800
 80056d0:	58020c00 	.word	0x58020c00
 80056d4:	58021000 	.word	0x58021000
 80056d8:	58021400 	.word	0x58021400
 80056dc:	58021800 	.word	0x58021800
 80056e0:	58021c00 	.word	0x58021c00
 80056e4:	58022000 	.word	0x58022000
 80056e8:	58022400 	.word	0x58022400
 80056ec:	2300      	movs	r3, #0
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	f002 0203 	and.w	r2, r2, #3
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4093      	lsls	r3, r2
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056fe:	4938      	ldr	r1, [pc, #224]	; (80057e0 <HAL_GPIO_Init+0x35c>)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	3302      	adds	r3, #2
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f47f ae63 	bne.w	8005498 <HAL_GPIO_Init+0x14>
  }
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	3724      	adds	r7, #36	; 0x24
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	58000400 	.word	0x58000400

080057e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	e001      	b.n	8005806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
 8005820:	4613      	mov	r3, r2
 8005822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005824:	787b      	ldrb	r3, [r7, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005830:	e003      	b.n	800583a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	619a      	str	r2, [r3, #24]
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <HAL_HSEM_FastTake+0x2c>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3320      	adds	r3, #32
 8005856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585a:	4a07      	ldr	r2, [pc, #28]	; (8005878 <HAL_HSEM_FastTake+0x30>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	58026400 	.word	0x58026400
 8005878:	80000300 	.word	0x80000300

0800587c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <HAL_HSEM_Release+0x24>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	58026400 	.word	0x58026400

080058a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	b08f      	sub	sp, #60	; 0x3c
 80058a8:	af0a      	add	r7, sp, #40	; 0x28
 80058aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e116      	b.n	8005ae4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fc ffc7 	bl	8002864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f005 f859 	bl	800a9ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	687e      	ldr	r6, [r7, #4]
 8005902:	466d      	mov	r5, sp
 8005904:	f106 0410 	add.w	r4, r6, #16
 8005908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800590a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800590e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005914:	e885 0003 	stmia.w	r5, {r0, r1}
 8005918:	1d33      	adds	r3, r6, #4
 800591a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800591c:	6838      	ldr	r0, [r7, #0]
 800591e:	f004 ffd7 	bl	800a8d0 <USB_CoreInit>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0d7      	b.n	8005ae4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f005 f847 	bl	800a9ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	e04a      	b.n	80059dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	333d      	adds	r3, #61	; 0x3d
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	333c      	adds	r3, #60	; 0x3c
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	b298      	uxth	r0, r3
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3342      	adds	r3, #66	; 0x42
 8005982:	4602      	mov	r2, r0
 8005984:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	333f      	adds	r3, #63	; 0x3f
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800599a:	7bfa      	ldrb	r2, [r7, #15]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3344      	adds	r3, #68	; 0x44
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3348      	adds	r3, #72	; 0x48
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	3350      	adds	r3, #80	; 0x50
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	3301      	adds	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	7bfa      	ldrb	r2, [r7, #15]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d3af      	bcc.n	8005946 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
 80059ea:	e044      	b.n	8005a76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a18:	7bfa      	ldrb	r2, [r7, #15]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a44:	7bfa      	ldrb	r2, [r7, #15]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	3301      	adds	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b5      	bcc.n	80059ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	687e      	ldr	r6, [r7, #4]
 8005a88:	466d      	mov	r5, sp
 8005a8a:	f106 0410 	add.w	r4, r6, #16
 8005a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a9e:	1d33      	adds	r3, r6, #4
 8005aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aa2:	6838      	ldr	r0, [r7, #0]
 8005aa4:	f004 ffe0 	bl	800aa68 <USB_DevInit>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e014      	b.n	8005ae4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d102      	bne.n	8005ad8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f80a 	bl	8005aec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f005 f99a 	bl	800ae16 <USB_DevDisconnect>

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	10000003 	.word	0x10000003

08005b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b3c:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d00a      	beq.n	8005b5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b48:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d001      	beq.n	8005b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e040      	b.n	8005bdc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e03e      	b.n	8005bdc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b5e:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b66:	491f      	ldr	r1, [pc, #124]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b6e:	f7fd f80d 	bl	8002b8c <HAL_GetTick>
 8005b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b74:	e009      	b.n	8005b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b76:	f7fd f809 	bl	8002b8c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b84:	d901      	bls.n	8005b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e028      	b.n	8005bdc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b8a:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	d1ee      	bne.n	8005b76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b1e      	cmp	r3, #30
 8005b9c:	d008      	beq.n	8005bb0 <HAL_PWREx_ConfigSupply+0x7c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba2:	d005      	beq.n	8005bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b1d      	cmp	r3, #29
 8005ba8:	d002      	beq.n	8005bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b2d      	cmp	r3, #45	; 0x2d
 8005bae:	d114      	bne.n	8005bda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005bb0:	f7fc ffec 	bl	8002b8c <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bb6:	e009      	b.n	8005bcc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bb8:	f7fc ffe8 	bl	8002b8c <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc6:	d901      	bls.n	8005bcc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e007      	b.n	8005bdc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024800 	.word	0x58024800

08005be8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	60d3      	str	r3, [r2, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	58024800 	.word	0x58024800

08005c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	; 0x30
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f000 bc1c 	b.w	8006454 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8087 	beq.w	8005d38 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c2a:	4b9e      	ldr	r3, [pc, #632]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c34:	4b9b      	ldr	r3, [pc, #620]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d007      	beq.n	8005c50 <HAL_RCC_OscConfig+0x48>
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	2b18      	cmp	r3, #24
 8005c44:	d110      	bne.n	8005c68 <HAL_RCC_OscConfig+0x60>
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	4b94      	ldr	r3, [pc, #592]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d06c      	beq.n	8005d36 <HAL_RCC_OscConfig+0x12e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d168      	bne.n	8005d36 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e3f5      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d106      	bne.n	8005c80 <HAL_RCC_OscConfig+0x78>
 8005c72:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a8b      	ldr	r2, [pc, #556]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e02e      	b.n	8005cde <HAL_RCC_OscConfig+0xd6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10c      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x9a>
 8005c88:	4b86      	ldr	r3, [pc, #536]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a85      	ldr	r2, [pc, #532]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a82      	ldr	r2, [pc, #520]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e01d      	b.n	8005cde <HAL_RCC_OscConfig+0xd6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005caa:	d10c      	bne.n	8005cc6 <HAL_RCC_OscConfig+0xbe>
 8005cac:	4b7d      	ldr	r3, [pc, #500]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7c      	ldr	r2, [pc, #496]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b7a      	ldr	r3, [pc, #488]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a79      	ldr	r2, [pc, #484]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e00b      	b.n	8005cde <HAL_RCC_OscConfig+0xd6>
 8005cc6:	4b77      	ldr	r3, [pc, #476]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a76      	ldr	r2, [pc, #472]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b74      	ldr	r3, [pc, #464]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a73      	ldr	r2, [pc, #460]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc ff51 	bl	8002b8c <HAL_GetTick>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cee:	f7fc ff4d 	bl	8002b8c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e3a9      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d00:	4b68      	ldr	r3, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0xe6>
 8005d0c:	e014      	b.n	8005d38 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fc ff3d 	bl	8002b8c <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d16:	f7fc ff39 	bl	8002b8c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b64      	cmp	r3, #100	; 0x64
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e395      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d28:	4b5e      	ldr	r3, [pc, #376]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f0      	bne.n	8005d16 <HAL_RCC_OscConfig+0x10e>
 8005d34:	e000      	b.n	8005d38 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80ca 	beq.w	8005eda <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d46:	4b57      	ldr	r3, [pc, #348]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d4e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d50:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_RCC_OscConfig+0x164>
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2b18      	cmp	r3, #24
 8005d60:	d156      	bne.n	8005e10 <HAL_RCC_OscConfig+0x208>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d151      	bne.n	8005e10 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_OscConfig+0x17c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e367      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d84:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f023 0219 	bic.w	r2, r3, #25
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4944      	ldr	r1, [pc, #272]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d96:	f7fc fef9 	bl	8002b8c <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fc fef5 	bl	8002b8c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e351      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db0:	4b3c      	ldr	r3, [pc, #240]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	f7fc ff16 	bl	8002bec <HAL_GetREVID>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d817      	bhi.n	8005dfa <HAL_RCC_OscConfig+0x1f2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCC_OscConfig+0x1dc>
 8005dd2:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005dda:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de2:	e07a      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de4:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	492c      	ldr	r1, [pc, #176]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df8:	e06f      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b2a      	ldr	r3, [pc, #168]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	061b      	lsls	r3, r3, #24
 8005e08:	4926      	ldr	r1, [pc, #152]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e0e:	e064      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d047      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 0219 	bic.w	r2, r3, #25
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	491f      	ldr	r1, [pc, #124]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fc feaf 	bl	8002b8c <HAL_GetTick>
 8005e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e32:	f7fc feab 	bl	8002b8c <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e307      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e44:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e50:	f7fc fecc 	bl	8002bec <HAL_GetREVID>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d817      	bhi.n	8005e8e <HAL_RCC_OscConfig+0x286>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d108      	bne.n	8005e78 <HAL_RCC_OscConfig+0x270>
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	6053      	str	r3, [r2, #4]
 8005e76:	e030      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	031b      	lsls	r3, r3, #12
 8005e86:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	604b      	str	r3, [r1, #4]
 8005e8c:	e025      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	061b      	lsls	r3, r3, #24
 8005e9c:	4901      	ldr	r1, [pc, #4]	; (8005ea4 <HAL_RCC_OscConfig+0x29c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	604b      	str	r3, [r1, #4]
 8005ea2:	e01a      	b.n	8005eda <HAL_RCC_OscConfig+0x2d2>
 8005ea4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea8:	4b9e      	ldr	r3, [pc, #632]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a9d      	ldr	r2, [pc, #628]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fc fe6a 	bl	8002b8c <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ebc:	f7fc fe66 	bl	8002b8c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e2c2      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ece:	4b95      	ldr	r3, [pc, #596]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a9 	beq.w	800603a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee8:	4b8e      	ldr	r3, [pc, #568]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef2:	4b8c      	ldr	r3, [pc, #560]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d007      	beq.n	8005f0e <HAL_RCC_OscConfig+0x306>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b18      	cmp	r3, #24
 8005f02:	d13a      	bne.n	8005f7a <HAL_RCC_OscConfig+0x372>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d135      	bne.n	8005f7a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f0e:	4b85      	ldr	r3, [pc, #532]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_RCC_OscConfig+0x31e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d001      	beq.n	8005f26 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e296      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f26:	f7fc fe61 	bl	8002bec <HAL_GetREVID>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d817      	bhi.n	8005f64 <HAL_RCC_OscConfig+0x35c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d108      	bne.n	8005f4e <HAL_RCC_OscConfig+0x346>
 8005f3c:	4b79      	ldr	r3, [pc, #484]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f44:	4a77      	ldr	r2, [pc, #476]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f4a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f4c:	e075      	b.n	800603a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f4e:	4b75      	ldr	r3, [pc, #468]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	069b      	lsls	r3, r3, #26
 8005f5c:	4971      	ldr	r1, [pc, #452]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f62:	e06a      	b.n	800603a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f64:	4b6f      	ldr	r3, [pc, #444]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	496c      	ldr	r1, [pc, #432]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f78:	e05f      	b.n	800603a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d042      	beq.n	8006008 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f82:	4b68      	ldr	r3, [pc, #416]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a67      	ldr	r2, [pc, #412]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fc fdfd 	bl	8002b8c <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f96:	f7fc fdf9 	bl	8002b8c <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e255      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fa8:	4b5e      	ldr	r3, [pc, #376]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fb4:	f7fc fe1a 	bl	8002bec <HAL_GetREVID>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d817      	bhi.n	8005ff2 <HAL_RCC_OscConfig+0x3ea>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d108      	bne.n	8005fdc <HAL_RCC_OscConfig+0x3d4>
 8005fca:	4b56      	ldr	r3, [pc, #344]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fd2:	4a54      	ldr	r2, [pc, #336]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd8:	6053      	str	r3, [r2, #4]
 8005fda:	e02e      	b.n	800603a <HAL_RCC_OscConfig+0x432>
 8005fdc:	4b51      	ldr	r3, [pc, #324]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	069b      	lsls	r3, r3, #26
 8005fea:	494e      	ldr	r1, [pc, #312]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]
 8005ff0:	e023      	b.n	800603a <HAL_RCC_OscConfig+0x432>
 8005ff2:	4b4c      	ldr	r3, [pc, #304]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	061b      	lsls	r3, r3, #24
 8006000:	4948      	ldr	r1, [pc, #288]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	60cb      	str	r3, [r1, #12]
 8006006:	e018      	b.n	800603a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006008:	4b46      	ldr	r3, [pc, #280]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a45      	ldr	r2, [pc, #276]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 800600e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fc fdba 	bl	8002b8c <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800601c:	f7fc fdb6 	bl	8002b8c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e212      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800602e:	4b3d      	ldr	r3, [pc, #244]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d036      	beq.n	80060b4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d019      	beq.n	8006082 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604e:	4b35      	ldr	r3, [pc, #212]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006052:	4a34      	ldr	r2, [pc, #208]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605a:	f7fc fd97 	bl	8002b8c <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006062:	f7fc fd93 	bl	8002b8c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e1ef      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x45a>
 8006080:	e018      	b.n	80060b4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006082:	4b28      	ldr	r3, [pc, #160]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006086:	4a27      	ldr	r2, [pc, #156]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608e:	f7fc fd7d 	bl	8002b8c <HAL_GetTick>
 8006092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006096:	f7fc fd79 	bl	8002b8c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e1d5      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 80060aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f0      	bne.n	8006096 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d039      	beq.n	8006134 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 80060ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060d4:	f7fc fd5a 	bl	8002b8c <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060dc:	f7fc fd56 	bl	8002b8c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1b2      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x4d4>
 80060fa:	e01b      	b.n	8006134 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <HAL_RCC_OscConfig+0x51c>)
 8006102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006106:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006108:	f7fc fd40 	bl	8002b8c <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800610e:	e00b      	b.n	8006128 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006110:	f7fc fd3c 	bl	8002b8c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d904      	bls.n	8006128 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e198      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006128:	4ba3      	ldr	r3, [pc, #652]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ed      	bne.n	8006110 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8081 	beq.w	8006244 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006142:	4b9e      	ldr	r3, [pc, #632]	; (80063bc <HAL_RCC_OscConfig+0x7b4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a9d      	ldr	r2, [pc, #628]	; (80063bc <HAL_RCC_OscConfig+0x7b4>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800614e:	f7fc fd1d 	bl	8002b8c <HAL_GetTick>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fc fd19 	bl	8002b8c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b64      	cmp	r3, #100	; 0x64
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e175      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006168:	4b94      	ldr	r3, [pc, #592]	; (80063bc <HAL_RCC_OscConfig+0x7b4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d106      	bne.n	800618a <HAL_RCC_OscConfig+0x582>
 800617c:	4b8e      	ldr	r3, [pc, #568]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a8d      	ldr	r2, [pc, #564]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
 8006188:	e02d      	b.n	80061e6 <HAL_RCC_OscConfig+0x5de>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10c      	bne.n	80061ac <HAL_RCC_OscConfig+0x5a4>
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a88      	ldr	r2, [pc, #544]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
 800619e:	4b86      	ldr	r3, [pc, #536]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a85      	ldr	r2, [pc, #532]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
 80061aa:	e01c      	b.n	80061e6 <HAL_RCC_OscConfig+0x5de>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d10c      	bne.n	80061ce <HAL_RCC_OscConfig+0x5c6>
 80061b4:	4b80      	ldr	r3, [pc, #512]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b8:	4a7f      	ldr	r2, [pc, #508]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061ba:	f043 0304 	orr.w	r3, r3, #4
 80061be:	6713      	str	r3, [r2, #112]	; 0x70
 80061c0:	4b7d      	ldr	r3, [pc, #500]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	4a7c      	ldr	r2, [pc, #496]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	6713      	str	r3, [r2, #112]	; 0x70
 80061cc:	e00b      	b.n	80061e6 <HAL_RCC_OscConfig+0x5de>
 80061ce:	4b7a      	ldr	r3, [pc, #488]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	4a79      	ldr	r2, [pc, #484]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	6713      	str	r3, [r2, #112]	; 0x70
 80061da:	4b77      	ldr	r3, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	4a76      	ldr	r2, [pc, #472]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80061e0:	f023 0304 	bic.w	r3, r3, #4
 80061e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d015      	beq.n	800621a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fc fccd 	bl	8002b8c <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f4:	e00a      	b.n	800620c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fc fcc9 	bl	8002b8c <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e123      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800620c:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ee      	beq.n	80061f6 <HAL_RCC_OscConfig+0x5ee>
 8006218:	e014      	b.n	8006244 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621a:	f7fc fcb7 	bl	8002b8c <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006220:	e00a      	b.n	8006238 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fc fcb3 	bl	8002b8c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10d      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006238:	4b5f      	ldr	r3, [pc, #380]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1ee      	bne.n	8006222 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8102 	beq.w	8006452 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800624e:	4b5a      	ldr	r3, [pc, #360]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006256:	2b18      	cmp	r3, #24
 8006258:	f000 80bd 	beq.w	80063d6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b02      	cmp	r3, #2
 8006262:	f040 8095 	bne.w	8006390 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b54      	ldr	r3, [pc, #336]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a53      	ldr	r2, [pc, #332]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800626c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006272:	f7fc fc8b 	bl	8002b8c <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800627a:	f7fc fc87 	bl	8002b8c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0e3      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800628c:	4b4a      	ldr	r3, [pc, #296]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006298:	4b47      	ldr	r3, [pc, #284]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800629a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629c:	4b48      	ldr	r3, [pc, #288]	; (80063c0 <HAL_RCC_OscConfig+0x7b8>)
 800629e:	4013      	ands	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062a8:	0112      	lsls	r2, r2, #4
 80062aa:	430a      	orrs	r2, r1
 80062ac:	4942      	ldr	r1, [pc, #264]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	628b      	str	r3, [r1, #40]	; 0x28
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	3b01      	subs	r3, #1
 80062b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	3b01      	subs	r3, #1
 80062c2:	025b      	lsls	r3, r3, #9
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	3b01      	subs	r3, #1
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	3b01      	subs	r3, #1
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062e2:	4935      	ldr	r1, [pc, #212]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062e8:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a32      	ldr	r2, [pc, #200]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062f4:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 80062f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f8:	4b32      	ldr	r3, [pc, #200]	; (80063c4 <HAL_RCC_OscConfig+0x7bc>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006300:	00d2      	lsls	r2, r2, #3
 8006302:	492d      	ldr	r1, [pc, #180]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006304:	4313      	orrs	r3, r2
 8006306:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	f023 020c 	bic.w	r2, r3, #12
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	4928      	ldr	r1, [pc, #160]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800631a:	4b27      	ldr	r3, [pc, #156]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	f023 0202 	bic.w	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	4924      	ldr	r1, [pc, #144]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800632c:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006344:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800634a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800635c:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fc fc10 	bl	8002b8c <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006370:	f7fc fc0c 	bl	8002b8c <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e068      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006382:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x768>
 800638e:	e060      	b.n	8006452 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a08      	ldr	r2, [pc, #32]	; (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fc fbf6 	bl	8002b8c <HAL_GetTick>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063a2:	e011      	b.n	80063c8 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fc fbf2 	bl	8002b8c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d90a      	bls.n	80063c8 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e04e      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	58024800 	.word	0x58024800
 80063c0:	fffffc0c 	.word	0xfffffc0c
 80063c4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RCC_OscConfig+0x854>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e7      	bne.n	80063a4 <HAL_RCC_OscConfig+0x79c>
 80063d4:	e03d      	b.n	8006452 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <HAL_RCC_OscConfig+0x854>)
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063dc:	4b1f      	ldr	r3, [pc, #124]	; (800645c <HAL_RCC_OscConfig+0x854>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d031      	beq.n	800644e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f003 0203 	and.w	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d12a      	bne.n	800644e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d122      	bne.n	800644e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006414:	429a      	cmp	r2, r3
 8006416:	d11a      	bne.n	800644e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	0a5b      	lsrs	r3, r3, #9
 800641c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d111      	bne.n	800644e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d108      	bne.n	800644e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	0e1b      	lsrs	r3, r3, #24
 8006440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d001      	beq.n	8006452 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3730      	adds	r7, #48	; 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	58024400 	.word	0x58024400

08006460 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e19c      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b8a      	ldr	r3, [pc, #552]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d910      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b87      	ldr	r3, [pc, #540]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 020f 	bic.w	r2, r3, #15
 800648a:	4985      	ldr	r1, [pc, #532]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b83      	ldr	r3, [pc, #524]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e184      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	4b7b      	ldr	r3, [pc, #492]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064bc:	429a      	cmp	r2, r3
 80064be:	d908      	bls.n	80064d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064c0:	4b78      	ldr	r3, [pc, #480]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	4975      	ldr	r1, [pc, #468]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695a      	ldr	r2, [r3, #20]
 80064e2:	4b70      	ldr	r3, [pc, #448]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d908      	bls.n	8006500 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ee:	4b6d      	ldr	r3, [pc, #436]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	496a      	ldr	r1, [pc, #424]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d010      	beq.n	800652e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	4b64      	ldr	r3, [pc, #400]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006518:	429a      	cmp	r2, r3
 800651a:	d908      	bls.n	800652e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800651c:	4b61      	ldr	r3, [pc, #388]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	495e      	ldr	r1, [pc, #376]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800652a:	4313      	orrs	r3, r2
 800652c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006546:	429a      	cmp	r2, r3
 8006548:	d908      	bls.n	800655c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800654a:	4b56      	ldr	r3, [pc, #344]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4953      	ldr	r1, [pc, #332]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006558:	4313      	orrs	r3, r2
 800655a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	4b4d      	ldr	r3, [pc, #308]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	429a      	cmp	r2, r3
 8006576:	d908      	bls.n	800658a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006578:	4b4a      	ldr	r3, [pc, #296]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f023 020f 	bic.w	r2, r3, #15
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4947      	ldr	r1, [pc, #284]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006586:	4313      	orrs	r3, r2
 8006588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d055      	beq.n	8006642 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006596:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4940      	ldr	r1, [pc, #256]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065b0:	4b3c      	ldr	r3, [pc, #240]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d121      	bne.n	8006600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0f6      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d107      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d115      	bne.n	8006600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e0ea      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d107      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0de      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065f0:	4b2c      	ldr	r3, [pc, #176]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0d6      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f023 0207 	bic.w	r2, r3, #7
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4925      	ldr	r1, [pc, #148]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800660e:	4313      	orrs	r3, r2
 8006610:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006612:	f7fc fabb 	bl	8002b8c <HAL_GetTick>
 8006616:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006618:	e00a      	b.n	8006630 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800661a:	f7fc fab7 	bl	8002b8c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0be      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	429a      	cmp	r2, r3
 8006640:	d1eb      	bne.n	800661a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d010      	beq.n	8006670 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	429a      	cmp	r2, r3
 800665c:	d208      	bcs.n	8006670 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f023 020f 	bic.w	r2, r3, #15
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	490e      	ldr	r1, [pc, #56]	; (80066a4 <HAL_RCC_ClockConfig+0x244>)
 800666c:	4313      	orrs	r3, r2
 800666e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d214      	bcs.n	80066a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 020f 	bic.w	r2, r3, #15
 8006686:	4906      	ldr	r1, [pc, #24]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <HAL_RCC_ClockConfig+0x240>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e086      	b.n	80067ae <HAL_RCC_ClockConfig+0x34e>
 80066a0:	52002000 	.word	0x52002000
 80066a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	4b3f      	ldr	r3, [pc, #252]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d208      	bcs.n	80066d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066c4:	4b3c      	ldr	r3, [pc, #240]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	4939      	ldr	r1, [pc, #228]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d010      	beq.n	8006704 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	4b34      	ldr	r3, [pc, #208]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d208      	bcs.n	8006704 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066f2:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	492e      	ldr	r1, [pc, #184]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006700:	4313      	orrs	r3, r2
 8006702:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b00      	cmp	r3, #0
 800670e:	d010      	beq.n	8006732 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	4b28      	ldr	r3, [pc, #160]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800671c:	429a      	cmp	r2, r3
 800671e:	d208      	bcs.n	8006732 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006720:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	4922      	ldr	r1, [pc, #136]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 800672e:	4313      	orrs	r3, r2
 8006730:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d010      	beq.n	8006760 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69da      	ldr	r2, [r3, #28]
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800674a:	429a      	cmp	r2, r3
 800674c:	d208      	bcs.n	8006760 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800674e:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	4917      	ldr	r1, [pc, #92]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 800675c:	4313      	orrs	r3, r2
 800675e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006760:	f000 f834 	bl	80067cc <HAL_RCC_GetSysClockFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	4912      	ldr	r1, [pc, #72]	; (80067bc <HAL_RCC_ClockConfig+0x35c>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
 800677c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <HAL_RCC_ClockConfig+0x358>)
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <HAL_RCC_ClockConfig+0x35c>)
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_RCC_ClockConfig+0x360>)
 8006796:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006798:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <HAL_RCC_ClockConfig+0x364>)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <HAL_RCC_ClockConfig+0x368>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fc f9a8 	bl	8002af8 <HAL_InitTick>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
 80067bc:	0800afc8 	.word	0x0800afc8
 80067c0:	24000004 	.word	0x24000004
 80067c4:	24000000 	.word	0x24000000
 80067c8:	240000a0 	.word	0x240000a0

080067cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067d2:	4bb3      	ldr	r3, [pc, #716]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	2b18      	cmp	r3, #24
 80067dc:	f200 8155 	bhi.w	8006a8a <HAL_RCC_GetSysClockFreq+0x2be>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800684d 	.word	0x0800684d
 80067ec:	08006a8b 	.word	0x08006a8b
 80067f0:	08006a8b 	.word	0x08006a8b
 80067f4:	08006a8b 	.word	0x08006a8b
 80067f8:	08006a8b 	.word	0x08006a8b
 80067fc:	08006a8b 	.word	0x08006a8b
 8006800:	08006a8b 	.word	0x08006a8b
 8006804:	08006a8b 	.word	0x08006a8b
 8006808:	08006873 	.word	0x08006873
 800680c:	08006a8b 	.word	0x08006a8b
 8006810:	08006a8b 	.word	0x08006a8b
 8006814:	08006a8b 	.word	0x08006a8b
 8006818:	08006a8b 	.word	0x08006a8b
 800681c:	08006a8b 	.word	0x08006a8b
 8006820:	08006a8b 	.word	0x08006a8b
 8006824:	08006a8b 	.word	0x08006a8b
 8006828:	08006879 	.word	0x08006879
 800682c:	08006a8b 	.word	0x08006a8b
 8006830:	08006a8b 	.word	0x08006a8b
 8006834:	08006a8b 	.word	0x08006a8b
 8006838:	08006a8b 	.word	0x08006a8b
 800683c:	08006a8b 	.word	0x08006a8b
 8006840:	08006a8b 	.word	0x08006a8b
 8006844:	08006a8b 	.word	0x08006a8b
 8006848:	0800687f 	.word	0x0800687f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800684c:	4b94      	ldr	r3, [pc, #592]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006858:	4b91      	ldr	r3, [pc, #580]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	4a90      	ldr	r2, [pc, #576]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
 8006868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800686a:	e111      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800686c:	4b8d      	ldr	r3, [pc, #564]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800686e:	61bb      	str	r3, [r7, #24]
    break;
 8006870:	e10e      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006872:	4b8d      	ldr	r3, [pc, #564]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006874:	61bb      	str	r3, [r7, #24]
    break;
 8006876:	e10b      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006878:	4b8c      	ldr	r3, [pc, #560]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800687a:	61bb      	str	r3, [r7, #24]
    break;
 800687c:	e108      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800687e:	4b88      	ldr	r3, [pc, #544]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006888:	4b85      	ldr	r3, [pc, #532]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	091b      	lsrs	r3, r3, #4
 800688e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006892:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006894:	4b82      	ldr	r3, [pc, #520]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800689e:	4b80      	ldr	r3, [pc, #512]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80e1 	beq.w	8006a84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	f000 8083 	beq.w	80069d0 <HAL_RCC_GetSysClockFreq+0x204>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f200 80a1 	bhi.w	8006a14 <HAL_RCC_GetSysClockFreq+0x248>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x114>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d056      	beq.n	800698c <HAL_RCC_GetSysClockFreq+0x1c0>
 80068de:	e099      	b.n	8006a14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e0:	4b6f      	ldr	r3, [pc, #444]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02d      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068ec:	4b6c      	ldr	r3, [pc, #432]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	4a6b      	ldr	r2, [pc, #428]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006916:	4b62      	ldr	r3, [pc, #392]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	ed97 6a02 	vldr	s12, [r7, #8]
 800692a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006946:	e087      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695a:	4b51      	ldr	r3, [pc, #324]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696a:	ed97 6a02 	vldr	s12, [r7, #8]
 800696e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698a:	e065      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800699a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699e:	4b40      	ldr	r3, [pc, #256]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ce:	e043      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2f0>
 80069de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e2:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a12:	e021      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	0a5b      	lsrs	r3, r3, #9
 8006a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a62:	3301      	adds	r3, #1
 8006a64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a7c:	ee17 3a90 	vmov	r3, s15
 8006a80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a82:	e005      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61bb      	str	r3, [r7, #24]
    break;
 8006a88:	e002      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a8c:	61bb      	str	r3, [r7, #24]
    break;
 8006a8e:	bf00      	nop
  }

  return sysclockfreq;
 8006a90:	69bb      	ldr	r3, [r7, #24]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3724      	adds	r7, #36	; 0x24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	03d09000 	.word	0x03d09000
 8006aa8:	003d0900 	.word	0x003d0900
 8006aac:	007a1200 	.word	0x007a1200
 8006ab0:	46000000 	.word	0x46000000
 8006ab4:	4c742400 	.word	0x4c742400
 8006ab8:	4a742400 	.word	0x4a742400
 8006abc:	4af42400 	.word	0x4af42400

08006ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ac6:	f7ff fe81 	bl	80067cc <HAL_RCC_GetSysClockFreq>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	0a1b      	lsrs	r3, r3, #8
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	490f      	ldr	r1, [pc, #60]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ad8:	5ccb      	ldrb	r3, [r1, r3]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006aee:	5cd3      	ldrb	r3, [r2, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	4a07      	ldr	r2, [pc, #28]	; (8006b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006afc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006afe:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b06:	681b      	ldr	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	58024400 	.word	0x58024400
 8006b14:	0800afc8 	.word	0x0800afc8
 8006b18:	24000004 	.word	0x24000004
 8006b1c:	24000000 	.word	0x24000000

08006b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b24:	f7ff ffcc 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	4904      	ldr	r1, [pc, #16]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b36:	5ccb      	ldrb	r3, [r1, r3]
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	58024400 	.word	0x58024400
 8006b48:	0800afc8 	.word	0x0800afc8

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b50:	f7ff ffb6 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4904      	ldr	r1, [pc, #16]	; (8006b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	58024400 	.word	0x58024400
 8006b74:	0800afc8 	.word	0x0800afc8

08006b78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b80:	2300      	movs	r3, #0
 8006b82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b84:	2300      	movs	r3, #0
 8006b86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d03f      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b9c:	d02a      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ba2:	d824      	bhi.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba8:	d018      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bae:	d81e      	bhi.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb8:	d007      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bba:	e018      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbc:	4bab      	ldr	r3, [pc, #684]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4aaa      	ldr	r2, [pc, #680]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bc8:	e015      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	2102      	movs	r1, #2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 f9cf 	bl	8007f74 <RCCEx_PLL2_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bda:	e00c      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3324      	adds	r3, #36	; 0x24
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 fa78 	bl	80080d8 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bec:	e003      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bfc:	4b9b      	ldr	r3, [pc, #620]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c08:	4998      	ldr	r1, [pc, #608]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c0e:	e001      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d03d      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d826      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c45 	.word	0x08006c45
 8006c34:	08006c53 	.word	0x08006c53
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c7d 	.word	0x08006c7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c44:	4b89      	ldr	r3, [pc, #548]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4a88      	ldr	r2, [pc, #544]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c50:	e015      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 f98b 	bl	8007f74 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c62:	e00c      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3324      	adds	r3, #36	; 0x24
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fa34 	bl	80080d8 <RCCEx_PLL3_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c88:	f023 0207 	bic.w	r2, r3, #7
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	4976      	ldr	r1, [pc, #472]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	650b      	str	r3, [r1, #80]	; 0x50
 8006c96:	e001      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d042      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb0:	d02b      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb6:	d825      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cb8:	2bc0      	cmp	r3, #192	; 0xc0
 8006cba:	d028      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cbc:	2bc0      	cmp	r3, #192	; 0xc0
 8006cbe:	d821      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cc0:	2b80      	cmp	r3, #128	; 0x80
 8006cc2:	d016      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d81d      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d007      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006cd0:	e018      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd2:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	4a65      	ldr	r2, [pc, #404]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cde:	e017      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f944 	bl	8007f74 <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e00e      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3324      	adds	r3, #36	; 0x24
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f9ed 	bl	80080d8 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d02:	e005      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
      break;
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d16:	4b55      	ldr	r3, [pc, #340]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	4952      	ldr	r1, [pc, #328]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	650b      	str	r3, [r1, #80]	; 0x50
 8006d28:	e001      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d049      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d44:	d030      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d4a:	d82a      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d50:	d02c      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d56:	d824      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5c:	d018      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d62:	d81e      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d6c:	d007      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d6e:	e018      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d7c:	e017      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f8f5 	bl	8007f74 <RCCEx_PLL2_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d8e:	e00e      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3324      	adds	r3, #36	; 0x24
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f99e 	bl	80080d8 <RCCEx_PLL3_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006da0:	e005      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
      break;
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006db4:	4b2d      	ldr	r3, [pc, #180]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dc2:	492a      	ldr	r1, [pc, #168]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	658b      	str	r3, [r1, #88]	; 0x58
 8006dc8:	e001      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d04c      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006de4:	d030      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dea:	d82a      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006dec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006df0:	d02c      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006df6:	d824      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dfc:	d018      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e02:	d81e      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e0c:	d007      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e0e:	e018      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e1c:	e017      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3304      	adds	r3, #4
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 f8a5 	bl	8007f74 <RCCEx_PLL2_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e2e:	e00e      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f94e 	bl	80080d8 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e40:	e005      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
      break;
 8006e46:	e002      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e62:	4902      	ldr	r1, [pc, #8]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	658b      	str	r3, [r1, #88]	; 0x58
 8006e68:	e004      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006e6a:	bf00      	nop
 8006e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d032      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e84:	2b30      	cmp	r3, #48	; 0x30
 8006e86:	d01c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d817      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d00c      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d813      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d016      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d10f      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4baf      	ldr	r3, [pc, #700]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4aae      	ldr	r2, [pc, #696]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ea8:	e00e      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2102      	movs	r1, #2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f85f 	bl	8007f74 <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006eba:	e005      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ece:	4ba3      	ldr	r3, [pc, #652]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	49a0      	ldr	r1, [pc, #640]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ee0:	e001      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d047      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006efa:	d030      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f00:	d82a      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f06:	d02c      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006f08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f0c:	d824      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f12:	d018      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f18:	d81e      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d007      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006f24:	e018      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f26:	4b8d      	ldr	r3, [pc, #564]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	4a8c      	ldr	r2, [pc, #560]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f32:	e017      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 f81a 	bl	8007f74 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f44:	e00e      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3324      	adds	r3, #36	; 0x24
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f8c3 	bl	80080d8 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f56:	e005      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f6a:	4b7c      	ldr	r3, [pc, #496]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	4979      	ldr	r1, [pc, #484]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	650b      	str	r3, [r1, #80]	; 0x50
 8006f7c:	e001      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d049      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f96:	d02e      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f9c:	d828      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fa2:	d02a      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fa8:	d822      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fae:	d026      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fb4:	d81c      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fba:	d010      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc0:	d816      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01d      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d111      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 ffce 	bl	8007f74 <RCCEx_PLL2_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fdc:	e012      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3324      	adds	r3, #36	; 0x24
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 f877 	bl	80080d8 <RCCEx_PLL3_Config>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fee:	e009      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff4:	e006      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e004      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e002      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006ffe:	bf00      	nop
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800700a:	4b54      	ldr	r3, [pc, #336]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800700c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007016:	4951      	ldr	r1, [pc, #324]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007018:	4313      	orrs	r3, r2
 800701a:	650b      	str	r3, [r1, #80]	; 0x50
 800701c:	e001      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d04b      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d02e      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800703a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703e:	d828      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d02a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d822      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800704c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007050:	d026      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007052:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007056:	d81c      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d010      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800705e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007062:	d816      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706c:	d111      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	2101      	movs	r1, #1
 8007074:	4618      	mov	r0, r3
 8007076:	f000 ff7d 	bl	8007f74 <RCCEx_PLL2_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800707e:	e012      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3324      	adds	r3, #36	; 0x24
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f826 	bl	80080d8 <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007090:	e009      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
      break;
 8007096:	e006      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007098:	bf00      	nop
 800709a:	e004      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800709c:	bf00      	nop
 800709e:	e002      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80070a0:	bf00      	nop
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80070a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070ac:	4b2b      	ldr	r3, [pc, #172]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070ba:	4928      	ldr	r1, [pc, #160]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	658b      	str	r3, [r1, #88]	; 0x58
 80070c0:	e001      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d02f      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070da:	d00e      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80070dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e0:	d814      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d015      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80070e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ea:	d10f      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a1a      	ldr	r2, [pc, #104]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070f8:	e00c      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3304      	adds	r3, #4
 80070fe:	2101      	movs	r1, #1
 8007100:	4618      	mov	r0, r3
 8007102:	f000 ff37 	bl	8007f74 <RCCEx_PLL2_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007126:	490d      	ldr	r1, [pc, #52]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	650b      	str	r3, [r1, #80]	; 0x50
 800712c:	e001      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d033      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007142:	2b03      	cmp	r3, #3
 8007144:	d81c      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007187 	.word	0x08007187
 8007150:	08007161 	.word	0x08007161
 8007154:	0800716f 	.word	0x0800716f
 8007158:	08007187 	.word	0x08007187
 800715c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007160:	4bb8      	ldr	r3, [pc, #736]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	4ab7      	ldr	r2, [pc, #732]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800716c:	e00c      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	2102      	movs	r1, #2
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fefd 	bl	8007f74 <RCCEx_PLL2_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800717e:	e003      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	e000      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800718e:	4bad      	ldr	r3, [pc, #692]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007192:	f023 0203 	bic.w	r2, r3, #3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	49aa      	ldr	r1, [pc, #680]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800719c:	4313      	orrs	r3, r2
 800719e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071a0:	e001      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8086 	beq.w	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071b4:	4ba4      	ldr	r3, [pc, #656]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4aa3      	ldr	r2, [pc, #652]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80071ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071c0:	f7fb fce4 	bl	8002b8c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c6:	e009      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c8:	f7fb fce0 	bl	8002b8c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b64      	cmp	r3, #100	; 0x64
 80071d4:	d902      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	75fb      	strb	r3, [r7, #23]
        break;
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071dc:	4b9a      	ldr	r3, [pc, #616]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ef      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d166      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071ee:	4b95      	ldr	r3, [pc, #596]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071f8:	4053      	eors	r3, r2
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d013      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007202:	4b90      	ldr	r3, [pc, #576]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800720c:	4b8d      	ldr	r3, [pc, #564]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	4a8c      	ldr	r2, [pc, #560]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007216:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007218:	4b8a      	ldr	r3, [pc, #552]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	4a89      	ldr	r2, [pc, #548]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007224:	4a87      	ldr	r2, [pc, #540]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007234:	d115      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fb fca9 	bl	8002b8c <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800723c:	e00b      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723e:	f7fb fca5 	bl	8002b8c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f241 3288 	movw	r2, #5000	; 0x1388
 800724c:	4293      	cmp	r3, r2
 800724e:	d902      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	75fb      	strb	r3, [r7, #23]
            break;
 8007254:	e005      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0ed      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d126      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007276:	d10d      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007278:	4b72      	ldr	r3, [pc, #456]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007286:	0919      	lsrs	r1, r3, #4
 8007288:	4b70      	ldr	r3, [pc, #448]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800728a:	400b      	ands	r3, r1
 800728c:	496d      	ldr	r1, [pc, #436]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	610b      	str	r3, [r1, #16]
 8007292:	e005      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007294:	4b6b      	ldr	r3, [pc, #428]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	4a6a      	ldr	r2, [pc, #424]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800729a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800729e:	6113      	str	r3, [r2, #16]
 80072a0:	4b68      	ldr	r3, [pc, #416]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ae:	4965      	ldr	r1, [pc, #404]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	670b      	str	r3, [r1, #112]	; 0x70
 80072b4:	e004      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	75bb      	strb	r3, [r7, #22]
 80072ba:	e001      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d07e      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d0:	2b28      	cmp	r3, #40	; 0x28
 80072d2:	d867      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080073ab 	.word	0x080073ab
 80072e0:	080073a5 	.word	0x080073a5
 80072e4:	080073a5 	.word	0x080073a5
 80072e8:	080073a5 	.word	0x080073a5
 80072ec:	080073a5 	.word	0x080073a5
 80072f0:	080073a5 	.word	0x080073a5
 80072f4:	080073a5 	.word	0x080073a5
 80072f8:	080073a5 	.word	0x080073a5
 80072fc:	08007381 	.word	0x08007381
 8007300:	080073a5 	.word	0x080073a5
 8007304:	080073a5 	.word	0x080073a5
 8007308:	080073a5 	.word	0x080073a5
 800730c:	080073a5 	.word	0x080073a5
 8007310:	080073a5 	.word	0x080073a5
 8007314:	080073a5 	.word	0x080073a5
 8007318:	080073a5 	.word	0x080073a5
 800731c:	08007393 	.word	0x08007393
 8007320:	080073a5 	.word	0x080073a5
 8007324:	080073a5 	.word	0x080073a5
 8007328:	080073a5 	.word	0x080073a5
 800732c:	080073a5 	.word	0x080073a5
 8007330:	080073a5 	.word	0x080073a5
 8007334:	080073a5 	.word	0x080073a5
 8007338:	080073a5 	.word	0x080073a5
 800733c:	080073ab 	.word	0x080073ab
 8007340:	080073a5 	.word	0x080073a5
 8007344:	080073a5 	.word	0x080073a5
 8007348:	080073a5 	.word	0x080073a5
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073a5 	.word	0x080073a5
 8007354:	080073a5 	.word	0x080073a5
 8007358:	080073a5 	.word	0x080073a5
 800735c:	080073ab 	.word	0x080073ab
 8007360:	080073a5 	.word	0x080073a5
 8007364:	080073a5 	.word	0x080073a5
 8007368:	080073a5 	.word	0x080073a5
 800736c:	080073a5 	.word	0x080073a5
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073a5 	.word	0x080073a5
 8007378:	080073a5 	.word	0x080073a5
 800737c:	080073ab 	.word	0x080073ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	2101      	movs	r1, #1
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fdf4 	bl	8007f74 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007390:	e00c      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3324      	adds	r3, #36	; 0x24
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fe9d 	bl	80080d8 <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073a2:	e003      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
      break;
 80073a8:	e000      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80073aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073be:	4921      	ldr	r1, [pc, #132]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	654b      	str	r3, [r1, #84]	; 0x54
 80073c4:	e001      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d03e      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d820      	bhi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007427 	.word	0x08007427
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	0800740f 	.word	0x0800740f
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	2101      	movs	r1, #1
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fdb6 	bl	8007f74 <RCCEx_PLL2_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800740c:	e00c      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3324      	adds	r3, #36	; 0x24
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fe5f 	bl	80080d8 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d110      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f023 0207 	bic.w	r2, r3, #7
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800743a:	4902      	ldr	r1, [pc, #8]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800743c:	4313      	orrs	r3, r2
 800743e:	654b      	str	r3, [r1, #84]	; 0x54
 8007440:	e008      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	58024800 	.word	0x58024800
 800744c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d039      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	2b05      	cmp	r3, #5
 8007468:	d820      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x934>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074b3 	.word	0x080074b3
 8007474:	08007489 	.word	0x08007489
 8007478:	0800749b 	.word	0x0800749b
 800747c:	080074b3 	.word	0x080074b3
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074b3 	.word	0x080074b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	2101      	movs	r1, #1
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fd70 	bl	8007f74 <RCCEx_PLL2_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007498:	e00c      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3324      	adds	r3, #36	; 0x24
 800749e:	2101      	movs	r1, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fe19 	bl	80080d8 <RCCEx_PLL3_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	75fb      	strb	r3, [r7, #23]
      break;
 80074b0:	e000      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80074b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074ba:	4bb7      	ldr	r3, [pc, #732]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074be:	f023 0207 	bic.w	r2, r3, #7
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	49b3      	ldr	r1, [pc, #716]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	658b      	str	r3, [r1, #88]	; 0x58
 80074ce:	e001      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d04b      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ea:	d02e      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80074ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074f0:	d828      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d02a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d822      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007502:	d026      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007508:	d81c      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800750a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750e:	d010      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007514:	d816      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01d      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800751a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800751e:	d111      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fd24 	bl	8007f74 <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007530:	e012      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fdcd 	bl	80080d8 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007542:	e009      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e006      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800754a:	bf00      	nop
 800754c:	e004      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800755e:	4b8e      	ldr	r3, [pc, #568]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756c:	498a      	ldr	r1, [pc, #552]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800756e:	4313      	orrs	r3, r2
 8007570:	654b      	str	r3, [r1, #84]	; 0x54
 8007572:	e001      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d04b      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800758e:	d02e      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007590:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007594:	d828      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759a:	d02a      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a0:	d822      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80075a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075a6:	d026      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80075a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ac:	d81c      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80075ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b2:	d010      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80075b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b8:	d816      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01d      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c2:	d111      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fcd2 	bl	8007f74 <RCCEx_PLL2_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075d4:	e012      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3324      	adds	r3, #36	; 0x24
 80075da:	2102      	movs	r1, #2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fd7b 	bl	80080d8 <RCCEx_PLL3_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075e6:	e009      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
      break;
 80075ec:	e006      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075ee:	bf00      	nop
 80075f0:	e004      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075f2:	bf00      	nop
 80075f4:	e002      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075f6:	bf00      	nop
 80075f8:	e000      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007602:	4b65      	ldr	r3, [pc, #404]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007606:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007610:	4961      	ldr	r1, [pc, #388]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007612:	4313      	orrs	r3, r2
 8007614:	658b      	str	r3, [r1, #88]	; 0x58
 8007616:	e001      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	2b00      	cmp	r3, #0
 8007626:	d04b      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800762e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007632:	d02e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007634:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007638:	d828      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800763a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763e:	d02a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007644:	d822      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007646:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800764a:	d026      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800764c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007650:	d81c      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007656:	d010      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800765c:	d816      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01d      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007666:	d111      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fc80 	bl	8007f74 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007678:	e012      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	2102      	movs	r1, #2
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fd29 	bl	80080d8 <RCCEx_PLL3_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800768a:	e009      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	e006      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007692:	bf00      	nop
 8007694:	e004      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007696:	bf00      	nop
 8007698:	e002      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076a6:	4b3c      	ldr	r3, [pc, #240]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b4:	4938      	ldr	r1, [pc, #224]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	658b      	str	r3, [r1, #88]	; 0x58
 80076ba:	e001      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d10a      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3324      	adds	r3, #36	; 0x24
 80076dc:	2102      	movs	r1, #2
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fcfa 	bl	80080d8 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076ee:	4b2a      	ldr	r3, [pc, #168]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	4926      	ldr	r1, [pc, #152]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3324      	adds	r3, #36	; 0x24
 800771e:	2102      	movs	r1, #2
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fcd9 	bl	80080d8 <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007730:	4b19      	ldr	r3, [pc, #100]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800773e:	4916      	ldr	r1, [pc, #88]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007740:	4313      	orrs	r3, r2
 8007742:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d036      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775a:	d01f      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007760:	d817      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776a:	d009      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800776c:	e011      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3304      	adds	r3, #4
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fbfd 	bl	8007f74 <RCCEx_PLL2_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800777e:	e00e      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3324      	adds	r3, #36	; 0x24
 8007784:	2102      	movs	r1, #2
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fca6 	bl	80080d8 <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007790:	e005      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	e002      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007798:	58024400 	.word	0x58024400
      break;
 800779c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077a4:	4b93      	ldr	r3, [pc, #588]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077b2:	4990      	ldr	r1, [pc, #576]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	658b      	str	r3, [r1, #88]	; 0x58
 80077b8:	e001      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d033      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077d4:	d01c      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80077d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077da:	d816      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80077dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e0:	d003      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80077e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e6:	d007      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80077e8:	e00f      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ea:	4b82      	ldr	r3, [pc, #520]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a81      	ldr	r2, [pc, #516]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80077f6:	e00c      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	2101      	movs	r1, #1
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fc6a 	bl	80080d8 <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007808:	e003      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
      break;
 800780e:	e000      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007818:	4b76      	ldr	r3, [pc, #472]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007826:	4973      	ldr	r1, [pc, #460]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	654b      	str	r3, [r1, #84]	; 0x54
 800782c:	e001      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d029      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784a:	d007      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800784c:	e00f      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784e:	4b69      	ldr	r3, [pc, #420]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	4a68      	ldr	r2, [pc, #416]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800785a:	e00b      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	2102      	movs	r1, #2
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fb86 	bl	8007f74 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800786c:	e002      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
      break;
 8007872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800787a:	4b5e      	ldr	r3, [pc, #376]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	495b      	ldr	r1, [pc, #364]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007888:	4313      	orrs	r3, r2
 800788a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800788c:	e001      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	2102      	movs	r1, #2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fc17 	bl	80080d8 <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d030      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078c8:	d017      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80078ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ce:	d811      	bhi.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d4:	d013      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80078d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078da:	d80b      	bhi.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d010      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d106      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e6:	4b43      	ldr	r3, [pc, #268]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	4a42      	ldr	r2, [pc, #264]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80078f2:	e007      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	75fb      	strb	r3, [r7, #23]
      break;
 80078f8:	e004      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800790a:	4b3a      	ldr	r3, [pc, #232]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007916:	4937      	ldr	r1, [pc, #220]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	654b      	str	r3, [r1, #84]	; 0x54
 800791c:	e001      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800792e:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	492e      	ldr	r1, [pc, #184]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800794c:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800795a:	4926      	ldr	r1, [pc, #152]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800796c:	4b21      	ldr	r3, [pc, #132]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007978:	491e      	ldr	r1, [pc, #120]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00d      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800798a:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	4a19      	ldr	r2, [pc, #100]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007994:	6113      	str	r3, [r2, #16]
 8007996:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079a0:	4914      	ldr	r1, [pc, #80]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da08      	bge.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079ae:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ba:	490e      	ldr	r1, [pc, #56]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079cc:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	4906      	ldr	r1, [pc, #24]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80079e0:	7dbb      	ldrb	r3, [r7, #22]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58024400 	.word	0x58024400

080079f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079fc:	f7ff f860 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8007a00:	4602      	mov	r2, r0
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	4904      	ldr	r1, [pc, #16]	; (8007a20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a0e:	5ccb      	ldrb	r3, [r1, r3]
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	0800afc8 	.word	0x0800afc8

08007a24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b089      	sub	sp, #36	; 0x24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2c:	4ba1      	ldr	r3, [pc, #644]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a36:	4b9f      	ldr	r3, [pc, #636]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	0b1b      	lsrs	r3, r3, #12
 8007a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a42:	4b9c      	ldr	r3, [pc, #624]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	091b      	lsrs	r3, r3, #4
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a4e:	4b99      	ldr	r3, [pc, #612]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8111 	beq.w	8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 8083 	beq.w	8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f200 80a1 	bhi.w	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d056      	beq.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a8e:	e099      	b.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a90:	4b88      	ldr	r3, [pc, #544]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a9c:	4b85      	ldr	r3, [pc, #532]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a84      	ldr	r2, [pc, #528]	; (8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b7b      	ldr	r3, [pc, #492]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ada:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007af6:	e087      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b6a      	ldr	r3, [pc, #424]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b3a:	e065      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b7e:	e043      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b48      	ldr	r3, [pc, #288]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bc2:	e021      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2e:	ee17 2a90 	vmov	r2, s15
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c36:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5c:	ee17 2a90 	vmov	r2, s15
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c64:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c92:	e008      	b.n	8007ca6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
}
 8007ca6:	bf00      	nop
 8007ca8:	3724      	adds	r7, #36	; 0x24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	03d09000 	.word	0x03d09000
 8007cbc:	46000000 	.word	0x46000000
 8007cc0:	4c742400 	.word	0x4c742400
 8007cc4:	4a742400 	.word	0x4a742400
 8007cc8:	4af42400 	.word	0x4af42400

08007ccc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b089      	sub	sp, #36	; 0x24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd4:	4ba1      	ldr	r3, [pc, #644]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007cde:	4b9f      	ldr	r3, [pc, #636]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	0d1b      	lsrs	r3, r3, #20
 8007ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007cea:	4b9c      	ldr	r3, [pc, #624]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cf6:	4b99      	ldr	r3, [pc, #612]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	08db      	lsrs	r3, r3, #3
 8007cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8111 	beq.w	8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	f000 8083 	beq.w	8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	f200 80a1 	bhi.w	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d056      	beq.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d36:	e099      	b.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d38:	4b88      	ldr	r3, [pc, #544]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d02d      	beq.n	8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d44:	4b85      	ldr	r3, [pc, #532]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	08db      	lsrs	r3, r3, #3
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	4a84      	ldr	r2, [pc, #528]	; (8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6e:	4b7b      	ldr	r3, [pc, #492]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d9e:	e087      	b.n	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db2:	4b6a      	ldr	r3, [pc, #424]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de2:	e065      	b.n	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df6:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e26:	e043      	b.n	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3a:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e6a:	e021      	b.n	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7e:	4b37      	ldr	r3, [pc, #220]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007eb0:	4b2a      	ldr	r3, [pc, #168]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	0a5b      	lsrs	r3, r3, #9
 8007eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed6:	ee17 2a90 	vmov	r2, s15
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ede:	4b1f      	ldr	r3, [pc, #124]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f04:	ee17 2a90 	vmov	r2, s15
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	0e1b      	lsrs	r3, r3, #24
 8007f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f32:	ee17 2a90 	vmov	r2, s15
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f3a:	e008      	b.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	609a      	str	r2, [r3, #8]
}
 8007f4e:	bf00      	nop
 8007f50:	3724      	adds	r7, #36	; 0x24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	03d09000 	.word	0x03d09000
 8007f64:	46000000 	.word	0x46000000
 8007f68:	4c742400 	.word	0x4c742400
 8007f6c:	4a742400 	.word	0x4a742400
 8007f70:	4af42400 	.word	0x4af42400

08007f74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f82:	4b53      	ldr	r3, [pc, #332]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d101      	bne.n	8007f92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e099      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f92:	4b4f      	ldr	r3, [pc, #316]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a4e      	ldr	r2, [pc, #312]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9e:	f7fa fdf5 	bl	8002b8c <HAL_GetTick>
 8007fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fa4:	e008      	b.n	8007fb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fa6:	f7fa fdf1 	bl	8002b8c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e086      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fb8:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f0      	bne.n	8007fa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fc4:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	493f      	ldr	r1, [pc, #252]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	025b      	lsls	r3, r3, #9
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	041b      	lsls	r3, r3, #16
 8007ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	3b01      	subs	r3, #1
 8008002:	061b      	lsls	r3, r3, #24
 8008004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008008:	4931      	ldr	r1, [pc, #196]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800800e:	4b30      	ldr	r3, [pc, #192]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	492d      	ldr	r1, [pc, #180]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800801c:	4313      	orrs	r3, r2
 800801e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	f023 0220 	bic.w	r2, r3, #32
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	4928      	ldr	r1, [pc, #160]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800802e:	4313      	orrs	r3, r2
 8008030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008032:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008038:	f023 0310 	bic.w	r3, r3, #16
 800803c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800803e:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <RCCEx_PLL2_Config+0x160>)
 8008044:	4013      	ands	r3, r2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	69d2      	ldr	r2, [r2, #28]
 800804a:	00d2      	lsls	r2, r2, #3
 800804c:	4920      	ldr	r1, [pc, #128]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008052:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008058:	f043 0310 	orr.w	r3, r3, #16
 800805c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d106      	bne.n	8008072 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800806a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800806e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008070:	e00f      	b.n	8008092 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d106      	bne.n	8008086 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800807e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008084:	e005      	b.n	8008092 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	4a11      	ldr	r2, [pc, #68]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 800808c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a0e      	ldr	r2, [pc, #56]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 8008098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800809c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809e:	f7fa fd75 	bl	8002b8c <HAL_GetTick>
 80080a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080a4:	e008      	b.n	80080b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a6:	f7fa fd71 	bl	8002b8c <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e006      	b.n	80080c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f0      	beq.n	80080a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	ffff0007 	.word	0xffff0007

080080d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080e6:	4b53      	ldr	r3, [pc, #332]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d101      	bne.n	80080f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e099      	b.n	800822a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080f6:	4b4f      	ldr	r3, [pc, #316]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a4e      	ldr	r2, [pc, #312]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008102:	f7fa fd43 	bl	8002b8c <HAL_GetTick>
 8008106:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008108:	e008      	b.n	800811c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800810a:	f7fa fd3f 	bl	8002b8c <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e086      	b.n	800822a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800811c:	4b45      	ldr	r3, [pc, #276]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008128:	4b42      	ldr	r3, [pc, #264]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	051b      	lsls	r3, r3, #20
 8008136:	493f      	ldr	r1, [pc, #252]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008138:	4313      	orrs	r3, r2
 800813a:	628b      	str	r3, [r1, #40]	; 0x28
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	3b01      	subs	r3, #1
 800814c:	025b      	lsls	r3, r3, #9
 800814e:	b29b      	uxth	r3, r3
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	3b01      	subs	r3, #1
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	3b01      	subs	r3, #1
 8008166:	061b      	lsls	r3, r3, #24
 8008168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800816c:	4931      	ldr	r1, [pc, #196]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800816e:	4313      	orrs	r3, r2
 8008170:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	492d      	ldr	r1, [pc, #180]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008180:	4313      	orrs	r3, r2
 8008182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008184:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4928      	ldr	r1, [pc, #160]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008192:	4313      	orrs	r3, r2
 8008194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008196:	4b27      	ldr	r3, [pc, #156]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	4a26      	ldr	r2, [pc, #152]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800819c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a6:	4b24      	ldr	r3, [pc, #144]	; (8008238 <RCCEx_PLL3_Config+0x160>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	69d2      	ldr	r2, [r2, #28]
 80081ae:	00d2      	lsls	r2, r2, #3
 80081b0:	4920      	ldr	r1, [pc, #128]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081b6:	4b1f      	ldr	r3, [pc, #124]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081c8:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	4a19      	ldr	r2, [pc, #100]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081d4:	e00f      	b.n	80081f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d106      	bne.n	80081ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081dc:	4b15      	ldr	r3, [pc, #84]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	4a14      	ldr	r2, [pc, #80]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081e8:	e005      	b.n	80081f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	4a11      	ldr	r2, [pc, #68]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008202:	f7fa fcc3 	bl	8002b8c <HAL_GetTick>
 8008206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008208:	e008      	b.n	800821c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800820a:	f7fa fcbf 	bl	8002b8c <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e006      	b.n	800822a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <RCCEx_PLL3_Config+0x15c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	58024400 	.word	0x58024400
 8008238:	ffff0007 	.word	0xffff0007

0800823c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0f1      	b.n	8008432 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a78      	ldr	r2, [pc, #480]	; (800843c <HAL_SPI_Init+0x200>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00f      	beq.n	800827e <HAL_SPI_Init+0x42>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a77      	ldr	r2, [pc, #476]	; (8008440 <HAL_SPI_Init+0x204>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00a      	beq.n	800827e <HAL_SPI_Init+0x42>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a75      	ldr	r2, [pc, #468]	; (8008444 <HAL_SPI_Init+0x208>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d005      	beq.n	800827e <HAL_SPI_Init+0x42>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d901      	bls.n	800827e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e0d9      	b.n	8008432 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 faa2 	bl	80097c8 <SPI_GetPacketSize>
 8008284:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a6c      	ldr	r2, [pc, #432]	; (800843c <HAL_SPI_Init+0x200>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d00c      	beq.n	80082aa <HAL_SPI_Init+0x6e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a6a      	ldr	r2, [pc, #424]	; (8008440 <HAL_SPI_Init+0x204>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <HAL_SPI_Init+0x6e>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a69      	ldr	r2, [pc, #420]	; (8008444 <HAL_SPI_Init+0x208>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_Init+0x6e>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d811      	bhi.n	80082ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082ae:	4a63      	ldr	r2, [pc, #396]	; (800843c <HAL_SPI_Init+0x200>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d009      	beq.n	80082c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a61      	ldr	r2, [pc, #388]	; (8008440 <HAL_SPI_Init+0x204>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d004      	beq.n	80082c8 <HAL_SPI_Init+0x8c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a60      	ldr	r2, [pc, #384]	; (8008444 <HAL_SPI_Init+0x208>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d104      	bne.n	80082d2 <HAL_SPI_Init+0x96>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d901      	bls.n	80082d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e0af      	b.n	8008432 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fa f8b2 	bl	8002450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800830e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008318:	d119      	bne.n	800834e <HAL_SPI_Init+0x112>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008322:	d103      	bne.n	800832c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008328:	2b00      	cmp	r3, #0
 800832a:	d008      	beq.n	800833e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10c      	bne.n	800834e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800833c:	d107      	bne.n	800834e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800834c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008360:	ea42 0103 	orr.w	r1, r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ae:	ea42 0103 	orr.w	r1, r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d113      	bne.n	80083ee <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0201 	bic.w	r2, r2, #1
 80083fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40013000 	.word	0x40013000
 8008440:	40003800 	.word	0x40003800
 8008444:	40003c00 	.word	0x40003c00

08008448 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	4613      	mov	r3, r2
 8008456:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3320      	adds	r3, #32
 800845e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_SPI_Transmit+0x2a>
 800846e:	2302      	movs	r3, #2
 8008470:	e1d7      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800847a:	f7fa fb87 	bl	8002b8c <HAL_GetTick>
 800847e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d007      	beq.n	800849c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800848c:	2302      	movs	r3, #2
 800848e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008498:	7efb      	ldrb	r3, [r7, #27]
 800849a:	e1c2      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_SPI_Transmit+0x60>
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d107      	bne.n	80084b8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80084b4:	7efb      	ldrb	r3, [r7, #27]
 80084b6:	e1b4      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2203      	movs	r2, #3
 80084bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008508:	d107      	bne.n	800851a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	4b96      	ldr	r3, [pc, #600]	; (800877c <HAL_SPI_Transmit+0x334>)
 8008522:	4013      	ands	r3, r2
 8008524:	88f9      	ldrh	r1, [r7, #6]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	430b      	orrs	r3, r1
 800852c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008546:	d107      	bne.n	8008558 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	2b0f      	cmp	r3, #15
 800855e:	d947      	bls.n	80085f0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008560:	e03f      	b.n	80085e2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b02      	cmp	r3, #2
 800856e:	d114      	bne.n	800859a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008598:	e023      	b.n	80085e2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800859a:	f7fa faf7 	bl	8002b8c <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d803      	bhi.n	80085b2 <HAL_SPI_Transmit+0x16a>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d102      	bne.n	80085b8 <HAL_SPI_Transmit+0x170>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d114      	bne.n	80085e2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f001 f837 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e11f      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1b9      	bne.n	8008562 <HAL_SPI_Transmit+0x11a>
 80085ee:	e0f2      	b.n	80087d6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b07      	cmp	r3, #7
 80085f6:	f240 80e7 	bls.w	80087c8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085fa:	e05d      	b.n	80086b8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d132      	bne.n	8008670 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d918      	bls.n	8008648 <HAL_SPI_Transmit+0x200>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b02      	subs	r3, #2
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008646:	e037      	b.n	80086b8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008656:	1c9a      	adds	r2, r3, #2
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800866e:	e023      	b.n	80086b8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008670:	f7fa fa8c 	bl	8002b8c <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d803      	bhi.n	8008688 <HAL_SPI_Transmit+0x240>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d102      	bne.n	800868e <HAL_SPI_Transmit+0x246>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d114      	bne.n	80086b8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 ffcc 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e0b4      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d19b      	bne.n	80085fc <HAL_SPI_Transmit+0x1b4>
 80086c4:	e087      	b.n	80087d6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d155      	bne.n	8008780 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d918      	bls.n	8008712 <HAL_SPI_Transmit+0x2ca>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e4:	2b40      	cmp	r3, #64	; 0x40
 80086e6:	d914      	bls.n	8008712 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b04      	subs	r3, #4
 8008708:	b29a      	uxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008710:	e05a      	b.n	80087c8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008718:	b29b      	uxth	r3, r3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d917      	bls.n	800874e <HAL_SPI_Transmit+0x306>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d013      	beq.n	800874e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872a:	881a      	ldrh	r2, [r3, #0]
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b02      	subs	r3, #2
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800874c:	e03c      	b.n	80087c8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3320      	adds	r3, #32
 8008758:	7812      	ldrb	r2, [r2, #0]
 800875a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008778:	e026      	b.n	80087c8 <HAL_SPI_Transmit+0x380>
 800877a:	bf00      	nop
 800877c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008780:	f7fa fa04 	bl	8002b8c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d803      	bhi.n	8008798 <HAL_SPI_Transmit+0x350>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d102      	bne.n	800879e <HAL_SPI_Transmit+0x356>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d114      	bne.n	80087c8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 ff44 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e02c      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f47f af78 	bne.w	80086c6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2200      	movs	r2, #0
 80087de:	2108      	movs	r1, #8
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 ffc3 	bl	800976c <SPI_WaitOnFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f2:	f043 0220 	orr.w	r2, r3, #32
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 ff15 	bl	800962c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008820:	7efb      	ldrb	r3, [r7, #27]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3330      	adds	r3, #48	; 0x30
 8008846:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008850:	d112      	bne.n	8008878 <HAL_SPI_Receive+0x4c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10e      	bne.n	8008878 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2204      	movs	r2, #4
 800885e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	4613      	mov	r3, r2
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f9ce 	bl	8008c10 <HAL_SPI_TransmitReceive>
 8008874:	4603      	mov	r3, r0
 8008876:	e1c7      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_SPI_Receive+0x5a>
 8008882:	2302      	movs	r3, #2
 8008884:	e1c0      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800888e:	f7fa f97d 	bl	8002b8c <HAL_GetTick>
 8008892:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	d007      	beq.n	80088b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80088a0:	2302      	movs	r3, #2
 80088a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088ac:	7ffb      	ldrb	r3, [r7, #31]
 80088ae:	e1ab      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_Receive+0x90>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d107      	bne.n	80088cc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088c8:	7ffb      	ldrb	r3, [r7, #31]
 80088ca:	e19d      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2204      	movs	r2, #4
 80088d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800891c:	d107      	bne.n	800892e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800892c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	4b94      	ldr	r3, [pc, #592]	; (8008b88 <HAL_SPI_Receive+0x35c>)
 8008936:	4013      	ands	r3, r2
 8008938:	88f9      	ldrh	r1, [r7, #6]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	430b      	orrs	r3, r1
 8008940:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0201 	orr.w	r2, r2, #1
 8008950:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895a:	d107      	bne.n	800896c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b0f      	cmp	r3, #15
 8008972:	d948      	bls.n	8008a06 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008974:	e040      	b.n	80089f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695a      	ldr	r2, [r3, #20]
 800897c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d014      	beq.n	80089b0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008990:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80089ae:	e023      	b.n	80089f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089b0:	f7fa f8ec 	bl	8002b8c <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d803      	bhi.n	80089c8 <HAL_SPI_Receive+0x19c>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d102      	bne.n	80089ce <HAL_SPI_Receive+0x1a2>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d114      	bne.n	80089f8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fe2c 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e107      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1b8      	bne.n	8008976 <HAL_SPI_Receive+0x14a>
 8008a04:	e0ed      	b.n	8008be2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	f240 80e2 	bls.w	8008bd4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008a10:	e05b      	b.n	8008aca <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d030      	beq.n	8008a82 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d014      	beq.n	8008a58 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3e:	1d1a      	adds	r2, r3, #4
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b02      	subs	r3, #2
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a56:	e038      	b.n	8008aca <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	8812      	ldrh	r2, [r2, #0]
 8008a60:	b292      	uxth	r2, r2
 8008a62:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a68:	1c9a      	adds	r2, r3, #2
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a80:	e023      	b.n	8008aca <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a82:	f7fa f883 	bl	8002b8c <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d803      	bhi.n	8008a9a <HAL_SPI_Receive+0x26e>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d102      	bne.n	8008aa0 <HAL_SPI_Receive+0x274>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d114      	bne.n	8008aca <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fdc3 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e09e      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d19d      	bne.n	8008a12 <HAL_SPI_Receive+0x1e6>
 8008ad6:	e084      	b.n	8008be2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d052      	beq.n	8008b8c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d014      	beq.n	8008b1e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008afe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b04:	1d1a      	adds	r2, r3, #4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b04      	subs	r3, #4
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b1c:	e05a      	b.n	8008bd4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2c:	d914      	bls.n	8008b58 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	8812      	ldrh	r2, [r2, #0]
 8008b36:	b292      	uxth	r2, r2
 8008b38:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b02      	subs	r3, #2
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b56:	e03d      	b.n	8008bd4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b86:	e025      	b.n	8008bd4 <HAL_SPI_Receive+0x3a8>
 8008b88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b8c:	f7f9 fffe 	bl	8002b8c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d803      	bhi.n	8008ba4 <HAL_SPI_Receive+0x378>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d102      	bne.n	8008baa <HAL_SPI_Receive+0x37e>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d114      	bne.n	8008bd4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fd3e 	bl	800962c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e019      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f af7b 	bne.w	8008ad8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fd22 	bl	800962c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8008c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08e      	sub	sp, #56	; 0x38
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3320      	adds	r3, #32
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3330      	adds	r3, #48	; 0x30
 8008c32:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x32>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e2ce      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c4a:	f7f9 ff9f 	bl	8002b8c <HAL_GetTick>
 8008c4e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008c50:	887b      	ldrh	r3, [r7, #2]
 8008c52:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c66:	7efb      	ldrb	r3, [r7, #27]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d014      	beq.n	8008c96 <HAL_SPI_TransmitReceive+0x86>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c72:	d106      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c7c:	7efb      	ldrb	r3, [r7, #27]
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d009      	beq.n	8008c96 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008c82:	2302      	movs	r3, #2
 8008c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c94:	e2a4      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x98>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x98>
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d109      	bne.n	8008cbc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cba:	e291      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d003      	beq.n	8008cd0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2205      	movs	r2, #5
 8008ccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	887a      	ldrh	r2, [r7, #2]
 8008ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	887a      	ldrh	r2, [r7, #2]
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	887a      	ldrh	r2, [r7, #2]
 8008cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	887a      	ldrh	r2, [r7, #2]
 8008d00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	4b9f      	ldr	r3, [pc, #636]	; (8008f94 <HAL_SPI_TransmitReceive+0x384>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	8879      	ldrh	r1, [r7, #2]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	430b      	orrs	r3, r1
 8008d22:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d3c:	d107      	bne.n	8008d4e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d970      	bls.n	8008e38 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d56:	e068      	b.n	8008e2a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d11a      	bne.n	8008d9c <HAL_SPI_TransmitReceive+0x18c>
 8008d66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d017      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7c:	1d1a      	adds	r2, r3, #4
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	f248 0308 	movw	r3, #32776	; 0x8008
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01a      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x1d2>
 8008dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dbc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc2:	1d1a      	adds	r2, r3, #4
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008de0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008de2:	f7f9 fed3 	bl	8002b8c <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d803      	bhi.n	8008dfa <HAL_SPI_TransmitReceive+0x1ea>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d102      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x1f0>
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d114      	bne.n	8008e2a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fc13 	bl	800962c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e1da      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d193      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x148>
 8008e30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d190      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x148>
 8008e36:	e1ac      	b.n	8009192 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	f240 81a0 	bls.w	8009182 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e42:	e0a9      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d139      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x2b6>
 8008e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d036      	beq.n	8008ec6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d91c      	bls.n	8008e98 <HAL_SPI_TransmitReceive+0x288>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d018      	beq.n	8008e98 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b02      	subs	r3, #2
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008e96:	e016      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9c:	881a      	ldrh	r2, [r3, #0]
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea6:	1c9a      	adds	r2, r3, #2
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d03a      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x33a>
 8008ed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d037      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d018      	beq.n	8008f1a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ef2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef8:	1d1a      	adds	r2, r3, #4
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b02      	subs	r3, #2
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008f18:	e017      	b.n	8008f4a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	8812      	ldrh	r2, [r2, #0]
 8008f22:	b292      	uxth	r2, r2
 8008f24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f2a:	1c9a      	adds	r2, r3, #2
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f48:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f4a:	f7f9 fe1f 	bl	8002b8c <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d803      	bhi.n	8008f62 <HAL_SPI_TransmitReceive+0x352>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d102      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x358>
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d117      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fb5f 	bl	800962c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e126      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
 8008f92:	bf00      	nop
 8008f94:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f47f af52 	bne.w	8008e44 <HAL_SPI_TransmitReceive+0x234>
 8008fa0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f47f af4e 	bne.w	8008e44 <HAL_SPI_TransmitReceive+0x234>
 8008fa8:	e0f3      	b.n	8009192 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d15a      	bne.n	800906e <HAL_SPI_TransmitReceive+0x45e>
 8008fb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d057      	beq.n	800906e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d91c      	bls.n	8008ffe <HAL_SPI_TransmitReceive+0x3ee>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc8:	2b40      	cmp	r3, #64	; 0x40
 8008fca:	d918      	bls.n	8008ffe <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6812      	ldr	r2, [r2, #0]
 8008fd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fdc:	1d1a      	adds	r2, r3, #4
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b04      	subs	r3, #4
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ffa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ffc:	e037      	b.n	800906e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009000:	2b01      	cmp	r3, #1
 8009002:	d91b      	bls.n	800903c <HAL_SPI_TransmitReceive+0x42c>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d017      	beq.n	800903c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009010:	881a      	ldrh	r2, [r3, #0]
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b02      	subs	r3, #2
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009038:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800903a:	e018      	b.n	800906e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3320      	adds	r3, #32
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800906c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05e      	beq.n	800913a <HAL_SPI_TransmitReceive+0x52a>
 800907c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d05b      	beq.n	800913a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d018      	beq.n	80090c2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009098:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800909a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b04      	subs	r3, #4
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80090c0:	e03b      	b.n	800913a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80090cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d0:	d918      	bls.n	8009104 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	8812      	ldrh	r2, [r2, #0]
 80090da:	b292      	uxth	r2, r2
 80090dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b02      	subs	r3, #2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009100:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009102:	e01a      	b.n	800913a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009110:	7812      	ldrb	r2, [r2, #0]
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009138:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913a:	f7f9 fd27 	bl	8002b8c <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009146:	429a      	cmp	r2, r3
 8009148:	d803      	bhi.n	8009152 <HAL_SPI_TransmitReceive+0x542>
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d102      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x548>
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	2b00      	cmp	r3, #0
 8009156:	d114      	bne.n	8009182 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fa67 	bl	800962c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e02e      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009182:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f af10 	bne.w	8008faa <HAL_SPI_TransmitReceive+0x39a>
 800918a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	f47f af0c 	bne.w	8008faa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2200      	movs	r2, #0
 800919a:	2108      	movs	r1, #8
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fae5 	bl	800976c <SPI_WaitOnFlagUntilTimeout>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ae:	f043 0220 	orr.w	r2, r3, #32
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fa37 	bl	800962c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e001      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80091dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3730      	adds	r7, #48	; 0x30
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009200:	6a3a      	ldr	r2, [r7, #32]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4013      	ands	r3, r2
 8009206:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009210:	2300      	movs	r3, #0
 8009212:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800921a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3330      	adds	r3, #48	; 0x30
 8009222:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d113      	bne.n	8009256 <HAL_SPI_IRQHandler+0x6e>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10e      	bne.n	8009256 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
    hspi->RxISR(hspi);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
    handled = 1UL;
 8009252:	2301      	movs	r3, #1
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10f      	bne.n	8009280 <HAL_SPI_IRQHandler+0x98>
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
    handled = 1UL;
 800927c:	2301      	movs	r3, #1
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10f      	bne.n	80092aa <HAL_SPI_IRQHandler+0xc2>
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
    handled = 1UL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 816f 	bne.w	8009590 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80a0 	beq.w	80093fe <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f042 0208 	orr.w	r2, r2, #8
 80092cc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f042 0210 	orr.w	r2, r2, #16
 80092dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0208 	bic.w	r2, r2, #8
 80092fc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00f      	beq.n	8009328 <HAL_SPI_IRQHandler+0x140>
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b04      	cmp	r3, #4
 800930c:	d004      	beq.n	8009318 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <HAL_SPI_IRQHandler+0x140>
 8009318:	7cfb      	ldrb	r3, [r7, #19]
 800931a:	2b03      	cmp	r3, #3
 800931c:	d059      	beq.n	80093d2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d154      	bne.n	80093d2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d13d      	bne.n	80093b2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009336:	e036      	b.n	80093a6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b0f      	cmp	r3, #15
 800933e:	d90b      	bls.n	8009358 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800934a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	1d1a      	adds	r2, r3, #4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	665a      	str	r2, [r3, #100]	; 0x64
 8009356:	e01d      	b.n	8009394 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	2b07      	cmp	r3, #7
 800935e:	d90b      	bls.n	8009378 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	b292      	uxth	r2, r2
 800936a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009370:	1c9a      	adds	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	665a      	str	r2, [r3, #100]	; 0x64
 8009376:	e00d      	b.n	8009394 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b01      	subs	r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1c2      	bne.n	8009338 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f93a 	bl	800962c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f90a 	bl	80095e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80093d0:	e0e3      	b.n	800959a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	2b05      	cmp	r3, #5
 80093d6:	d103      	bne.n	80093e0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f8f9 	bl	80095d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80093de:	e0d9      	b.n	8009594 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d103      	bne.n	80093ee <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f8e8 	bl	80095bc <HAL_SPI_RxCpltCallback>
    return;
 80093ec:	e0d2      	b.n	8009594 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80093ee:	7cfb      	ldrb	r3, [r7, #19]
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	f040 80cf 	bne.w	8009594 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f8d6 	bl	80095a8 <HAL_SPI_TxCpltCallback>
    return;
 80093fc:	e0ca      	b.n	8009594 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <HAL_SPI_IRQHandler+0x23c>
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d008      	beq.n	8009424 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699a      	ldr	r2, [r3, #24]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009420:	619a      	str	r2, [r3, #24]

    return;
 8009422:	e0ba      	b.n	800959a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80b5 	beq.w	800959a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00f      	beq.n	800945a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009440:	f043 0204 	orr.w	r2, r3, #4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009458:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00f      	beq.n	8009484 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946a:	f043 0201 	orr.w	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699a      	ldr	r2, [r3, #24]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009482:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00f      	beq.n	80094ae <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009494:	f043 0208 	orr.w	r2, r3, #8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	699a      	ldr	r2, [r3, #24]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0220 	orr.w	r2, r2, #32
 80094d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d05a      	beq.n	8009598 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0201 	bic.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6919      	ldr	r1, [r3, #16]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	4b28      	ldr	r3, [pc, #160]	; (80095a0 <HAL_SPI_IRQHandler+0x3b8>)
 80094fe:	400b      	ands	r3, r1
 8009500:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800950c:	d138      	bne.n	8009580 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800951c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d013      	beq.n	800954e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <HAL_SPI_IRQHandler+0x3bc>)
 800952c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009532:	4618      	mov	r0, r3
 8009534:	f7f9 ffe6 	bl	8003504 <HAL_DMA_Abort_IT>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009552:	2b00      	cmp	r3, #0
 8009554:	d020      	beq.n	8009598 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800955a:	4a12      	ldr	r2, [pc, #72]	; (80095a4 <HAL_SPI_IRQHandler+0x3bc>)
 800955c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009562:	4618      	mov	r0, r3
 8009564:	f7f9 ffce 	bl	8003504 <HAL_DMA_Abort_IT>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d014      	beq.n	8009598 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800957e:	e00b      	b.n	8009598 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f82b 	bl	80095e4 <HAL_SPI_ErrorCallback>
    return;
 800958e:	e003      	b.n	8009598 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009598:	bf00      	nop
  }
}
 800959a:	3728      	adds	r7, #40	; 0x28
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	fffffc94 	.word	0xfffffc94
 80095a4:	080095f9 	.word	0x080095f9

080095a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff ffe0 	bl	80095e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0208 	orr.w	r2, r2, #8
 800964a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0210 	orr.w	r2, r2, #16
 800965a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6919      	ldr	r1, [r3, #16]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4b3c      	ldr	r3, [pc, #240]	; (8009768 <SPI_CloseTransfer+0x13c>)
 8009678:	400b      	ands	r3, r1
 800967a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800968a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b04      	cmp	r3, #4
 8009696:	d014      	beq.n	80096c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00f      	beq.n	80096c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f042 0220 	orr.w	r2, r2, #32
 80096c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d014      	beq.n	80096f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00f      	beq.n	80096f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096de:	f043 0204 	orr.w	r2, r3, #4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00f      	beq.n	8009722 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009708:	f043 0201 	orr.w	r2, r3, #1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699a      	ldr	r2, [r3, #24]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009720:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00f      	beq.n	800974c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009732:	f043 0208 	orr.w	r2, r3, #8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800974a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	fffffc90 	.word	0xfffffc90

0800976c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800977c:	e010      	b.n	80097a0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800977e:	f7f9 fa05 	bl	8002b8c <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	429a      	cmp	r2, r3
 800978c:	d803      	bhi.n	8009796 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d102      	bne.n	800979c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e00f      	b.n	80097c0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695a      	ldr	r2, [r3, #20]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	4013      	ands	r3, r2
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	bf0c      	ite	eq
 80097b0:	2301      	moveq	r3, #1
 80097b2:	2300      	movne	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d0df      	beq.n	800977e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d4:	095b      	lsrs	r3, r3, #5
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	3307      	adds	r3, #7
 80097e6:	08db      	lsrs	r3, r3, #3
 80097e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e042      	b.n	8009896 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7f8 ffb8 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2224      	movs	r2, #36	; 0x24
 800982c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0201 	bic.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f82d 	bl	80098a0 <UART_SetConfig>
 8009846:	4603      	mov	r3, r0
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e022      	b.n	8009896 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fd81 	bl	800a360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800986c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800987c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fe08 	bl	800a4a4 <UART_CheckIdleState>
 8009894:	4603      	mov	r3, r0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a0:	b5b0      	push	{r4, r5, r7, lr}
 80098a2:	b08e      	sub	sp, #56	; 0x38
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4bbf      	ldr	r3, [pc, #764]	; (8009bcc <UART_SetConfig+0x32c>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4ab5      	ldr	r2, [pc, #724]	; (8009bd0 <UART_SetConfig+0x330>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d004      	beq.n	800990a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009906:	4313      	orrs	r3, r2
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	4bb0      	ldr	r3, [pc, #704]	; (8009bd4 <UART_SetConfig+0x334>)
 8009912:	4013      	ands	r3, r2
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800991a:	430b      	orrs	r3, r1
 800991c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f023 010f 	bic.w	r1, r3, #15
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4aa7      	ldr	r2, [pc, #668]	; (8009bd8 <UART_SetConfig+0x338>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d176      	bne.n	8009a2c <UART_SetConfig+0x18c>
 800993e:	4ba7      	ldr	r3, [pc, #668]	; (8009bdc <UART_SetConfig+0x33c>)
 8009940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009946:	2b28      	cmp	r3, #40	; 0x28
 8009948:	d86c      	bhi.n	8009a24 <UART_SetConfig+0x184>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0xb0>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	080099f5 	.word	0x080099f5
 8009954:	08009a25 	.word	0x08009a25
 8009958:	08009a25 	.word	0x08009a25
 800995c:	08009a25 	.word	0x08009a25
 8009960:	08009a25 	.word	0x08009a25
 8009964:	08009a25 	.word	0x08009a25
 8009968:	08009a25 	.word	0x08009a25
 800996c:	08009a25 	.word	0x08009a25
 8009970:	080099fd 	.word	0x080099fd
 8009974:	08009a25 	.word	0x08009a25
 8009978:	08009a25 	.word	0x08009a25
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a25 	.word	0x08009a25
 8009988:	08009a25 	.word	0x08009a25
 800998c:	08009a25 	.word	0x08009a25
 8009990:	08009a05 	.word	0x08009a05
 8009994:	08009a25 	.word	0x08009a25
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a25 	.word	0x08009a25
 80099a0:	08009a25 	.word	0x08009a25
 80099a4:	08009a25 	.word	0x08009a25
 80099a8:	08009a25 	.word	0x08009a25
 80099ac:	08009a25 	.word	0x08009a25
 80099b0:	08009a0d 	.word	0x08009a0d
 80099b4:	08009a25 	.word	0x08009a25
 80099b8:	08009a25 	.word	0x08009a25
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	08009a25 	.word	0x08009a25
 80099c4:	08009a25 	.word	0x08009a25
 80099c8:	08009a25 	.word	0x08009a25
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a15 	.word	0x08009a15
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009a25 	.word	0x08009a25
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a25 	.word	0x08009a25
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a25 	.word	0x08009a25
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e222      	b.n	8009e42 <UART_SetConfig+0x5a2>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e21e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e21a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e216      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a14:	2320      	movs	r3, #32
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e212      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e20e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e20a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a6b      	ldr	r2, [pc, #428]	; (8009be0 <UART_SetConfig+0x340>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d130      	bne.n	8009a98 <UART_SetConfig+0x1f8>
 8009a36:	4b69      	ldr	r3, [pc, #420]	; (8009bdc <UART_SetConfig+0x33c>)
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d826      	bhi.n	8009a90 <UART_SetConfig+0x1f0>
 8009a42:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0x1a8>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a61 	.word	0x08009a61
 8009a4c:	08009a69 	.word	0x08009a69
 8009a50:	08009a71 	.word	0x08009a71
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a81 	.word	0x08009a81
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e1ec      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e1e8      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e1e4      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e1e0      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a80:	2320      	movs	r3, #32
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e1dc      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e1d8      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a90:	2380      	movs	r3, #128	; 0x80
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e1d4      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a51      	ldr	r2, [pc, #324]	; (8009be4 <UART_SetConfig+0x344>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d130      	bne.n	8009b04 <UART_SetConfig+0x264>
 8009aa2:	4b4e      	ldr	r3, [pc, #312]	; (8009bdc <UART_SetConfig+0x33c>)
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	d826      	bhi.n	8009afc <UART_SetConfig+0x25c>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x214>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009add 	.word	0x08009add
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	2300      	movs	r3, #0
 8009ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad2:	e1b6      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e1b2      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009adc:	2308      	movs	r3, #8
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e1ae      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e1aa      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009aec:	2320      	movs	r3, #32
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e1a6      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e1a2      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e19e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a37      	ldr	r2, [pc, #220]	; (8009be8 <UART_SetConfig+0x348>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d130      	bne.n	8009b70 <UART_SetConfig+0x2d0>
 8009b0e:	4b33      	ldr	r3, [pc, #204]	; (8009bdc <UART_SetConfig+0x33c>)
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	d826      	bhi.n	8009b68 <UART_SetConfig+0x2c8>
 8009b1a:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <UART_SetConfig+0x280>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009b39 	.word	0x08009b39
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b49 	.word	0x08009b49
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b61 	.word	0x08009b61
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3e:	e180      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b40:	2304      	movs	r3, #4
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e17c      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b48:	2308      	movs	r3, #8
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e178      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b50:	2310      	movs	r3, #16
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e174      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b58:	2320      	movs	r3, #32
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e170      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e16c      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b68:	2380      	movs	r3, #128	; 0x80
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e168      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1d      	ldr	r2, [pc, #116]	; (8009bec <UART_SetConfig+0x34c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d142      	bne.n	8009c00 <UART_SetConfig+0x360>
 8009b7a:	4b18      	ldr	r3, [pc, #96]	; (8009bdc <UART_SetConfig+0x33c>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d838      	bhi.n	8009bf8 <UART_SetConfig+0x358>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x2ec>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba5 	.word	0x08009ba5
 8009b90:	08009bad 	.word	0x08009bad
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bf1 	.word	0x08009bf1
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009baa:	e14a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e146      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e142      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e13e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e13a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bcc:	cfff69f3 	.word	0xcfff69f3
 8009bd0:	58000c00 	.word	0x58000c00
 8009bd4:	11fff4ff 	.word	0x11fff4ff
 8009bd8:	40011000 	.word	0x40011000
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	40004400 	.word	0x40004400
 8009be4:	40004800 	.word	0x40004800
 8009be8:	40004c00 	.word	0x40004c00
 8009bec:	40005000 	.word	0x40005000
 8009bf0:	2340      	movs	r3, #64	; 0x40
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e124      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009bf8:	2380      	movs	r3, #128	; 0x80
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e120      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4acc      	ldr	r2, [pc, #816]	; (8009f38 <UART_SetConfig+0x698>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d176      	bne.n	8009cf8 <UART_SetConfig+0x458>
 8009c0a:	4bcc      	ldr	r3, [pc, #816]	; (8009f3c <UART_SetConfig+0x69c>)
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c12:	2b28      	cmp	r3, #40	; 0x28
 8009c14:	d86c      	bhi.n	8009cf0 <UART_SetConfig+0x450>
 8009c16:	a201      	add	r2, pc, #4	; (adr r2, 8009c1c <UART_SetConfig+0x37c>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009cc1 	.word	0x08009cc1
 8009c20:	08009cf1 	.word	0x08009cf1
 8009c24:	08009cf1 	.word	0x08009cf1
 8009c28:	08009cf1 	.word	0x08009cf1
 8009c2c:	08009cf1 	.word	0x08009cf1
 8009c30:	08009cf1 	.word	0x08009cf1
 8009c34:	08009cf1 	.word	0x08009cf1
 8009c38:	08009cf1 	.word	0x08009cf1
 8009c3c:	08009cc9 	.word	0x08009cc9
 8009c40:	08009cf1 	.word	0x08009cf1
 8009c44:	08009cf1 	.word	0x08009cf1
 8009c48:	08009cf1 	.word	0x08009cf1
 8009c4c:	08009cf1 	.word	0x08009cf1
 8009c50:	08009cf1 	.word	0x08009cf1
 8009c54:	08009cf1 	.word	0x08009cf1
 8009c58:	08009cf1 	.word	0x08009cf1
 8009c5c:	08009cd1 	.word	0x08009cd1
 8009c60:	08009cf1 	.word	0x08009cf1
 8009c64:	08009cf1 	.word	0x08009cf1
 8009c68:	08009cf1 	.word	0x08009cf1
 8009c6c:	08009cf1 	.word	0x08009cf1
 8009c70:	08009cf1 	.word	0x08009cf1
 8009c74:	08009cf1 	.word	0x08009cf1
 8009c78:	08009cf1 	.word	0x08009cf1
 8009c7c:	08009cd9 	.word	0x08009cd9
 8009c80:	08009cf1 	.word	0x08009cf1
 8009c84:	08009cf1 	.word	0x08009cf1
 8009c88:	08009cf1 	.word	0x08009cf1
 8009c8c:	08009cf1 	.word	0x08009cf1
 8009c90:	08009cf1 	.word	0x08009cf1
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009cf1 	.word	0x08009cf1
 8009c9c:	08009ce1 	.word	0x08009ce1
 8009ca0:	08009cf1 	.word	0x08009cf1
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf1 	.word	0x08009cf1
 8009cac:	08009cf1 	.word	0x08009cf1
 8009cb0:	08009cf1 	.word	0x08009cf1
 8009cb4:	08009cf1 	.word	0x08009cf1
 8009cb8:	08009cf1 	.word	0x08009cf1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e0bc      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e0b8      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e0b4      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e0b0      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e0ac      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e0a8      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e0a4      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a90      	ldr	r2, [pc, #576]	; (8009f40 <UART_SetConfig+0x6a0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d130      	bne.n	8009d64 <UART_SetConfig+0x4c4>
 8009d02:	4b8e      	ldr	r3, [pc, #568]	; (8009f3c <UART_SetConfig+0x69c>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	d826      	bhi.n	8009d5c <UART_SetConfig+0x4bc>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x474>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d2d 	.word	0x08009d2d
 8009d18:	08009d35 	.word	0x08009d35
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	08009d45 	.word	0x08009d45
 8009d24:	08009d4d 	.word	0x08009d4d
 8009d28:	08009d55 	.word	0x08009d55
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e086      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d34:	2304      	movs	r3, #4
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e082      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e07e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d44:	2310      	movs	r3, #16
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e07a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d4c:	2320      	movs	r3, #32
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e076      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e072      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d5c:	2380      	movs	r3, #128	; 0x80
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e06e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a76      	ldr	r2, [pc, #472]	; (8009f44 <UART_SetConfig+0x6a4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d130      	bne.n	8009dd0 <UART_SetConfig+0x530>
 8009d6e:	4b73      	ldr	r3, [pc, #460]	; (8009f3c <UART_SetConfig+0x69c>)
 8009d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d826      	bhi.n	8009dc8 <UART_SetConfig+0x528>
 8009d7a:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <UART_SetConfig+0x4e0>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009da1 	.word	0x08009da1
 8009d88:	08009da9 	.word	0x08009da9
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e050      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e04c      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e048      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e044      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009db8:	2320      	movs	r3, #32
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e040      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e03c      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e038      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a5c      	ldr	r2, [pc, #368]	; (8009f48 <UART_SetConfig+0x6a8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d130      	bne.n	8009e3c <UART_SetConfig+0x59c>
 8009dda:	4b58      	ldr	r3, [pc, #352]	; (8009f3c <UART_SetConfig+0x69c>)
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	d826      	bhi.n	8009e34 <UART_SetConfig+0x594>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <UART_SetConfig+0x54c>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e0d 	.word	0x08009e0d
 8009df4:	08009e15 	.word	0x08009e15
 8009df8:	08009e1d 	.word	0x08009e1d
 8009dfc:	08009e25 	.word	0x08009e25
 8009e00:	08009e2d 	.word	0x08009e2d
 8009e04:	2302      	movs	r3, #2
 8009e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0a:	e01a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e12:	e016      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1a:	e012      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e00e      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e24:	2320      	movs	r3, #32
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e00a      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e006      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e34:	2380      	movs	r3, #128	; 0x80
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e002      	b.n	8009e42 <UART_SetConfig+0x5a2>
 8009e3c:	2380      	movs	r3, #128	; 0x80
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a40      	ldr	r2, [pc, #256]	; (8009f48 <UART_SetConfig+0x6a8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f040 80ef 	bne.w	800a02c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	dc46      	bgt.n	8009ee4 <UART_SetConfig+0x644>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f2c0 8081 	blt.w	8009f5e <UART_SetConfig+0x6be>
 8009e5c:	3b02      	subs	r3, #2
 8009e5e:	2b1e      	cmp	r3, #30
 8009e60:	d87d      	bhi.n	8009f5e <UART_SetConfig+0x6be>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x5c8>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009eeb 	.word	0x08009eeb
 8009e6c:	08009f5f 	.word	0x08009f5f
 8009e70:	08009ef3 	.word	0x08009ef3
 8009e74:	08009f5f 	.word	0x08009f5f
 8009e78:	08009f5f 	.word	0x08009f5f
 8009e7c:	08009f5f 	.word	0x08009f5f
 8009e80:	08009f03 	.word	0x08009f03
 8009e84:	08009f5f 	.word	0x08009f5f
 8009e88:	08009f5f 	.word	0x08009f5f
 8009e8c:	08009f5f 	.word	0x08009f5f
 8009e90:	08009f5f 	.word	0x08009f5f
 8009e94:	08009f5f 	.word	0x08009f5f
 8009e98:	08009f5f 	.word	0x08009f5f
 8009e9c:	08009f5f 	.word	0x08009f5f
 8009ea0:	08009f13 	.word	0x08009f13
 8009ea4:	08009f5f 	.word	0x08009f5f
 8009ea8:	08009f5f 	.word	0x08009f5f
 8009eac:	08009f5f 	.word	0x08009f5f
 8009eb0:	08009f5f 	.word	0x08009f5f
 8009eb4:	08009f5f 	.word	0x08009f5f
 8009eb8:	08009f5f 	.word	0x08009f5f
 8009ebc:	08009f5f 	.word	0x08009f5f
 8009ec0:	08009f5f 	.word	0x08009f5f
 8009ec4:	08009f5f 	.word	0x08009f5f
 8009ec8:	08009f5f 	.word	0x08009f5f
 8009ecc:	08009f5f 	.word	0x08009f5f
 8009ed0:	08009f5f 	.word	0x08009f5f
 8009ed4:	08009f5f 	.word	0x08009f5f
 8009ed8:	08009f5f 	.word	0x08009f5f
 8009edc:	08009f5f 	.word	0x08009f5f
 8009ee0:	08009f51 	.word	0x08009f51
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d036      	beq.n	8009f56 <UART_SetConfig+0x6b6>
 8009ee8:	e039      	b.n	8009f5e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009eea:	f7fd fd85 	bl	80079f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009eee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef0:	e03b      	b.n	8009f6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef2:	f107 0314 	add.w	r3, r7, #20
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fd94 	bl	8007a24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f00:	e033      	b.n	8009f6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fd fee0 	bl	8007ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f10:	e02b      	b.n	8009f6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f12:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <UART_SetConfig+0x69c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f1e:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <UART_SetConfig+0x69c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	08db      	lsrs	r3, r3, #3
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	4a08      	ldr	r2, [pc, #32]	; (8009f4c <UART_SetConfig+0x6ac>)
 8009f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f30:	e01b      	b.n	8009f6a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <UART_SetConfig+0x6ac>)
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f36:	e018      	b.n	8009f6a <UART_SetConfig+0x6ca>
 8009f38:	40011400 	.word	0x40011400
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	40007800 	.word	0x40007800
 8009f44:	40007c00 	.word	0x40007c00
 8009f48:	58000c00 	.word	0x58000c00
 8009f4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f50:	4bc4      	ldr	r3, [pc, #784]	; (800a264 <UART_SetConfig+0x9c4>)
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f54:	e009      	b.n	8009f6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f5c:	e005      	b.n	8009f6a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 81da 	beq.w	800a326 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	4abc      	ldr	r2, [pc, #752]	; (800a268 <UART_SetConfig+0x9c8>)
 8009f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	4413      	add	r3, r2
 8009f90:	6a3a      	ldr	r2, [r7, #32]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d305      	bcc.n	8009fa2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9c:	6a3a      	ldr	r2, [r7, #32]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d903      	bls.n	8009faa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fa8:	e1bd      	b.n	800a326 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	4618      	mov	r0, r3
 8009fae:	f04f 0100 	mov.w	r1, #0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	4aac      	ldr	r2, [pc, #688]	; (800a268 <UART_SetConfig+0x9c8>)
 8009fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	f04f 0300 	mov.w	r3, #0
 8009fc2:	f7f6 f989 	bl	80002d8 <__aeabi_uldivmod>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4610      	mov	r0, r2
 8009fcc:	4619      	mov	r1, r3
 8009fce:	f04f 0200 	mov.w	r2, #0
 8009fd2:	f04f 0300 	mov.w	r3, #0
 8009fd6:	020b      	lsls	r3, r1, #8
 8009fd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fdc:	0202      	lsls	r2, r0, #8
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	6849      	ldr	r1, [r1, #4]
 8009fe2:	0849      	lsrs	r1, r1, #1
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	f04f 0100 	mov.w	r1, #0
 8009fea:	1814      	adds	r4, r2, r0
 8009fec:	eb43 0501 	adc.w	r5, r3, r1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	f7f6 f96b 	bl	80002d8 <__aeabi_uldivmod>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4613      	mov	r3, r2
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a010:	d308      	bcc.n	800a024 <UART_SetConfig+0x784>
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a018:	d204      	bcs.n	800a024 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a020:	60da      	str	r2, [r3, #12]
 800a022:	e180      	b.n	800a326 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a02a:	e17c      	b.n	800a326 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a034:	f040 80be 	bne.w	800a1b4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a038:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	dc49      	bgt.n	800a0d4 <UART_SetConfig+0x834>
 800a040:	2b00      	cmp	r3, #0
 800a042:	db7c      	blt.n	800a13e <UART_SetConfig+0x89e>
 800a044:	2b20      	cmp	r3, #32
 800a046:	d87a      	bhi.n	800a13e <UART_SetConfig+0x89e>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <UART_SetConfig+0x7b0>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a0db 	.word	0x0800a0db
 800a054:	0800a0e3 	.word	0x0800a0e3
 800a058:	0800a13f 	.word	0x0800a13f
 800a05c:	0800a13f 	.word	0x0800a13f
 800a060:	0800a0eb 	.word	0x0800a0eb
 800a064:	0800a13f 	.word	0x0800a13f
 800a068:	0800a13f 	.word	0x0800a13f
 800a06c:	0800a13f 	.word	0x0800a13f
 800a070:	0800a0fb 	.word	0x0800a0fb
 800a074:	0800a13f 	.word	0x0800a13f
 800a078:	0800a13f 	.word	0x0800a13f
 800a07c:	0800a13f 	.word	0x0800a13f
 800a080:	0800a13f 	.word	0x0800a13f
 800a084:	0800a13f 	.word	0x0800a13f
 800a088:	0800a13f 	.word	0x0800a13f
 800a08c:	0800a13f 	.word	0x0800a13f
 800a090:	0800a10b 	.word	0x0800a10b
 800a094:	0800a13f 	.word	0x0800a13f
 800a098:	0800a13f 	.word	0x0800a13f
 800a09c:	0800a13f 	.word	0x0800a13f
 800a0a0:	0800a13f 	.word	0x0800a13f
 800a0a4:	0800a13f 	.word	0x0800a13f
 800a0a8:	0800a13f 	.word	0x0800a13f
 800a0ac:	0800a13f 	.word	0x0800a13f
 800a0b0:	0800a13f 	.word	0x0800a13f
 800a0b4:	0800a13f 	.word	0x0800a13f
 800a0b8:	0800a13f 	.word	0x0800a13f
 800a0bc:	0800a13f 	.word	0x0800a13f
 800a0c0:	0800a13f 	.word	0x0800a13f
 800a0c4:	0800a13f 	.word	0x0800a13f
 800a0c8:	0800a13f 	.word	0x0800a13f
 800a0cc:	0800a13f 	.word	0x0800a13f
 800a0d0:	0800a131 	.word	0x0800a131
 800a0d4:	2b40      	cmp	r3, #64	; 0x40
 800a0d6:	d02e      	beq.n	800a136 <UART_SetConfig+0x896>
 800a0d8:	e031      	b.n	800a13e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0da:	f7fc fd21 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
 800a0de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0e0:	e033      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0e2:	f7fc fd33 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 800a0e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0e8:	e02f      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fd fc98 	bl	8007a24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f8:	e027      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0fa:	f107 0308 	add.w	r3, r7, #8
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fd fde4 	bl	8007ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a108:	e01f      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a10a:	4b58      	ldr	r3, [pc, #352]	; (800a26c <UART_SetConfig+0x9cc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d009      	beq.n	800a12a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a116:	4b55      	ldr	r3, [pc, #340]	; (800a26c <UART_SetConfig+0x9cc>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	08db      	lsrs	r3, r3, #3
 800a11c:	f003 0303 	and.w	r3, r3, #3
 800a120:	4a53      	ldr	r2, [pc, #332]	; (800a270 <UART_SetConfig+0x9d0>)
 800a122:	fa22 f303 	lsr.w	r3, r2, r3
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a128:	e00f      	b.n	800a14a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a12a:	4b51      	ldr	r3, [pc, #324]	; (800a270 <UART_SetConfig+0x9d0>)
 800a12c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a12e:	e00c      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a130:	4b4c      	ldr	r3, [pc, #304]	; (800a264 <UART_SetConfig+0x9c4>)
 800a132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a134:	e009      	b.n	800a14a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a13c:	e005      	b.n	800a14a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80ea 	beq.w	800a326 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	4a44      	ldr	r2, [pc, #272]	; (800a268 <UART_SetConfig+0x9c8>)
 800a158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	fbb3 f3f2 	udiv	r3, r3, r2
 800a164:	005a      	lsls	r2, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	085b      	lsrs	r3, r3, #1
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	fbb2 f3f3 	udiv	r3, r2, r3
 800a176:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	2b0f      	cmp	r3, #15
 800a17c:	d916      	bls.n	800a1ac <UART_SetConfig+0x90c>
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a184:	d212      	bcs.n	800a1ac <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	b29b      	uxth	r3, r3
 800a18a:	f023 030f 	bic.w	r3, r3, #15
 800a18e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	b29b      	uxth	r3, r3
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a1a8:	60da      	str	r2, [r3, #12]
 800a1aa:	e0bc      	b.n	800a326 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1b2:	e0b8      	b.n	800a326 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	dc4b      	bgt.n	800a254 <UART_SetConfig+0x9b4>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f2c0 8087 	blt.w	800a2d0 <UART_SetConfig+0xa30>
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	f200 8084 	bhi.w	800a2d0 <UART_SetConfig+0xa30>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <UART_SetConfig+0x930>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a25b 	.word	0x0800a25b
 800a1d4:	0800a275 	.word	0x0800a275
 800a1d8:	0800a2d1 	.word	0x0800a2d1
 800a1dc:	0800a2d1 	.word	0x0800a2d1
 800a1e0:	0800a27d 	.word	0x0800a27d
 800a1e4:	0800a2d1 	.word	0x0800a2d1
 800a1e8:	0800a2d1 	.word	0x0800a2d1
 800a1ec:	0800a2d1 	.word	0x0800a2d1
 800a1f0:	0800a28d 	.word	0x0800a28d
 800a1f4:	0800a2d1 	.word	0x0800a2d1
 800a1f8:	0800a2d1 	.word	0x0800a2d1
 800a1fc:	0800a2d1 	.word	0x0800a2d1
 800a200:	0800a2d1 	.word	0x0800a2d1
 800a204:	0800a2d1 	.word	0x0800a2d1
 800a208:	0800a2d1 	.word	0x0800a2d1
 800a20c:	0800a2d1 	.word	0x0800a2d1
 800a210:	0800a29d 	.word	0x0800a29d
 800a214:	0800a2d1 	.word	0x0800a2d1
 800a218:	0800a2d1 	.word	0x0800a2d1
 800a21c:	0800a2d1 	.word	0x0800a2d1
 800a220:	0800a2d1 	.word	0x0800a2d1
 800a224:	0800a2d1 	.word	0x0800a2d1
 800a228:	0800a2d1 	.word	0x0800a2d1
 800a22c:	0800a2d1 	.word	0x0800a2d1
 800a230:	0800a2d1 	.word	0x0800a2d1
 800a234:	0800a2d1 	.word	0x0800a2d1
 800a238:	0800a2d1 	.word	0x0800a2d1
 800a23c:	0800a2d1 	.word	0x0800a2d1
 800a240:	0800a2d1 	.word	0x0800a2d1
 800a244:	0800a2d1 	.word	0x0800a2d1
 800a248:	0800a2d1 	.word	0x0800a2d1
 800a24c:	0800a2d1 	.word	0x0800a2d1
 800a250:	0800a2c3 	.word	0x0800a2c3
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d037      	beq.n	800a2c8 <UART_SetConfig+0xa28>
 800a258:	e03a      	b.n	800a2d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a25a:	f7fc fc61 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
 800a25e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a260:	e03c      	b.n	800a2dc <UART_SetConfig+0xa3c>
 800a262:	bf00      	nop
 800a264:	003d0900 	.word	0x003d0900
 800a268:	0800cb0c 	.word	0x0800cb0c
 800a26c:	58024400 	.word	0x58024400
 800a270:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a274:	f7fc fc6a 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 800a278:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a27a:	e02f      	b.n	800a2dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a27c:	f107 0314 	add.w	r3, r7, #20
 800a280:	4618      	mov	r0, r3
 800a282:	f7fd fbcf 	bl	8007a24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a28a:	e027      	b.n	800a2dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28c:	f107 0308 	add.w	r3, r7, #8
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fd1b 	bl	8007ccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a29a:	e01f      	b.n	800a2dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a29c:	4b2c      	ldr	r3, [pc, #176]	; (800a350 <UART_SetConfig+0xab0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2a8:	4b29      	ldr	r3, [pc, #164]	; (800a350 <UART_SetConfig+0xab0>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	08db      	lsrs	r3, r3, #3
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	4a28      	ldr	r2, [pc, #160]	; (800a354 <UART_SetConfig+0xab4>)
 800a2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2ba:	e00f      	b.n	800a2dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a2bc:	4b25      	ldr	r3, [pc, #148]	; (800a354 <UART_SetConfig+0xab4>)
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c0:	e00c      	b.n	800a2dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2c2:	4b25      	ldr	r3, [pc, #148]	; (800a358 <UART_SetConfig+0xab8>)
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c6:	e009      	b.n	800a2dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ce:	e005      	b.n	800a2dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2da:	bf00      	nop
    }

    if (pclk != 0U)
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d021      	beq.n	800a326 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	4a1d      	ldr	r2, [pc, #116]	; (800a35c <UART_SetConfig+0xabc>)
 800a2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	441a      	add	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	fbb2 f3f3 	udiv	r3, r2, r3
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	2b0f      	cmp	r3, #15
 800a30a:	d909      	bls.n	800a320 <UART_SetConfig+0xa80>
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a312:	d205      	bcs.n	800a320 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	e002      	b.n	800a326 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a342:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a346:	4618      	mov	r0, r3
 800a348:	3738      	adds	r7, #56	; 0x38
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bdb0      	pop	{r4, r5, r7, pc}
 800a34e:	bf00      	nop
 800a350:	58024400 	.word	0x58024400
 800a354:	03d09000 	.word	0x03d09000
 800a358:	003d0900 	.word	0x003d0900
 800a35c:	0800cb0c 	.word	0x0800cb0c

0800a360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00a      	beq.n	800a38a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00a      	beq.n	800a3ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d2:	f003 0308 	and.w	r3, r3, #8
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00a      	beq.n	800a3f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00a      	beq.n	800a412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01a      	beq.n	800a476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a45e:	d10a      	bne.n	800a476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	605a      	str	r2, [r3, #4]
  }
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4b4:	f7f8 fb6a 	bl	8002b8c <HAL_GetTick>
 800a4b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	d10e      	bne.n	800a4e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f82f 	bl	800a53a <UART_WaitOnFlagUntilTimeout>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e025      	b.n	800a532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d10e      	bne.n	800a512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f819 	bl	800a53a <UART_WaitOnFlagUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e00f      	b.n	800a532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b09c      	sub	sp, #112	; 0x70
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	603b      	str	r3, [r7, #0]
 800a546:	4613      	mov	r3, r2
 800a548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54a:	e0a9      	b.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a54c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	f000 80a5 	beq.w	800a6a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a556:	f7f8 fb19 	bl	8002b8c <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <UART_WaitOnFlagUntilTimeout+0x32>
 800a566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d140      	bne.n	800a5ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a57c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a580:	667b      	str	r3, [r7, #100]	; 0x64
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a58c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e6      	bne.n	800a56c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e5      	bne.n	800a59e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e069      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d051      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a60a:	d149      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a614:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	e853 3f00 	ldrex	r3, [r3]
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a62a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a634:	637b      	str	r3, [r7, #52]	; 0x34
 800a636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e6      	bne.n	800a616 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3308      	adds	r3, #8
 800a64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	613b      	str	r3, [r7, #16]
   return(result);
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	f023 0301 	bic.w	r3, r3, #1
 800a65e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3308      	adds	r3, #8
 800a666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a668:	623a      	str	r2, [r7, #32]
 800a66a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	69f9      	ldr	r1, [r7, #28]
 800a66e:	6a3a      	ldr	r2, [r7, #32]
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	61bb      	str	r3, [r7, #24]
   return(result);
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e5      	bne.n	800a648 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e010      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69da      	ldr	r2, [r3, #28]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	f43f af46 	beq.w	800a54c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3770      	adds	r7, #112	; 0x70
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b085      	sub	sp, #20
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e027      	b.n	800a730 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2224      	movs	r2, #36	; 0x24
 800a6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0201 	bic.w	r2, r2, #1
 800a706:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a70e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a750:	2302      	movs	r3, #2
 800a752:	e02d      	b.n	800a7b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2224      	movs	r2, #36	; 0x24
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0201 	bic.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f84f 	bl	800a834 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e02d      	b.n	800a82c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2224      	movs	r2, #36	; 0x24
 800a7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f811 	bl	800a834 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a840:	2b00      	cmp	r3, #0
 800a842:	d108      	bne.n	800a856 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a854:	e031      	b.n	800a8ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a856:	2310      	movs	r3, #16
 800a858:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a85a:	2310      	movs	r3, #16
 800a85c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	0e5b      	lsrs	r3, r3, #25
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	0f5b      	lsrs	r3, r3, #29
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f003 0307 	and.w	r3, r3, #7
 800a87c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	7b3a      	ldrb	r2, [r7, #12]
 800a882:	4911      	ldr	r1, [pc, #68]	; (800a8c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a884:	5c8a      	ldrb	r2, [r1, r2]
 800a886:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a88a:	7b3a      	ldrb	r2, [r7, #12]
 800a88c:	490f      	ldr	r1, [pc, #60]	; (800a8cc <UARTEx_SetNbDataToProcess+0x98>)
 800a88e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a890:	fb93 f3f2 	sdiv	r3, r3, r2
 800a894:	b29a      	uxth	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	7b7a      	ldrb	r2, [r7, #13]
 800a8a0:	4909      	ldr	r1, [pc, #36]	; (800a8c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a8a2:	5c8a      	ldrb	r2, [r1, r2]
 800a8a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8a8:	7b7a      	ldrb	r2, [r7, #13]
 800a8aa:	4908      	ldr	r1, [pc, #32]	; (800a8cc <UARTEx_SetNbDataToProcess+0x98>)
 800a8ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	0800cb24 	.word	0x0800cb24
 800a8cc:	0800cb2c 	.word	0x0800cb2c

0800a8d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	f107 001c 	add.w	r0, r7, #28
 800a8de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d120      	bne.n	800a92a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <USB_CoreInit+0xd4>)
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d105      	bne.n	800a91e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 faa8 	bl	800ae74 <USB_CoreReset>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	e01a      	b.n	800a960 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa9c 	bl	800ae74 <USB_CoreReset>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	639a      	str	r2, [r3, #56]	; 0x38
 800a952:	e005      	b.n	800a960 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	2b01      	cmp	r3, #1
 800a964:	d116      	bne.n	800a994 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <USB_CoreInit+0xd8>)
 800a976:	4313      	orrs	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f043 0206 	orr.w	r2, r3, #6
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f043 0220 	orr.w	r2, r3, #32
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9a0:	b004      	add	sp, #16
 800a9a2:	4770      	bx	lr
 800a9a4:	ffbdffbf 	.word	0xffbdffbf
 800a9a8:	03ee0000 	.word	0x03ee0000

0800a9ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f023 0201 	bic.w	r2, r3, #1
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9ea:	78fb      	ldrb	r3, [r7, #3]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d115      	bne.n	800aa1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	f7f8 f8d1 	bl	8002ba4 <HAL_Delay>
      ms++;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fa25 	bl	800ae58 <USB_GetMode>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d01e      	beq.n	800aa52 <USB_SetCurrentMode+0x84>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b31      	cmp	r3, #49	; 0x31
 800aa18:	d9f0      	bls.n	800a9fc <USB_SetCurrentMode+0x2e>
 800aa1a:	e01a      	b.n	800aa52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d115      	bne.n	800aa4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa2e:	2001      	movs	r0, #1
 800aa30:	f7f8 f8b8 	bl	8002ba4 <HAL_Delay>
      ms++;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3301      	adds	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fa0c 	bl	800ae58 <USB_GetMode>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <USB_SetCurrentMode+0x84>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b31      	cmp	r3, #49	; 0x31
 800aa4a:	d9f0      	bls.n	800aa2e <USB_SetCurrentMode+0x60>
 800aa4c:	e001      	b.n	800aa52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e005      	b.n	800aa5e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b32      	cmp	r3, #50	; 0x32
 800aa56:	d101      	bne.n	800aa5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e000      	b.n	800aa5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa68:	b084      	sub	sp, #16
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa82:	2300      	movs	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	e009      	b.n	800aa9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	3340      	adds	r3, #64	; 0x40
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	613b      	str	r3, [r7, #16]
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2b0e      	cmp	r3, #14
 800aaa0:	d9f2      	bls.n	800aa88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d11c      	bne.n	800aae2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab6:	f043 0302 	orr.w	r3, r3, #2
 800aaba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e005      	b.n	800aaee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	4619      	mov	r1, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab08:	461a      	mov	r2, r3
 800ab0a:	680b      	ldr	r3, [r1, #0]
 800ab0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d10c      	bne.n	800ab2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d104      	bne.n	800ab24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f961 	bl	800ade4 <USB_SetDevSpeed>
 800ab22:	e008      	b.n	800ab36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab24:	2101      	movs	r1, #1
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f95c 	bl	800ade4 <USB_SetDevSpeed>
 800ab2c:	e003      	b.n	800ab36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab2e:	2103      	movs	r1, #3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f957 	bl	800ade4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab36:	2110      	movs	r1, #16
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f8f3 	bl	800ad24 <USB_FlushTxFifo>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f91d 	bl	800ad88 <USB_FlushRxFifo>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5e:	461a      	mov	r2, r3
 800ab60:	2300      	movs	r3, #0
 800ab62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	461a      	mov	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	613b      	str	r3, [r7, #16]
 800ab80:	e043      	b.n	800ac0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab98:	d118      	bne.n	800abcc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abac:	461a      	mov	r2, r3
 800abae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	e013      	b.n	800abde <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	461a      	mov	r2, r3
 800abc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	e008      	b.n	800abde <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd8:	461a      	mov	r2, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abea:	461a      	mov	r2, r3
 800abec:	2300      	movs	r3, #0
 800abee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfc:	461a      	mov	r2, r3
 800abfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	3301      	adds	r3, #1
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d3b7      	bcc.n	800ab82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	e043      	b.n	800aca0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac2e:	d118      	bne.n	800ac62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10a      	bne.n	800ac4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac42:	461a      	mov	r2, r3
 800ac44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	e013      	b.n	800ac74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	e008      	b.n	800ac74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6e:	461a      	mov	r2, r3
 800ac70:	2300      	movs	r3, #0
 800ac72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac80:	461a      	mov	r2, r3
 800ac82:	2300      	movs	r3, #0
 800ac84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	461a      	mov	r2, r3
 800ac94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d3b7      	bcc.n	800ac18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800acc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	2b00      	cmp	r3, #0
 800acce:	d105      	bne.n	800acdc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	f043 0210 	orr.w	r2, r3, #16
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <USB_DevInit+0x2b4>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d005      	beq.n	800acfa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f043 0208 	orr.w	r2, r3, #8
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d105      	bne.n	800ad0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	699a      	ldr	r2, [r3, #24]
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <USB_DevInit+0x2b8>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad18:	b004      	add	sp, #16
 800ad1a:	4770      	bx	lr
 800ad1c:	803c3800 	.word	0x803c3800
 800ad20:	40000004 	.word	0x40000004

0800ad24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3301      	adds	r3, #1
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	4a12      	ldr	r2, [pc, #72]	; (800ad84 <USB_FlushTxFifo+0x60>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d901      	bls.n	800ad42 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e01a      	b.n	800ad78 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	daf3      	bge.n	800ad32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	019b      	lsls	r3, r3, #6
 800ad52:	f043 0220 	orr.w	r2, r3, #32
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	4a08      	ldr	r2, [pc, #32]	; (800ad84 <USB_FlushTxFifo+0x60>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d901      	bls.n	800ad6a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e006      	b.n	800ad78 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	f003 0320 	and.w	r3, r3, #32
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d0f1      	beq.n	800ad5a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	00030d40 	.word	0x00030d40

0800ad88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3301      	adds	r3, #1
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	4a11      	ldr	r2, [pc, #68]	; (800ade0 <USB_FlushRxFifo+0x58>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d901      	bls.n	800ada4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e017      	b.n	800add4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	daf3      	bge.n	800ad94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2210      	movs	r2, #16
 800adb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3301      	adds	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <USB_FlushRxFifo+0x58>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d901      	bls.n	800adc6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e006      	b.n	800add4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b10      	cmp	r3, #16
 800add0:	d0f1      	beq.n	800adb6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	00030d40 	.word	0x00030d40

0800ade4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	78fb      	ldrb	r3, [r7, #3]
 800adfe:	68f9      	ldr	r1, [r7, #12]
 800ae00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae04:	4313      	orrs	r3, r2
 800ae06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae44:	f043 0302 	orr.w	r3, r3, #2
 800ae48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	f003 0301 	and.w	r3, r3, #1
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	4a13      	ldr	r2, [pc, #76]	; (800aed4 <USB_CoreReset+0x60>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d901      	bls.n	800ae90 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e01a      	b.n	800aec6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	daf3      	bge.n	800ae80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	f043 0201 	orr.w	r2, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <USB_CoreReset+0x60>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d901      	bls.n	800aeb8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e006      	b.n	800aec6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d0f1      	beq.n	800aea8 <USB_CoreReset+0x34>

  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	00030d40 	.word	0x00030d40

0800aed8 <__libc_init_array>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	4d0d      	ldr	r5, [pc, #52]	; (800af10 <__libc_init_array+0x38>)
 800aedc:	4c0d      	ldr	r4, [pc, #52]	; (800af14 <__libc_init_array+0x3c>)
 800aede:	1b64      	subs	r4, r4, r5
 800aee0:	10a4      	asrs	r4, r4, #2
 800aee2:	2600      	movs	r6, #0
 800aee4:	42a6      	cmp	r6, r4
 800aee6:	d109      	bne.n	800aefc <__libc_init_array+0x24>
 800aee8:	4d0b      	ldr	r5, [pc, #44]	; (800af18 <__libc_init_array+0x40>)
 800aeea:	4c0c      	ldr	r4, [pc, #48]	; (800af1c <__libc_init_array+0x44>)
 800aeec:	f000 f820 	bl	800af30 <_init>
 800aef0:	1b64      	subs	r4, r4, r5
 800aef2:	10a4      	asrs	r4, r4, #2
 800aef4:	2600      	movs	r6, #0
 800aef6:	42a6      	cmp	r6, r4
 800aef8:	d105      	bne.n	800af06 <__libc_init_array+0x2e>
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	f855 3b04 	ldr.w	r3, [r5], #4
 800af00:	4798      	blx	r3
 800af02:	3601      	adds	r6, #1
 800af04:	e7ee      	b.n	800aee4 <__libc_init_array+0xc>
 800af06:	f855 3b04 	ldr.w	r3, [r5], #4
 800af0a:	4798      	blx	r3
 800af0c:	3601      	adds	r6, #1
 800af0e:	e7f2      	b.n	800aef6 <__libc_init_array+0x1e>
 800af10:	0800cb3c 	.word	0x0800cb3c
 800af14:	0800cb3c 	.word	0x0800cb3c
 800af18:	0800cb3c 	.word	0x0800cb3c
 800af1c:	0800cb40 	.word	0x0800cb40

0800af20 <memset>:
 800af20:	4402      	add	r2, r0
 800af22:	4603      	mov	r3, r0
 800af24:	4293      	cmp	r3, r2
 800af26:	d100      	bne.n	800af2a <memset+0xa>
 800af28:	4770      	bx	lr
 800af2a:	f803 1b01 	strb.w	r1, [r3], #1
 800af2e:	e7f9      	b.n	800af24 <memset+0x4>

0800af30 <_init>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr

0800af3c <_fini>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr
