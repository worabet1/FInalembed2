
Finalembed2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001400  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af18  0800af18  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af20  0800af20  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800af28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800af88  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800afe8  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000720  24000120  0800b048  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000840  0800b048  00020840  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c43b  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004109  00000000  00000000  0004c589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  00050698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012f0  00000000  00000000  00051ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ba80  00000000  00000000  00052db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bd16  00000000  00000000  0008e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001857c6  00000000  00000000  000aa54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0022fd14  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055c4  00000000  00000000  0022fd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009b00 	.word	0x08009b00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	08009b00 	.word	0x08009b00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af02      	add	r7, sp, #8
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000722:	88f8      	ldrh	r0, [r7, #6]
 8000724:	88b9      	ldrh	r1, [r7, #4]
 8000726:	887a      	ldrh	r2, [r7, #2]
 8000728:	883c      	ldrh	r4, [r7, #0]
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f000 fa8c 	bl	8000c4c <ST7735_FillRectangle>
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fillScreen+0x2c>)
 8000748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <fillScreen+0x30>)
 800074e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	460b      	mov	r3, r1
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd2 	bl	8000704 <fillRect>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000182 	.word	0x24000182
 800076c:	24000186 	.word	0x24000186

08000770 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <ST7735_Select+0x14>)
 800077c:	f004 fb10 	bl	8004da0 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00

08000788 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <ST7735_Unselect+0x14>)
 8000794:	f004 fb04 	bl	8004da0 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58020c00 	.word	0x58020c00

080007a0 <ST7735_Reset>:

void ST7735_Reset()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_Reset+0x28>)
 80007ac:	f004 faf8 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f001 fcbd 	bl	8002130 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ST7735_Reset+0x28>)
 80007be:	f004 faef 	bl	8004da0 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58021800 	.word	0x58021800

080007cc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <ST7735_WriteCommand+0x2c>)
 80007de:	f004 fadf 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ST7735_WriteCommand+0x30>)
 80007ec:	f007 f8f2 	bl	80079d4 <HAL_SPI_Transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	2400063c 	.word	0x2400063c

08000800 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <ST7735_WriteData+0x30>)
 8000812:	f004 fac5 	bl	8004da0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <ST7735_WriteData+0x34>)
 8000822:	f007 f8d7 	bl	80079d4 <HAL_SPI_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58020c00 	.word	0x58020c00
 8000834:	2400063c 	.word	0x2400063c

08000838 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800084a:	e034      	b.n	80008b6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffb7 	bl	80007cc <ST7735_WriteCommand>

        numArgs = *addr++;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	b29b      	uxth	r3, r3
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000878:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800087a:	7abb      	ldrb	r3, [r7, #10]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffbb 	bl	8000800 <ST7735_WriteData>
            addr += numArgs;
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00e      	beq.n	80008b6 <DisplayInit+0x7e>
            ms = *addr++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d102      	bne.n	80008ae <DisplayInit+0x76>
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fc3d 	bl	8002130 <HAL_Delay>
    while(numCommands--) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	73fa      	strb	r2, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1c5      	bne.n	800084c <DisplayInit+0x14>
        }
    }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4604      	mov	r4, r0
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4623      	mov	r3, r4
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4603      	mov	r3, r0
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	717b      	strb	r3, [r7, #5]
 80008e6:	4613      	mov	r3, r2
 80008e8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f7ff ff6e 	bl	80007cc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008f0:	2300      	movs	r3, #0
 80008f2:	733b      	strb	r3, [r7, #12]
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff72 	bl	8000800 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800091c:	202b      	movs	r0, #43	; 0x2b
 800091e:	f7ff ff55 	bl	80007cc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000946:	202c      	movs	r0, #44	; 0x2c
 8000948:	f7ff ff40 	bl	80007cc <ST7735_WriteCommand>
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	2400017a 	.word	0x2400017a
 8000958:	2400017e 	.word	0x2400017e

0800095c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000966:	f7ff ff03 	bl	8000770 <ST7735_Select>
    ST7735_Reset();
 800096a:	f7ff ff19 	bl	80007a0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <ST7735_Init+0x44>)
 8000970:	f7ff ff62 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds2);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <ST7735_Init+0x48>)
 8000976:	f7ff ff5f 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds3);
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ST7735_Init+0x4c>)
 800097c:	f7ff ff5c 	bl	8000838 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <ST7735_Init+0x50>)
 8000982:	2202      	movs	r2, #2
 8000984:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <ST7735_Init+0x54>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f810 	bl	80009b4 <ST7735_SetRotation>
    ST7735_Unselect();
 8000994:	f7ff fef8 	bl	8000788 <ST7735_Unselect>

}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08009b28 	.word	0x08009b28
 80009a4:	08009b60 	.word	0x08009b60
 80009a8:	08009b70 	.word	0x08009b70
 80009ac:	2400017b 	.word	0x2400017b
 80009b0:	2400017f 	.word	0x2400017f

080009b4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009cc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d84e      	bhi.n	8000a74 <ST7735_SetRotation+0xc0>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <ST7735_SetRotation+0x28>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a0f 	.word	0x08000a0f
 80009e4:	08000a31 	.word	0x08000a31
 80009e8:	08000a53 	.word	0x08000a53
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <ST7735_SetRotation+0xe8>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <ST7735_SetRotation+0xec>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a02:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a0a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a0c:	e032      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a24:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a2e:	e021      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a46:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a50:	e010      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a72:	bf00      	nop
  }
  ST7735_Select();
 8000a74:	f7ff fe7c 	bl	8000770 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f7ff fea7 	bl	80007cc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff febb 	bl	8000800 <ST7735_WriteData>
  ST7735_Unselect();
 8000a8a:	f7ff fe7d 	bl	8000788 <ST7735_Unselect>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	24000180 	.word	0x24000180
 8000a9c:	24000186 	.word	0x24000186
 8000aa0:	24000182 	.word	0x24000182
 8000aa4:	2400017b 	.word	0x2400017b
 8000aa8:	2400017a 	.word	0x2400017a
 8000aac:	2400017f 	.word	0x2400017f
 8000ab0:	2400017e 	.word	0x2400017e

08000ab4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b089      	sub	sp, #36	; 0x24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2d8      	uxtb	r0, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2dc      	uxtb	r4, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4622      	mov	r2, r4
 8000af4:	f7ff feea 	bl	80008cc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e043      	b.n	8000b86 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	3b20      	subs	r3, #32
 8000b04:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e029      	b.n	8000b74 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	743b      	strb	r3, [r7, #16]
 8000b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe5a 	bl	8000800 <ST7735_WriteData>
 8000b4c:	e00f      	b.n	8000b6e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe49 	bl	8000800 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b78:	461a      	mov	r2, r3
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d3cf      	bcc.n	8000b20 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3301      	adds	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d3b5      	bcc.n	8000afe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3724      	adds	r7, #36	; 0x24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
	...

08000ba4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af04      	add	r7, sp, #16
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000bb8:	f7ff fdda 	bl	8000770 <ST7735_Select>

    while(*str) {
 8000bbc:	e033      	b.n	8000c26 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	7d3a      	ldrb	r2, [r7, #20]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <ST7735_WriteString+0xa0>)
 8000bc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	db16      	blt.n	8000bfc <ST7735_WriteString+0x58>
            x = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	7d7a      	ldrb	r2, [r7, #21]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <ST7735_WriteString+0xa4>)
 8000be4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da21      	bge.n	8000c30 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d103      	bne.n	8000bfc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
                continue;
 8000bfa:	e014      	b.n	8000c26 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	8bbb      	ldrh	r3, [r7, #28]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f7ff ff4f 	bl	8000ab4 <ST7735_WriteChar>
        x += font.width;
 8000c16:	7d3b      	ldrb	r3, [r7, #20]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1c7      	bne.n	8000bbe <ST7735_WriteString+0x1a>
 8000c2e:	e000      	b.n	8000c32 <ST7735_WriteString+0x8e>
                break;
 8000c30:	bf00      	nop
    }

    ST7735_Unselect();
 8000c32:	f7ff fda9 	bl	8000788 <ST7735_Unselect>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c40:	b002      	add	sp, #8
 8000c42:	4770      	bx	lr
 8000c44:	24000182 	.word	0x24000182
 8000c48:	24000186 	.word	0x24000186

08000c4c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	da67      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	da61      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd06      	ble.n	8000ca0 <ST7735_FillRectangle+0x54>
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd06      	ble.n	8000cbe <ST7735_FillRectangle+0x72>
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cbe:	f7ff fd57 	bl	8000770 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2dc      	uxtb	r4, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4622      	mov	r2, r4
 8000cec:	f7ff fdee 	bl	80008cc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf0:	8c3b      	ldrh	r3, [r7, #32]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	733b      	strb	r3, [r7, #12]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <ST7735_FillRectangle+0x10c>)
 8000d08:	f004 f84a 	bl	8004da0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	e013      	b.n	8000d3a <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e00a      	b.n	8000d2e <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ST7735_FillRectangle+0x110>)
 8000d24:	f006 fe56 	bl	80079d4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000d40:	f7ff fd22 	bl	8000788 <ST7735_Unselect>
 8000d44:	e000      	b.n	8000d48 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000182 	.word	0x24000182
 8000d54:	24000186 	.word	0x24000186
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	2400063c 	.word	0x2400063c

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af04      	add	r7, sp, #16
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000d6c:	bf00      	nop
 8000d6e:	4b98      	ldr	r3, [pc, #608]	; (8000fd0 <main+0x270>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <main+0x24>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0xe>
		;
	if (timeout < 0) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x2e>
		Error_Handler();
 8000d8a:	f000 fe35 	bl	80019f8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f001 f93d 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f9df 	bl	8001154 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d96:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <main+0x270>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a8c      	ldr	r2, [pc, #560]	; (8000fd0 <main+0x270>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b8a      	ldr	r3, [pc, #552]	; (8000fd0 <main+0x270>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 f80d 	bl	8004dd4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f004 f823 	bl	8004e08 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000dc8:	bf00      	nop
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <main+0x270>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x80>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dcf4      	bgt.n	8000dca <main+0x6a>
		;
	if (timeout < 0) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da01      	bge.n	8000dea <main+0x8a>
		Error_Handler();
 8000de6:	f000 fe07 	bl	80019f8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 fb79 	bl	80014e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000dee:	f000 fa35 	bl	800125c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000df2:	f000 fad7 	bl	80013a4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000df6:	f000 fb53 	bl	80014a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dfa:	f000 fa7b 	bl	80012f4 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 fb1d 	bl	800143c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init(2);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fdaa 	bl	800095c <ST7735_Init>
	fillScreen(BLACK);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fc97 	bl	800073c <fillScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		numbercar[0] = password[0] + 48;
 8000e0e:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <main+0x274>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3330      	adds	r3, #48	; 0x30
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <main+0x278>)
 8000e1a:	701a      	strb	r2, [r3, #0]
		numbercar[2] = password[1] + 48;
 8000e1c:	4b6d      	ldr	r3, [pc, #436]	; (8000fd4 <main+0x274>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3330      	adds	r3, #48	; 0x30
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <main+0x278>)
 8000e28:	709a      	strb	r2, [r3, #2]
		numbercar[4] = password[2] + 48;
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	; (8000fd4 <main+0x274>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3330      	adds	r3, #48	; 0x30
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b68      	ldr	r3, [pc, #416]	; (8000fd8 <main+0x278>)
 8000e36:	711a      	strb	r2, [r3, #4]
		numbercar[6] = password[3] + 48;
 8000e38:	4b66      	ldr	r3, [pc, #408]	; (8000fd4 <main+0x274>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3330      	adds	r3, #48	; 0x30
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b65      	ldr	r3, [pc, #404]	; (8000fd8 <main+0x278>)
 8000e44:	719a      	strb	r2, [r3, #6]
		//		ST7735_WriteString(0, 51, "_ _ _ _", Font_16x26, YELLOW,BLACK);
		ST7735_WriteString(0, 50, numbercar, Font_16x26, YELLOW, BLACK);
 8000e46:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <main+0x27c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	9202      	str	r2, [sp, #8]
 8000e4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	9200      	str	r2, [sp, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a5f      	ldr	r2, [pc, #380]	; (8000fd8 <main+0x278>)
 8000e5a:	2132      	movs	r1, #50	; 0x32
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fea1 	bl	8000ba4 <ST7735_WriteString>
		ButtonMatrixUpdate();
 8000e62:	f000 fc93 	bl	800178c <ButtonMatrixUpdate>
		press[0] = ButtonMatrixState;
 8000e66:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <main+0x280>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b5d      	ldr	r3, [pc, #372]	; (8000fe4 <main+0x284>)
 8000e6e:	601a      	str	r2, [r3, #0]
		if (press[0] != press[1] && press[0] != 0) {
 8000e70:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <main+0x284>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <main+0x284>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f000 8158 	beq.w	800112e <main+0x3ce>
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <main+0x284>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 8153 	beq.w	800112e <main+0x3ce>
			if (state == 0) {
 8000e88:	4b57      	ldr	r3, [pc, #348]	; (8000fe8 <main+0x288>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d110      	bne.n	8000eb2 <main+0x152>
				if (ButtonMatrixState != 0b100000000000) {
 8000e90:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <main+0x280>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e98:	d061      	beq.n	8000f5e <main+0x1fe>
					password[0] = Button(ButtonMatrixState);
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <main+0x280>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd06 	bl	80018b0 <Button>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <main+0x274>)
 8000ea8:	6013      	str	r3, [r2, #0]
					state = 1;
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <main+0x288>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e055      	b.n	8000f5e <main+0x1fe>
				}
			} else if (state == 1) {
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <main+0x288>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d118      	bne.n	8000eec <main+0x18c>
				if (ButtonMatrixState == 0b100000000000) {
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <main+0x280>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ec2:	d107      	bne.n	8000ed4 <main+0x174>
					password[0] = -16;
 8000ec4:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <main+0x274>)
 8000ec6:	f06f 020f 	mvn.w	r2, #15
 8000eca:	601a      	str	r2, [r3, #0]
					state = 0;
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <main+0x288>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e044      	b.n	8000f5e <main+0x1fe>
				} else {
					password[1] = Button(ButtonMatrixState);
 8000ed4:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <main+0x280>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fce9 	bl	80018b0 <Button>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <main+0x274>)
 8000ee2:	6053      	str	r3, [r2, #4]
					state = 2;
 8000ee4:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <main+0x288>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e038      	b.n	8000f5e <main+0x1fe>
				}
			} else if (state == 2) {
 8000eec:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <main+0x288>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d118      	bne.n	8000f26 <main+0x1c6>
				if (ButtonMatrixState == 0b100000000000) {
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <main+0x280>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000efc:	d107      	bne.n	8000f0e <main+0x1ae>
					password[1] = -16;
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <main+0x274>)
 8000f00:	f06f 020f 	mvn.w	r2, #15
 8000f04:	605a      	str	r2, [r3, #4]
					state = 1;
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <main+0x288>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e027      	b.n	8000f5e <main+0x1fe>
				} else {
					password[2] = Button(ButtonMatrixState);
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <main+0x280>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fccc 	bl	80018b0 <Button>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <main+0x274>)
 8000f1c:	6093      	str	r3, [r2, #8]
					state = 3;
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <main+0x288>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e01b      	b.n	8000f5e <main+0x1fe>
				}
			} else if (state == 3) {
 8000f26:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <main+0x288>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d117      	bne.n	8000f5e <main+0x1fe>
				if (ButtonMatrixState == 0b100000000000) {
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <main+0x280>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f36:	d107      	bne.n	8000f48 <main+0x1e8>
					password[2] = -16;
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <main+0x274>)
 8000f3a:	f06f 020f 	mvn.w	r2, #15
 8000f3e:	609a      	str	r2, [r3, #8]
					state = 2;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <main+0x288>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e00a      	b.n	8000f5e <main+0x1fe>
				} else {
					password[3] = Button(ButtonMatrixState);
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <main+0x280>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fcaf 	bl	80018b0 <Button>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0x274>)
 8000f56:	60d3      	str	r3, [r2, #12]
					state = 4;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <main+0x288>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	601a      	str	r2, [r3, #0]
				}
			}
			if (state == 4) {
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <main+0x288>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	f040 80e3 	bne.w	800112e <main+0x3ce>
				if (setpassword == 3) {
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <main+0x28c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d143      	bne.n	8000ff8 <main+0x298>
					if (password[0] == verify[0] && password[1] == verify[1]
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <main+0x274>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <main+0x290>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d121      	bne.n	8000fc0 <main+0x260>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <main+0x274>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <main+0x290>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d11b      	bne.n	8000fc0 <main+0x260>
							&& password[2] == verify[2]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <main+0x274>)
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <main+0x290>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d115      	bne.n	8000fc0 <main+0x260>
							&& password[3] == verify[3]) {
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <main+0x274>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <main+0x290>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d10f      	bne.n	8000fc0 <main+0x260>
						key[0] = verify[0];
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <main+0x290>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <main+0x294>)
 8000fa6:	6013      	str	r3, [r2, #0]
						key[1] = verify[1];
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <main+0x290>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <main+0x294>)
 8000fae:	6053      	str	r3, [r2, #4]
						key[2] = verify[2];
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <main+0x290>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <main+0x294>)
 8000fb6:	6093      	str	r3, [r2, #8]
						key[3] = verify[3];
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <main+0x290>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <main+0x294>)
 8000fbe:	60d3      	str	r3, [r2, #12]
					}
					setpassword = 0;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <main+0x28c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
					state = 0;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <main+0x288>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e09f      	b.n	800110e <main+0x3ae>
 8000fce:	bf00      	nop
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	24000010 	.word	0x24000010
 8000fd8:	24000020 	.word	0x24000020
 8000fdc:	24000008 	.word	0x24000008
 8000fe0:	2400013c 	.word	0x2400013c
 8000fe4:	24000634 	.word	0x24000634
 8000fe8:	24000140 	.word	0x24000140
 8000fec:	24000158 	.word	0x24000158
 8000ff0:	2400015c 	.word	0x2400015c
 8000ff4:	24000144 	.word	0x24000144
				} else if (setpassword == 2) {
 8000ff8:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <main+0x3d8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d116      	bne.n	800102e <main+0x2ce>
					verify[0] = password[0];
 8001000:	4b4e      	ldr	r3, [pc, #312]	; (800113c <main+0x3dc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <main+0x3e0>)
 8001006:	6013      	str	r3, [r2, #0]
					verify[1] = password[1];
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <main+0x3dc>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <main+0x3e0>)
 800100e:	6053      	str	r3, [r2, #4]
					verify[2] = password[2];
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <main+0x3dc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <main+0x3e0>)
 8001016:	6093      	str	r3, [r2, #8]
					verify[3] = password[3];
 8001018:	4b48      	ldr	r3, [pc, #288]	; (800113c <main+0x3dc>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a48      	ldr	r2, [pc, #288]	; (8001140 <main+0x3e0>)
 800101e:	60d3      	str	r3, [r2, #12]
					setpassword = 3;
 8001020:	4b45      	ldr	r3, [pc, #276]	; (8001138 <main+0x3d8>)
 8001022:	2203      	movs	r2, #3
 8001024:	601a      	str	r2, [r3, #0]
					state = 0;
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <main+0x3e4>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e06f      	b.n	800110e <main+0x3ae>
				} else if (setpassword == 1) {
 800102e:	4b42      	ldr	r3, [pc, #264]	; (8001138 <main+0x3d8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d122      	bne.n	800107c <main+0x31c>
					if (password[0] == key[0] && password[1] == key[1]
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <main+0x3dc>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <main+0x3e8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d115      	bne.n	800106e <main+0x30e>
 8001042:	4b3e      	ldr	r3, [pc, #248]	; (800113c <main+0x3dc>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <main+0x3e8>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d10f      	bne.n	800106e <main+0x30e>
							&& password[2] == key[3] && password[3] == key[4]) {
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <main+0x3dc>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <main+0x3e8>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	d109      	bne.n	800106e <main+0x30e>
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <main+0x3dc>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <main+0x3e8>)
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	429a      	cmp	r2, r3
 8001064:	d103      	bne.n	800106e <main+0x30e>
						setpassword = 2;
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <main+0x3d8>)
 8001068:	2202      	movs	r2, #2
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e002      	b.n	8001074 <main+0x314>
					} else {
						setpassword = 0;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <main+0x3d8>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
					}
					state = 0;
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <main+0x3e4>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e048      	b.n	800110e <main+0x3ae>
				} else if (password[0] == 15 && password[1] == 1
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <main+0x3dc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d112      	bne.n	80010aa <main+0x34a>
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <main+0x3dc>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10e      	bne.n	80010aa <main+0x34a>
						&& password[2] == 2 && password[3] == 3) {
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <main+0x3dc>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10a      	bne.n	80010aa <main+0x34a>
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <main+0x3dc>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d106      	bne.n	80010aa <main+0x34a>
					state = 0;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <main+0x3e4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
					setpassword = 1;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <main+0x3d8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e031      	b.n	800110e <main+0x3ae>
				} else if (password[0] == 15 && password[1] == 4
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <main+0x3dc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	d10b      	bne.n	80010ca <main+0x36a>
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <main+0x3dc>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d107      	bne.n	80010ca <main+0x36a>
						&& password[2] == 5 && password[3] == 6) {
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <main+0x3dc>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d103      	bne.n	80010ca <main+0x36a>
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <main+0x3dc>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d021      	beq.n	800110e <main+0x3ae>
					//	RFID
				} else if (password[0] == key[0] && password[1] == key[1]
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <main+0x3dc>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <main+0x3e8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d118      	bne.n	8001108 <main+0x3a8>
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <main+0x3dc>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0x3e8>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d112      	bne.n	8001108 <main+0x3a8>
						&& password[2] == key[3] && password[3] == key[4]) {
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <main+0x3dc>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <main+0x3e8>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d10c      	bne.n	8001108 <main+0x3a8>
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <main+0x3dc>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <main+0x3e8>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d106      	bne.n	8001108 <main+0x3a8>
					lock = 1;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <main+0x3ec>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
					state = 0;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <main+0x3e4>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e002      	b.n	800110e <main+0x3ae>
				} else {
					state = 0;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <main+0x3e4>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
				}
				password[0] = -16;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <main+0x3dc>)
 8001110:	f06f 020f 	mvn.w	r2, #15
 8001114:	601a      	str	r2, [r3, #0]
				password[1] = -16;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <main+0x3dc>)
 8001118:	f06f 020f 	mvn.w	r2, #15
 800111c:	605a      	str	r2, [r3, #4]
				password[2] = -16;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <main+0x3dc>)
 8001120:	f06f 020f 	mvn.w	r2, #15
 8001124:	609a      	str	r2, [r3, #8]
				password[3] = -16;
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <main+0x3dc>)
 8001128:	f06f 020f 	mvn.w	r2, #15
 800112c:	60da      	str	r2, [r3, #12]
			}
		}

		press[1] = press[0];
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <main+0x3f0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <main+0x3f0>)
 8001134:	6053      	str	r3, [r2, #4]
		numbercar[0] = password[0] + 48;
 8001136:	e66a      	b.n	8000e0e <main+0xae>
 8001138:	24000158 	.word	0x24000158
 800113c:	24000010 	.word	0x24000010
 8001140:	2400015c 	.word	0x2400015c
 8001144:	24000140 	.word	0x24000140
 8001148:	24000144 	.word	0x24000144
 800114c:	24000154 	.word	0x24000154
 8001150:	24000634 	.word	0x24000634

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09c      	sub	sp, #112	; 0x70
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	224c      	movs	r2, #76	; 0x4c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f008 fcc4 	bl	8009af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2220      	movs	r2, #32
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f008 fcbe 	bl	8009af0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001174:	2004      	movs	r0, #4
 8001176:	f003 ffa3 	bl	80050c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <SystemClock_Config+0xfc>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <SystemClock_Config+0xfc>)
 8001184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <SystemClock_Config+0xfc>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <SystemClock_Config+0x100>)
 8001196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <SystemClock_Config+0x100>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <SystemClock_Config+0x100>)
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ac:	bf00      	nop
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <SystemClock_Config+0xfc>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ba:	d1f8      	bne.n	80011ae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <SystemClock_Config+0x104>)
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f023 0303 	bic.w	r3, r3, #3
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <SystemClock_Config+0x104>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	2302      	movs	r3, #2
 80011dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80011e2:	2378      	movs	r3, #120	; 0x78
 80011e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80011ea:	2306      	movs	r3, #6
 80011ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011f2:	230c      	movs	r3, #12
 80011f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4618      	mov	r0, r3
 8001204:	f003 ffc6 	bl	8005194 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800120e:	f000 fbf3 	bl	80019f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	233f      	movs	r3, #63	; 0x3f
 8001214:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2303      	movs	r3, #3
 8001218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800121e:	2308      	movs	r3, #8
 8001220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001230:	2340      	movs	r3, #64	; 0x40
 8001232:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2104      	movs	r1, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fbd7 	bl	80059ec <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001244:	f000 fbd8 	bl	80019f8 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3770      	adds	r7, #112	; 0x70
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	58024800 	.word	0x58024800
 8001254:	58000400 	.word	0x58000400
 8001258:	58024400 	.word	0x58024400

0800125c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_ETH_Init+0x80>)
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <MX_ETH_Init+0x84>)
 8001264:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ETH_Init+0x88>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ETH_Init+0x88>)
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ETH_Init+0x88>)
 8001274:	22e1      	movs	r2, #225	; 0xe1
 8001276:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ETH_Init+0x88>)
 800127a:	2200      	movs	r2, #0
 800127c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ETH_Init+0x88>)
 8001280:	2200      	movs	r2, #0
 8001282:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ETH_Init+0x88>)
 8001286:	2200      	movs	r2, #0
 8001288:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_ETH_Init+0x80>)
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <MX_ETH_Init+0x88>)
 800128e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_ETH_Init+0x80>)
 8001292:	2201      	movs	r2, #1
 8001294:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_ETH_Init+0x80>)
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <MX_ETH_Init+0x8c>)
 800129a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_ETH_Init+0x80>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <MX_ETH_Init+0x90>)
 80012a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_ETH_Init+0x80>)
 80012a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_ETH_Init+0x80>)
 80012ac:	f002 ff9a 	bl	80041e4 <HAL_ETH_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80012b6:	f000 fb9f 	bl	80019f8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012ba:	2234      	movs	r2, #52	; 0x34
 80012bc:	2100      	movs	r1, #0
 80012be:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_ETH_Init+0x94>)
 80012c0:	f008 fc16 	bl	8009af0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_ETH_Init+0x94>)
 80012c6:	2221      	movs	r2, #33	; 0x21
 80012c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_ETH_Init+0x94>)
 80012cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_ETH_Init+0x94>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	240006c8 	.word	0x240006c8
 80012e0:	40028000 	.word	0x40028000
 80012e4:	24000174 	.word	0x24000174
 80012e8:	240000c0 	.word	0x240000c0
 80012ec:	24000060 	.word	0x24000060
 80012f0:	24000750 	.word	0x24000750

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_SPI1_Init+0xa8>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <MX_SPI1_Init+0xac>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_SPI1_Init+0xa8>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_SPI1_Init+0xa8>)
 8001308:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800130c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_SPI1_Init+0xa8>)
 8001310:	2207      	movs	r2, #7
 8001312:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_SPI1_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_SPI1_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_SPI1_Init+0xa8>)
 8001322:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001326:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_SPI1_Init+0xa8>)
 800132a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_SPI1_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_SPI1_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI1_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI1_Init+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI1_Init+0xa8>)
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI1_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI1_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI1_Init+0xa8>)
 800135e:	2200      	movs	r2, #0
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI1_Init+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI1_Init+0xa8>)
 800136a:	2200      	movs	r2, #0
 800136c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_SPI1_Init+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI1_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_SPI1_Init+0xa8>)
 800137c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI1_Init+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPI1_Init+0xa8>)
 800138a:	f006 fa1d 	bl	80077c8 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001394:	f000 fb30 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2400063c 	.word	0x2400063c
 80013a0:	40013000 	.word	0x40013000

080013a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <MX_USART3_UART_Init+0x94>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_USART3_UART_Init+0x90>)
 80013ee:	f006 ffee 	bl	80083ce <HAL_UART_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013f8:	f000 fafe 	bl	80019f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_USART3_UART_Init+0x90>)
 8001400:	f007 ff84 	bl	800930c <HAL_UARTEx_SetTxFifoThreshold>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800140a:	f000 faf5 	bl	80019f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <MX_USART3_UART_Init+0x90>)
 8001412:	f007 ffb9 	bl	8009388 <HAL_UARTEx_SetRxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 faec 	bl	80019f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_USART3_UART_Init+0x90>)
 8001422:	f007 ff3a 	bl	800929a <HAL_UARTEx_DisableFifoMode>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800142c:	f000 fae4 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400018c 	.word	0x2400018c
 8001438:	40004800 	.word	0x40004800

0800143c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001444:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001448:	2209      	movs	r2, #9
 800144a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144e:	2202      	movs	r2, #2
 8001450:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145a:	2202      	movs	r2, #2
 800145c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001472:	2201      	movs	r2, #1
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001478:	2201      	movs	r2, #1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147e:	2200      	movs	r2, #0
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001484:	f003 fcd4 	bl	8004e30 <HAL_PCD_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800148e:	f000 fab3 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2400021c 	.word	0x2400021c
 800149c:	40080000 	.word	0x40080000

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_DMA_Init+0x3c>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MX_DMA_Init+0x3c>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x3c>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	200b      	movs	r0, #11
 80014ca:	f000 ff50 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014ce:	200b      	movs	r0, #11
 80014d0:	f000 ff67 	bl	80023a2 <HAL_NVIC_EnableIRQ>

}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	58024400 	.word	0x58024400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b9e      	ldr	r3, [pc, #632]	; (8001770 <MX_GPIO_Init+0x290>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	4a9c      	ldr	r2, [pc, #624]	; (8001770 <MX_GPIO_Init+0x290>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001506:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <MX_GPIO_Init+0x290>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001514:	4b96      	ldr	r3, [pc, #600]	; (8001770 <MX_GPIO_Init+0x290>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	4a95      	ldr	r2, [pc, #596]	; (8001770 <MX_GPIO_Init+0x290>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001524:	4b92      	ldr	r3, [pc, #584]	; (8001770 <MX_GPIO_Init+0x290>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <MX_GPIO_Init+0x290>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a8d      	ldr	r2, [pc, #564]	; (8001770 <MX_GPIO_Init+0x290>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <MX_GPIO_Init+0x290>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b87      	ldr	r3, [pc, #540]	; (8001770 <MX_GPIO_Init+0x290>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a86      	ldr	r2, [pc, #536]	; (8001770 <MX_GPIO_Init+0x290>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b83      	ldr	r3, [pc, #524]	; (8001770 <MX_GPIO_Init+0x290>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4b80      	ldr	r3, [pc, #512]	; (8001770 <MX_GPIO_Init+0x290>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	4a7e      	ldr	r2, [pc, #504]	; (8001770 <MX_GPIO_Init+0x290>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157e:	4b7c      	ldr	r3, [pc, #496]	; (8001770 <MX_GPIO_Init+0x290>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b78      	ldr	r3, [pc, #480]	; (8001770 <MX_GPIO_Init+0x290>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <MX_GPIO_Init+0x290>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159c:	4b74      	ldr	r3, [pc, #464]	; (8001770 <MX_GPIO_Init+0x290>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015aa:	4b71      	ldr	r3, [pc, #452]	; (8001770 <MX_GPIO_Init+0x290>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <MX_GPIO_Init+0x290>)
 80015b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ba:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <MX_GPIO_Init+0x290>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f244 0101 	movw	r1, #16385	; 0x4001
 80015ce:	4869      	ldr	r0, [pc, #420]	; (8001774 <MX_GPIO_Init+0x294>)
 80015d0:	f003 fbe6 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015da:	4867      	ldr	r0, [pc, #412]	; (8001778 <MX_GPIO_Init+0x298>)
 80015dc:	f003 fbe0 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|LCDc_d_Pin, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80015e6:	4865      	ldr	r0, [pc, #404]	; (800177c <MX_GPIO_Init+0x29c>)
 80015e8:	f003 fbda 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDcs_GPIO_Port, LCDcs_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	4862      	ldr	r0, [pc, #392]	; (800177c <MX_GPIO_Init+0x29c>)
 80015f4:	f003 fbd4 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCDreset_Pin|GPIO_PIN_14, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80015fe:	4860      	ldr	r0, [pc, #384]	; (8001780 <MX_GPIO_Init+0x2a0>)
 8001600:	f003 fbce 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	21c0      	movs	r1, #192	; 0xc0
 8001608:	485a      	ldr	r0, [pc, #360]	; (8001774 <MX_GPIO_Init+0x294>)
 800160a:	f003 fbc9 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	4859      	ldr	r0, [pc, #356]	; (8001778 <MX_GPIO_Init+0x298>)
 8001614:	f003 fbc4 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4855      	ldr	r0, [pc, #340]	; (8001784 <MX_GPIO_Init+0x2a4>)
 800162e:	f003 f9ef 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001632:	f244 0301 	movw	r3, #16385	; 0x4001
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	484a      	ldr	r0, [pc, #296]	; (8001774 <MX_GPIO_Init+0x294>)
 800164c:	f003 f9e0 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8001650:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4844      	ldr	r0, [pc, #272]	; (8001778 <MX_GPIO_Init+0x298>)
 8001666:	f003 f9d3 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001670:	2311      	movs	r3, #17
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	483d      	ldr	r0, [pc, #244]	; (8001778 <MX_GPIO_Init+0x298>)
 8001684:	f003 f9c4 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin LCDcs_Pin LCDc_d_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|LCDcs_Pin|LCDc_d_Pin;
 8001688:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4836      	ldr	r0, [pc, #216]	; (800177c <MX_GPIO_Init+0x29c>)
 80016a2:	f003 f9b5 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4831      	ldr	r0, [pc, #196]	; (8001780 <MX_GPIO_Init+0x2a0>)
 80016bc:	f003 f9a8 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	482c      	ldr	r0, [pc, #176]	; (8001788 <MX_GPIO_Init+0x2a8>)
 80016d6:	f003 f99b 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDreset_Pin */
  GPIO_InitStruct.Pin = LCDreset_Pin;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDreset_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_GPIO_Init+0x2a0>)
 80016f4:	f003 f98c 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <MX_GPIO_Init+0x2a0>)
 800170e:	f003 f97f 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001718:	2311      	movs	r3, #17
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <MX_GPIO_Init+0x2a0>)
 800172c:	f003 f970 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001730:	23c0      	movs	r3, #192	; 0xc0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001734:	2311      	movs	r3, #17
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <MX_GPIO_Init+0x294>)
 8001748:	f003 f962 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_GPIO_Init+0x298>)
 8001764:	f003 f954 	bl	8004a10 <HAL_GPIO_Init>

}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	; 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024400 	.word	0x58024400
 8001774:	58020400 	.word	0x58020400
 8001778:	58021000 	.word	0x58021000
 800177c:	58020c00 	.word	0x58020c00
 8001780:	58021800 	.word	0x58021800
 8001784:	58020800 	.word	0x58020800
 8001788:	58020000 	.word	0x58020000

0800178c <ButtonMatrixUpdate>:
uint16_t ButtonMatrixPin[8] = { GPIO_PIN_12, GPIO_PIN_8, GPIO_PIN_11,
GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_14,
GPIO_PIN_6, GPIO_PIN_7 };

uint8_t ButtonMatrixRow = 0;  //What  R Now
void ButtonMatrixUpdate() {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ButtonMatrixTimestamp >= 50) {
 8001792:	f000 fcc1 	bl	8002118 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <ButtonMatrixUpdate+0x10c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b31      	cmp	r3, #49	; 0x31
 80017a0:	d975      	bls.n	800188e <ButtonMatrixUpdate+0x102>
		x = x + 1;
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <ButtonMatrixUpdate+0x110>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a3c      	ldr	r2, [pc, #240]	; (800189c <ButtonMatrixUpdate+0x110>)
 80017aa:	6013      	str	r3, [r2, #0]
		ButtonMatrixTimestamp = HAL_GetTick();
 80017ac:	f000 fcb4 	bl	8002118 <HAL_GetTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <ButtonMatrixUpdate+0x10c>)
 80017b4:	6013      	str	r3, [r2, #0]
		int i;
		for (i = 0; i < 4; i += 1) { //0-3
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	e038      	b.n	800182e <ButtonMatrixUpdate+0xa2>
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i],
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <ButtonMatrixUpdate+0x114>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <ButtonMatrixUpdate+0x118>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f003 face 	bl	8004d70 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	707b      	strb	r3, [r7, #1]
					ButtonMatrixPin[i]);
			if (PinState == GPIO_PIN_RESET) // Button Press
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d111      	bne.n	8001802 <ButtonMatrixUpdate+0x76>
					{
				ButtonMatrixState |= (uint16_t) 1 << (i + ButtonMatrixRow * 4);
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	009a      	lsls	r2, r3, #2
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	2201      	movs	r2, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <ButtonMatrixUpdate+0x120>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <ButtonMatrixUpdate+0x120>)
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	e012      	b.n	8001828 <ButtonMatrixUpdate+0x9c>
			} else {
				ButtonMatrixState &=
						~((uint16_t) 1 << (i + ButtonMatrixRow * 4));
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	2201      	movs	r2, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
				ButtonMatrixState &=
 8001812:	b21b      	sxth	r3, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <ButtonMatrixUpdate+0x120>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4013      	ands	r3, r2
 8001820:	b21b      	sxth	r3, r3
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <ButtonMatrixUpdate+0x120>)
 8001826:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; i += 1) { //0-3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b03      	cmp	r3, #3
 8001832:	ddc3      	ble.n	80017bc <ButtonMatrixUpdate+0x30>
			}
		}
		uint8_t NowOutputPin = ButtonMatrixRow + 4;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3304      	adds	r3, #4
 800183a:	70fb      	strb	r3, [r7, #3]
		//SET Rn
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin],
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <ButtonMatrixUpdate+0x114>)
 8001840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <ButtonMatrixUpdate+0x118>)
 8001848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	f003 faa6 	bl	8004da0 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
		// update New Row
		ButtonMatrixRow = (ButtonMatrixRow + 1) % 4;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	425a      	negs	r2, r3
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	bf58      	it	pl
 8001866:	4253      	negpl	r3, r2
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 800186c:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixRow + 4;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <ButtonMatrixUpdate+0x11c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3304      	adds	r3, #4
 8001874:	70bb      	strb	r3, [r7, #2]
		//Reset Rn+1
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin],
 8001876:	78bb      	ldrb	r3, [r7, #2]
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <ButtonMatrixUpdate+0x114>)
 800187a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800187e:	78bb      	ldrb	r3, [r7, #2]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <ButtonMatrixUpdate+0x118>)
 8001882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	f003 fa89 	bl	8004da0 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);

	}
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2400016c 	.word	0x2400016c
 800189c:	24000188 	.word	0x24000188
 80018a0:	24000028 	.word	0x24000028
 80018a4:	24000048 	.word	0x24000048
 80018a8:	24000170 	.word	0x24000170
 80018ac:	2400013c 	.word	0x2400013c

080018b0 <Button>:
int Button( ButtonMatrixState) {
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	int pass = -16;
 80018b8:	f06f 030f 	mvn.w	r3, #15
 80018bc:	60fb      	str	r3, [r7, #12]
	switch (ButtonMatrixState) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	f000 808d 	beq.w	80019e2 <Button+0x132>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ce:	f300 808b 	bgt.w	80019e8 <Button+0x138>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d8:	f000 8080 	beq.w	80019dc <Button+0x12c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e2:	f300 8081 	bgt.w	80019e8 <Button+0x138>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ec:	d073      	beq.n	80019d6 <Button+0x126>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f4:	dc78      	bgt.n	80019e8 <Button+0x138>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d069      	beq.n	80019d0 <Button+0x120>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b80      	cmp	r3, #128	; 0x80
 8001900:	dc72      	bgt.n	80019e8 <Button+0x138>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b20      	cmp	r3, #32
 8001906:	dc49      	bgt.n	800199c <Button+0xec>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dd6c      	ble.n	80019e8 <Button+0x138>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3b01      	subs	r3, #1
 8001912:	2b1f      	cmp	r3, #31
 8001914:	d868      	bhi.n	80019e8 <Button+0x138>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <Button+0x6c>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	080019a5 	.word	0x080019a5
 8001920:	080019ab 	.word	0x080019ab
 8001924:	080019e9 	.word	0x080019e9
 8001928:	080019b1 	.word	0x080019b1
 800192c:	080019e9 	.word	0x080019e9
 8001930:	080019e9 	.word	0x080019e9
 8001934:	080019e9 	.word	0x080019e9
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019e9 	.word	0x080019e9
 8001940:	080019e9 	.word	0x080019e9
 8001944:	080019e9 	.word	0x080019e9
 8001948:	080019e9 	.word	0x080019e9
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019e9 	.word	0x080019e9
 8001954:	080019e9 	.word	0x080019e9
 8001958:	080019bf 	.word	0x080019bf
 800195c:	080019e9 	.word	0x080019e9
 8001960:	080019e9 	.word	0x080019e9
 8001964:	080019e9 	.word	0x080019e9
 8001968:	080019e9 	.word	0x080019e9
 800196c:	080019e9 	.word	0x080019e9
 8001970:	080019e9 	.word	0x080019e9
 8001974:	080019e9 	.word	0x080019e9
 8001978:	080019e9 	.word	0x080019e9
 800197c:	080019e9 	.word	0x080019e9
 8001980:	080019e9 	.word	0x080019e9
 8001984:	080019e9 	.word	0x080019e9
 8001988:	080019e9 	.word	0x080019e9
 800198c:	080019e9 	.word	0x080019e9
 8001990:	080019e9 	.word	0x080019e9
 8001994:	080019e9 	.word	0x080019e9
 8001998:	080019c5 	.word	0x080019c5
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b40      	cmp	r3, #64	; 0x40
 80019a0:	d013      	beq.n	80019ca <Button+0x11a>
		break;
	case 0b10000000000:
		pass = 9;
		break;
	default:
		break;
 80019a2:	e021      	b.n	80019e8 <Button+0x138>
		pass = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
		break;
 80019a8:	e01f      	b.n	80019ea <Button+0x13a>
		pass = 4;
 80019aa:	2304      	movs	r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
		break;
 80019ae:	e01c      	b.n	80019ea <Button+0x13a>
		pass = 7;
 80019b0:	2307      	movs	r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]
		break;
 80019b4:	e019      	b.n	80019ea <Button+0x13a>
		pass = -6;
 80019b6:	f06f 0305 	mvn.w	r3, #5
 80019ba:	60fb      	str	r3, [r7, #12]
		break;
 80019bc:	e015      	b.n	80019ea <Button+0x13a>
		pass = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
		break;
 80019c2:	e012      	b.n	80019ea <Button+0x13a>
		pass = 5;
 80019c4:	2305      	movs	r3, #5
 80019c6:	60fb      	str	r3, [r7, #12]
		break;
 80019c8:	e00f      	b.n	80019ea <Button+0x13a>
		pass = 8;
 80019ca:	2308      	movs	r3, #8
 80019cc:	60fb      	str	r3, [r7, #12]
		break;
 80019ce:	e00c      	b.n	80019ea <Button+0x13a>
		pass = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
		break;
 80019d4:	e009      	b.n	80019ea <Button+0x13a>
		pass = 3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
		break;
 80019da:	e006      	b.n	80019ea <Button+0x13a>
		pass = 6;
 80019dc:	2306      	movs	r3, #6
 80019de:	60fb      	str	r3, [r7, #12]
		break;
 80019e0:	e003      	b.n	80019ea <Button+0x13a>
		pass = 9;
 80019e2:	2309      	movs	r3, #9
 80019e4:	60fb      	str	r3, [r7, #12]
		break;
 80019e6:	e000      	b.n	80019ea <Button+0x13a>
		break;
 80019e8:	bf00      	nop
	}
	return pass;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_MspInit+0x30>)
 8001a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x30>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x30>)
 8001a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	58024400 	.word	0x58024400

08001a38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	; 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a59      	ldr	r2, [pc, #356]	; (8001bbc <HAL_ETH_MspInit+0x184>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f040 80ab 	bne.w	8001bb2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a62:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a6c:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a98:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a9e:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aa8:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b2e:	2332      	movs	r3, #50	; 0x32
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b3e:	230b      	movs	r3, #11
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <HAL_ETH_MspInit+0x18c>)
 8001b4a:	f002 ff61 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001b4e:	2386      	movs	r3, #134	; 0x86
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b5e:	230b      	movs	r3, #11
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <HAL_ETH_MspInit+0x190>)
 8001b6a:	f002 ff51 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b80:	230b      	movs	r3, #11
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <HAL_ETH_MspInit+0x194>)
 8001b8c:	f002 ff40 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001b90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ba2:	230b      	movs	r3, #11
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <HAL_ETH_MspInit+0x198>)
 8001bae:	f002 ff2f 	bl	8004a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40028000 	.word	0x40028000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020000 	.word	0x58020000
 8001bcc:	58020400 	.word	0x58020400
 8001bd0:	58021800 	.word	0x58021800

08001bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0ba      	sub	sp, #232	; 0xe8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	22bc      	movs	r2, #188	; 0xbc
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f007 ff7b 	bl	8009af0 <memset>
  if(hspi->Instance==SPI1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_SPI_MspInit+0x174>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	f040 809c 	bne.w	8001d3e <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fa75 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001c20:	f7ff feea 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c2a:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_SPI_MspInit+0x178>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c96:	2305      	movs	r3, #5
 8001c98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482b      	ldr	r0, [pc, #172]	; (8001d50 <HAL_SPI_MspInit+0x17c>)
 8001ca4:	f002 feb4 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <HAL_SPI_MspInit+0x180>)
 8001cce:	f002 fe9f 	bl	8004a10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_SPI_MspInit+0x188>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001cda:	2226      	movs	r2, #38	; 0x26
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d04:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d14:	f000 fb60 	bl	80023d8 <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8001d1e:	f7ff fe6b 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d26:	679a      	str	r2, [r3, #120]	; 0x78
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_SPI_MspInit+0x184>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2023      	movs	r0, #35	; 0x23
 8001d34:	f000 fb1b 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d38:	2023      	movs	r0, #35	; 0x23
 8001d3a:	f000 fb32 	bl	80023a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	37e8      	adds	r7, #232	; 0xe8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40013000 	.word	0x40013000
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020000 	.word	0x58020000
 8001d54:	58020400 	.word	0x58020400
 8001d58:	24000784 	.word	0x24000784
 8001d5c:	40020010 	.word	0x40020010

08001d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0b8      	sub	sp, #224	; 0xe0
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	22bc      	movs	r2, #188	; 0xbc
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f007 feb5 	bl	8009af0 <memset>
  if(huart->Instance==USART3)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <HAL_UART_MspInit+0xc0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d142      	bne.n	8001e16 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d90:	2302      	movs	r3, #2
 8001d92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f9b0 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001daa:	f7ff fe25 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_UART_MspInit+0xc4>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e04:	2307      	movs	r3, #7
 8001e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <HAL_UART_MspInit+0xc8>)
 8001e12:	f002 fdfd 	bl	8004a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	37e0      	adds	r7, #224	; 0xe0
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40004800 	.word	0x40004800
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58020c00 	.word	0x58020c00

08001e2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0b8      	sub	sp, #224	; 0xe0
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	22bc      	movs	r2, #188	; 0xbc
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f007 fe4f 	bl	8009af0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a36      	ldr	r2, [pc, #216]	; (8001f30 <HAL_PCD_MspInit+0x104>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d165      	bne.n	8001f28 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001e66:	2318      	movs	r3, #24
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 f939 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001e98:	f7ff fdae 	bl	80019f8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e9c:	f003 f96a 	bl	8005174 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_PCD_MspInit+0x10c>)
 8001eda:	f002 fd99 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <HAL_PCD_MspInit+0x10c>)
 8001f06:	f002 fd83 	bl	8004a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_PCD_MspInit+0x108>)
 8001f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	37e0      	adds	r7, #224	; 0xe0
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40080000 	.word	0x40080000
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58020000 	.word	0x58020000

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f8b2 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA1_Stream0_IRQHandler+0x10>)
 8001f96:	f000 ffbf 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000784 	.word	0x24000784

08001fa4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <SPI1_IRQHandler+0x10>)
 8001faa:	f005 ff05 	bl	8007db8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2400063c 	.word	0x2400063c

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fbc:	f7fe fb08 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	; (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f007 fd5f 	bl	8009aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7fe feb9 	bl	8000d60 <main>
  bx  lr
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ff8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001ffc:	0800af28 	.word	0x0800af28
  ldr r2, =_sbss
 8002000:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002004:	24000840 	.word	0x24000840

08002008 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC3_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002012:	2003      	movs	r0, #3
 8002014:	f000 f9a0 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002018:	f003 fe9e 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_Init+0x68>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	4913      	ldr	r1, [pc, #76]	; (8002078 <HAL_Init+0x6c>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_Init+0x68>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_Init+0x6c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <HAL_Init+0x70>)
 800204e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_Init+0x74>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f814 	bl	8002084 <HAL_InitTick>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e002      	b.n	800206c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002066:	f7ff fccd 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58024400 	.word	0x58024400
 8002078:	08009b18 	.word	0x08009b18
 800207c:	24000004 	.word	0x24000004
 8002080:	24000000 	.word	0x24000000

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_InitTick+0x60>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e021      	b.n	80020dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_InitTick+0x64>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_InitTick+0x60>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f985 	bl	80023be <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f94f 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x68>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2400005c 	.word	0x2400005c
 80020e8:	24000000 	.word	0x24000000
 80020ec:	24000058 	.word	0x24000058

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2400005c 	.word	0x2400005c
 8002114:	2400083c 	.word	0x2400083c

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2400083c 	.word	0x2400083c

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2400005c 	.word	0x2400005c

08002178 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_GetREVID+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0c1b      	lsrs	r3, r3, #16
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	5c001000 	.word	0x5c001000

08002190 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58000400 	.word	0x58000400

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	05fa0000 	.word	0x05fa0000

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff40 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff90 	bl	80022ac <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5f 	bl	8002258 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff33 	bl	800221c <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa4 	bl	8002314 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fe9a 	bl	8002118 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e316      	b.n	8002a1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a66      	ldr	r2, [pc, #408]	; (8002590 <HAL_DMA_Init+0x1b8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04a      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a65      	ldr	r2, [pc, #404]	; (8002594 <HAL_DMA_Init+0x1bc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d045      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a63      	ldr	r2, [pc, #396]	; (8002598 <HAL_DMA_Init+0x1c0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d040      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a62      	ldr	r2, [pc, #392]	; (800259c <HAL_DMA_Init+0x1c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d03b      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_DMA_Init+0x1c8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d036      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5f      	ldr	r2, [pc, #380]	; (80025a4 <HAL_DMA_Init+0x1cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d031      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_DMA_Init+0x1d0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02c      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_DMA_Init+0x1d4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d027      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_DMA_Init+0x1d8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <HAL_DMA_Init+0x1dc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_DMA_Init+0x1e0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a56      	ldr	r2, [pc, #344]	; (80025bc <HAL_DMA_Init+0x1e4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a54      	ldr	r2, [pc, #336]	; (80025c0 <HAL_DMA_Init+0x1e8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a53      	ldr	r2, [pc, #332]	; (80025c4 <HAL_DMA_Init+0x1ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_DMA_Init+0x1f0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_DMA_Init+0x1f4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_DMA_Init+0xbc>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_DMA_Init+0xbe>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 813b 	beq.w	8002712 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a37      	ldr	r2, [pc, #220]	; (8002590 <HAL_DMA_Init+0x1b8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d04a      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a36      	ldr	r2, [pc, #216]	; (8002594 <HAL_DMA_Init+0x1bc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d045      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_DMA_Init+0x1c0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d040      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a33      	ldr	r2, [pc, #204]	; (800259c <HAL_DMA_Init+0x1c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d03b      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_DMA_Init+0x1c8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d036      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <HAL_DMA_Init+0x1cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d031      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_DMA_Init+0x1d0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02c      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_DMA_Init+0x1d4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d027      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_Init+0x1d8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <HAL_DMA_Init+0x1dc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01d      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_DMA_Init+0x1e0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_DMA_Init+0x174>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_DMA_Init+0x1e4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_DMA_Init+0x1e8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_DMA_Init+0x174>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_DMA_Init+0x1ec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_Init+0x1f0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_DMA_Init+0x1f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <HAL_DMA_Init+0x186>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_DMA_Init+0x196>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800256e:	e02f      	b.n	80025d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002570:	f7ff fdd2 	bl	8002118 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b05      	cmp	r3, #5
 800257c:	d928      	bls.n	80025d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e246      	b.n	8002a1e <HAL_DMA_Init+0x646>
 8002590:	40020010 	.word	0x40020010
 8002594:	40020028 	.word	0x40020028
 8002598:	40020040 	.word	0x40020040
 800259c:	40020058 	.word	0x40020058
 80025a0:	40020070 	.word	0x40020070
 80025a4:	40020088 	.word	0x40020088
 80025a8:	400200a0 	.word	0x400200a0
 80025ac:	400200b8 	.word	0x400200b8
 80025b0:	40020410 	.word	0x40020410
 80025b4:	40020428 	.word	0x40020428
 80025b8:	40020440 	.word	0x40020440
 80025bc:	40020458 	.word	0x40020458
 80025c0:	40020470 	.word	0x40020470
 80025c4:	40020488 	.word	0x40020488
 80025c8:	400204a0 	.word	0x400204a0
 80025cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1c8      	bne.n	8002570 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <HAL_DMA_Init+0x420>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4313      	orrs	r3, r2
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002634:	4b71      	ldr	r3, [pc, #452]	; (80027fc <HAL_DMA_Init+0x424>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b71      	ldr	r3, [pc, #452]	; (8002800 <HAL_DMA_Init+0x428>)
 800263a:	4013      	ands	r3, r2
 800263c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002640:	d328      	bcc.n	8002694 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b28      	cmp	r3, #40	; 0x28
 8002648:	d903      	bls.n	8002652 <HAL_DMA_Init+0x27a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b2e      	cmp	r3, #46	; 0x2e
 8002650:	d917      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b3e      	cmp	r3, #62	; 0x3e
 8002658:	d903      	bls.n	8002662 <HAL_DMA_Init+0x28a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b42      	cmp	r3, #66	; 0x42
 8002660:	d90f      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b46      	cmp	r3, #70	; 0x46
 8002668:	d903      	bls.n	8002672 <HAL_DMA_Init+0x29a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b48      	cmp	r3, #72	; 0x48
 8002670:	d907      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b4e      	cmp	r3, #78	; 0x4e
 8002678:	d905      	bls.n	8002686 <HAL_DMA_Init+0x2ae>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b52      	cmp	r3, #82	; 0x52
 8002680:	d801      	bhi.n	8002686 <HAL_DMA_Init+0x2ae>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_DMA_Init+0x2b0>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002692:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 fbfd 	bl	8003ed0 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e197      	b.n	8002a1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f001 fb38 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	223f      	movs	r2, #63	; 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e0cd      	b.n	80028ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <HAL_DMA_Init+0x42c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a39      	ldr	r2, [pc, #228]	; (8002808 <HAL_DMA_Init+0x430>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01d      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_DMA_Init+0x434>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a36      	ldr	r2, [pc, #216]	; (8002810 <HAL_DMA_Init+0x438>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_DMA_Init+0x43c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a33      	ldr	r2, [pc, #204]	; (8002818 <HAL_DMA_Init+0x440>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_DMA_Init+0x444>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a30      	ldr	r2, [pc, #192]	; (8002820 <HAL_DMA_Init+0x448>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_DMA_Init+0x38e>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_DMA_Init+0x390>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <HAL_DMA_Init+0x42c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d021      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_DMA_Init+0x430>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01c      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_DMA_Init+0x434>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d017      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_DMA_Init+0x438>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d012      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_DMA_Init+0x43c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00d      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_DMA_Init+0x440>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d008      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_DMA_Init+0x444>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_DMA_Init+0x448>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_DMA_Init+0x44c>)
 80027da:	4013      	ands	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d020      	beq.n	8002828 <HAL_DMA_Init+0x450>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d102      	bne.n	80027f4 <HAL_DMA_Init+0x41c>
 80027ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f2:	e01a      	b.n	800282a <HAL_DMA_Init+0x452>
 80027f4:	2300      	movs	r3, #0
 80027f6:	e018      	b.n	800282a <HAL_DMA_Init+0x452>
 80027f8:	fe10803f 	.word	0xfe10803f
 80027fc:	5c001000 	.word	0x5c001000
 8002800:	ffff0000 	.word	0xffff0000
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494
 8002824:	fffe000f 	.word	0xfffe000f
 8002828:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002858:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_DMA_Init+0x650>)
 8002870:	4413      	add	r3, r2
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_DMA_Init+0x654>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fa73 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 8002886:	4603      	mov	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e008      	b.n	80028ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0b7      	b.n	8002a1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	; (8002a30 <HAL_DMA_Init+0x658>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d072      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_DMA_Init+0x65c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d06d      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <HAL_DMA_Init+0x660>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d068      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	; (8002a3c <HAL_DMA_Init+0x664>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d063      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <HAL_DMA_Init+0x668>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d05e      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_DMA_Init+0x66c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d059      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <HAL_DMA_Init+0x670>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d054      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_DMA_Init+0x674>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04f      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_DMA_Init+0x678>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04a      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a51      	ldr	r2, [pc, #324]	; (8002a54 <HAL_DMA_Init+0x67c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d045      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a50      	ldr	r2, [pc, #320]	; (8002a58 <HAL_DMA_Init+0x680>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d040      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <HAL_DMA_Init+0x684>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d03b      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4d      	ldr	r2, [pc, #308]	; (8002a60 <HAL_DMA_Init+0x688>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d036      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_DMA_Init+0x68c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_DMA_Init+0x690>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d02c      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_DMA_Init+0x694>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d027      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_DMA_Init+0x698>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <HAL_DMA_Init+0x69c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a44      	ldr	r2, [pc, #272]	; (8002a78 <HAL_DMA_Init+0x6a0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_DMA_Init+0x6a4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <HAL_DMA_Init+0x6a8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3f      	ldr	r2, [pc, #252]	; (8002a84 <HAL_DMA_Init+0x6ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <HAL_DMA_Init+0x6b0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_DMA_Init+0x6b4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Init+0x5ca>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_DMA_Init+0x5cc>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d032      	beq.n	8002a0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f001 fb0d 	bl	8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d102      	bne.n	80029bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_DMA_Init+0x624>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d80c      	bhi.n	80029fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f001 fb8a 	bl	80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	e008      	b.n	8002a0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	a7fdabf8 	.word	0xa7fdabf8
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	58025408 	.word	0x58025408
 8002a74:	5802541c 	.word	0x5802541c
 8002a78:	58025430 	.word	0x58025430
 8002a7c:	58025444 	.word	0x58025444
 8002a80:	58025458 	.word	0x58025458
 8002a84:	5802546c 	.word	0x5802546c
 8002a88:	58025480 	.word	0x58025480
 8002a8c:	58025494 	.word	0x58025494

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e205      	b.n	8002eae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e1fa      	b.n	8002eae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a8c      	ldr	r2, [pc, #560]	; (8002cf0 <HAL_DMA_Abort_IT+0x260>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a8b      	ldr	r2, [pc, #556]	; (8002cf4 <HAL_DMA_Abort_IT+0x264>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a89      	ldr	r2, [pc, #548]	; (8002cf8 <HAL_DMA_Abort_IT+0x268>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a88      	ldr	r2, [pc, #544]	; (8002cfc <HAL_DMA_Abort_IT+0x26c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a86      	ldr	r2, [pc, #536]	; (8002d00 <HAL_DMA_Abort_IT+0x270>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a85      	ldr	r2, [pc, #532]	; (8002d04 <HAL_DMA_Abort_IT+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a83      	ldr	r2, [pc, #524]	; (8002d08 <HAL_DMA_Abort_IT+0x278>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a82      	ldr	r2, [pc, #520]	; (8002d0c <HAL_DMA_Abort_IT+0x27c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a80      	ldr	r2, [pc, #512]	; (8002d10 <HAL_DMA_Abort_IT+0x280>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7f      	ldr	r2, [pc, #508]	; (8002d14 <HAL_DMA_Abort_IT+0x284>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <HAL_DMA_Abort_IT+0x288>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7c      	ldr	r2, [pc, #496]	; (8002d1c <HAL_DMA_Abort_IT+0x28c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7a      	ldr	r2, [pc, #488]	; (8002d20 <HAL_DMA_Abort_IT+0x290>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_DMA_Abort_IT+0x294>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a77      	ldr	r2, [pc, #476]	; (8002d28 <HAL_DMA_Abort_IT+0x298>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a76      	ldr	r2, [pc, #472]	; (8002d2c <HAL_DMA_Abort_IT+0x29c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Abort_IT+0xcc>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Abort_IT+0xce>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d065      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_DMA_Abort_IT+0x260>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d04a      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5e      	ldr	r2, [pc, #376]	; (8002cf4 <HAL_DMA_Abort_IT+0x264>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d045      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <HAL_DMA_Abort_IT+0x268>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d040      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_DMA_Abort_IT+0x26c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d03b      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <HAL_DMA_Abort_IT+0x270>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d036      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_DMA_Abort_IT+0x274>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d031      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_DMA_Abort_IT+0x278>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d02c      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <HAL_DMA_Abort_IT+0x27c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d027      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a54      	ldr	r2, [pc, #336]	; (8002d10 <HAL_DMA_Abort_IT+0x280>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d022      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_DMA_Abort_IT+0x284>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01d      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a51      	ldr	r2, [pc, #324]	; (8002d18 <HAL_DMA_Abort_IT+0x288>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d018      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	; (8002d1c <HAL_DMA_Abort_IT+0x28c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4e      	ldr	r2, [pc, #312]	; (8002d20 <HAL_DMA_Abort_IT+0x290>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4c      	ldr	r2, [pc, #304]	; (8002d24 <HAL_DMA_Abort_IT+0x294>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4b      	ldr	r2, [pc, #300]	; (8002d28 <HAL_DMA_Abort_IT+0x298>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x17a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <HAL_DMA_Abort_IT+0x29c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x18c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e147      	b.n	8002eac <HAL_DMA_Abort_IT+0x41c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e13e      	b.n	8002eac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 020e 	bic.w	r2, r2, #14
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <HAL_DMA_Abort_IT+0x260>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_DMA_Abort_IT+0x264>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_DMA_Abort_IT+0x268>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <HAL_DMA_Abort_IT+0x26c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <HAL_DMA_Abort_IT+0x270>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_DMA_Abort_IT+0x274>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_DMA_Abort_IT+0x278>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_DMA_Abort_IT+0x27c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <HAL_DMA_Abort_IT+0x280>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_DMA_Abort_IT+0x284>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_DMA_Abort_IT+0x288>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_DMA_Abort_IT+0x28c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_DMA_Abort_IT+0x290>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_DMA_Abort_IT+0x294>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <HAL_DMA_Abort_IT+0x298>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <HAL_DMA_Abort_IT+0x29c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d128      	bne.n	8002d30 <HAL_DMA_Abort_IT+0x2a0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e027      	b.n	8002d40 <HAL_DMA_Abort_IT+0x2b0>
 8002cf0:	40020010 	.word	0x40020010
 8002cf4:	40020028 	.word	0x40020028
 8002cf8:	40020040 	.word	0x40020040
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	40020070 	.word	0x40020070
 8002d04:	40020088 	.word	0x40020088
 8002d08:	400200a0 	.word	0x400200a0
 8002d0c:	400200b8 	.word	0x400200b8
 8002d10:	40020410 	.word	0x40020410
 8002d14:	40020428 	.word	0x40020428
 8002d18:	40020440 	.word	0x40020440
 8002d1c:	40020458 	.word	0x40020458
 8002d20:	40020470 	.word	0x40020470
 8002d24:	40020488 	.word	0x40020488
 8002d28:	400204a0 	.word	0x400204a0
 8002d2c:	400204b8 	.word	0x400204b8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5c      	ldr	r2, [pc, #368]	; (8002eb8 <HAL_DMA_Abort_IT+0x428>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d072      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <HAL_DMA_Abort_IT+0x42c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d06d      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <HAL_DMA_Abort_IT+0x430>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d068      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_DMA_Abort_IT+0x434>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d063      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_DMA_Abort_IT+0x438>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d05e      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a55      	ldr	r2, [pc, #340]	; (8002ecc <HAL_DMA_Abort_IT+0x43c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d059      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_DMA_Abort_IT+0x440>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d054      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_DMA_Abort_IT+0x444>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04f      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a50      	ldr	r2, [pc, #320]	; (8002ed8 <HAL_DMA_Abort_IT+0x448>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04a      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a4f      	ldr	r2, [pc, #316]	; (8002edc <HAL_DMA_Abort_IT+0x44c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d045      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4d      	ldr	r2, [pc, #308]	; (8002ee0 <HAL_DMA_Abort_IT+0x450>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4c      	ldr	r2, [pc, #304]	; (8002ee4 <HAL_DMA_Abort_IT+0x454>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03b      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ee8 <HAL_DMA_Abort_IT+0x458>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d036      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_DMA_Abort_IT+0x45c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d031      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a47      	ldr	r2, [pc, #284]	; (8002ef0 <HAL_DMA_Abort_IT+0x460>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a46      	ldr	r2, [pc, #280]	; (8002ef4 <HAL_DMA_Abort_IT+0x464>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d027      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a44      	ldr	r2, [pc, #272]	; (8002ef8 <HAL_DMA_Abort_IT+0x468>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a43      	ldr	r2, [pc, #268]	; (8002efc <HAL_DMA_Abort_IT+0x46c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_DMA_Abort_IT+0x470>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <HAL_DMA_Abort_IT+0x474>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_DMA_Abort_IT+0x478>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <HAL_DMA_Abort_IT+0x47c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3b      	ldr	r2, [pc, #236]	; (8002f10 <HAL_DMA_Abort_IT+0x480>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x3a0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_DMA_Abort_IT+0x484>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Abort_IT+0x3a4>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_Abort_IT+0x3a6>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	5802541c 	.word	0x5802541c
 8002f00:	58025430 	.word	0x58025430
 8002f04:	58025444 	.word	0x58025444
 8002f08:	58025458 	.word	0x58025458
 8002f0c:	5802546c 	.word	0x5802546c
 8002f10:	58025480 	.word	0x58025480
 8002f14:	58025494 	.word	0x58025494

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f24:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_DMA_IRQHandler+0x1ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a67      	ldr	r2, [pc, #412]	; (80030c8 <HAL_DMA_IRQHandler+0x1b0>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	; (80030cc <HAL_DMA_IRQHandler+0x1b4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04a      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_DMA_IRQHandler+0x1b8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d045      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <HAL_DMA_IRQHandler+0x1bc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d040      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_DMA_IRQHandler+0x1c0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d03b      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a59      	ldr	r2, [pc, #356]	; (80030dc <HAL_DMA_IRQHandler+0x1c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d036      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_DMA_IRQHandler+0x1c8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d031      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a56      	ldr	r2, [pc, #344]	; (80030e4 <HAL_DMA_IRQHandler+0x1cc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d02c      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a54      	ldr	r2, [pc, #336]	; (80030e8 <HAL_DMA_IRQHandler+0x1d0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d027      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a53      	ldr	r2, [pc, #332]	; (80030ec <HAL_DMA_IRQHandler+0x1d4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_DMA_IRQHandler+0x1d8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01d      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a50      	ldr	r2, [pc, #320]	; (80030f4 <HAL_DMA_IRQHandler+0x1dc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d018      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	; (80030f8 <HAL_DMA_IRQHandler+0x1e0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4d      	ldr	r2, [pc, #308]	; (80030fc <HAL_DMA_IRQHandler+0x1e4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4b      	ldr	r2, [pc, #300]	; (8003100 <HAL_DMA_IRQHandler+0x1e8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4a      	ldr	r2, [pc, #296]	; (8003104 <HAL_DMA_IRQHandler+0x1ec>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_IRQHandler+0xd2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_DMA_IRQHandler+0x1f0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_DMA_IRQHandler+0xd6>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 842b 	beq.w	800384c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2208      	movs	r2, #8
 8003000:	409a      	lsls	r2, r3
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a2 	beq.w	8003150 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <HAL_DMA_IRQHandler+0x1b4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d04a      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2d      	ldr	r2, [pc, #180]	; (80030d0 <HAL_DMA_IRQHandler+0x1b8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d045      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d040      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d03b      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_DMA_IRQHandler+0x1c4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d036      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d031      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <HAL_DMA_IRQHandler+0x1cc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02c      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d027      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_DMA_IRQHandler+0x1d4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d022      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_DMA_IRQHandler+0x1d8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d01d      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_DMA_IRQHandler+0x1e4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_DMA_IRQHandler+0x1e8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_DMA_IRQHandler+0x1ec>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_DMA_IRQHandler+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_DMA_IRQHandler+0x1f0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d12f      	bne.n	800310c <HAL_DMA_IRQHandler+0x1f4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e02e      	b.n	8003120 <HAL_DMA_IRQHandler+0x208>
 80030c2:	bf00      	nop
 80030c4:	24000000 	.word	0x24000000
 80030c8:	1b4e81b5 	.word	0x1b4e81b5
 80030cc:	40020010 	.word	0x40020010
 80030d0:	40020028 	.word	0x40020028
 80030d4:	40020040 	.word	0x40020040
 80030d8:	40020058 	.word	0x40020058
 80030dc:	40020070 	.word	0x40020070
 80030e0:	40020088 	.word	0x40020088
 80030e4:	400200a0 	.word	0x400200a0
 80030e8:	400200b8 	.word	0x400200b8
 80030ec:	40020410 	.word	0x40020410
 80030f0:	40020428 	.word	0x40020428
 80030f4:	40020440 	.word	0x40020440
 80030f8:	40020458 	.word	0x40020458
 80030fc:	40020470 	.word	0x40020470
 8003100:	40020488 	.word	0x40020488
 8003104:	400204a0 	.word	0x400204a0
 8003108:	400204b8 	.word	0x400204b8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2208      	movs	r2, #8
 800313e:	409a      	lsls	r2, r3
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d06e      	beq.n	8003244 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_DMA_IRQHandler+0x3f8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d04a      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a67      	ldr	r2, [pc, #412]	; (8003314 <HAL_DMA_IRQHandler+0x3fc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d045      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a66      	ldr	r2, [pc, #408]	; (8003318 <HAL_DMA_IRQHandler+0x400>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d040      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a64      	ldr	r2, [pc, #400]	; (800331c <HAL_DMA_IRQHandler+0x404>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d03b      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a63      	ldr	r2, [pc, #396]	; (8003320 <HAL_DMA_IRQHandler+0x408>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d036      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a61      	ldr	r2, [pc, #388]	; (8003324 <HAL_DMA_IRQHandler+0x40c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_DMA_IRQHandler+0x410>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d02c      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_DMA_IRQHandler+0x414>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d027      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5d      	ldr	r2, [pc, #372]	; (8003330 <HAL_DMA_IRQHandler+0x418>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5b      	ldr	r2, [pc, #364]	; (8003334 <HAL_DMA_IRQHandler+0x41c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01d      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5a      	ldr	r2, [pc, #360]	; (8003338 <HAL_DMA_IRQHandler+0x420>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d018      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a58      	ldr	r2, [pc, #352]	; (800333c <HAL_DMA_IRQHandler+0x424>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_DMA_IRQHandler+0x428>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a55      	ldr	r2, [pc, #340]	; (8003344 <HAL_DMA_IRQHandler+0x42c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_DMA_IRQHandler+0x430>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2ee>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_DMA_IRQHandler+0x434>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10a      	bne.n	800321c <HAL_DMA_IRQHandler+0x304>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e003      	b.n	8003224 <HAL_DMA_IRQHandler+0x30c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2201      	movs	r2, #1
 8003232:	409a      	lsls	r2, r3
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2204      	movs	r2, #4
 800324e:	409a      	lsls	r2, r3
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 808f 	beq.w	8003378 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <HAL_DMA_IRQHandler+0x3f8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d04a      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_DMA_IRQHandler+0x3fc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d045      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_DMA_IRQHandler+0x400>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d040      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_DMA_IRQHandler+0x404>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d03b      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_DMA_IRQHandler+0x408>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d036      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_DMA_IRQHandler+0x40c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d031      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a23      	ldr	r2, [pc, #140]	; (8003328 <HAL_DMA_IRQHandler+0x410>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d02c      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_DMA_IRQHandler+0x414>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d027      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_DMA_IRQHandler+0x418>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_DMA_IRQHandler+0x41c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01d      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_DMA_IRQHandler+0x420>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <HAL_DMA_IRQHandler+0x424>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_DMA_IRQHandler+0x428>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_DMA_IRQHandler+0x42c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_DMA_IRQHandler+0x430>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_DMA_IRQHandler+0x3e2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_DMA_IRQHandler+0x434>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12a      	bne.n	8003350 <HAL_DMA_IRQHandler+0x438>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e023      	b.n	8003358 <HAL_DMA_IRQHandler+0x440>
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2204      	movs	r2, #4
 8003366:	409a      	lsls	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2210      	movs	r2, #16
 8003382:	409a      	lsls	r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a6 	beq.w	80034da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a85      	ldr	r2, [pc, #532]	; (80035a8 <HAL_DMA_IRQHandler+0x690>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a83      	ldr	r2, [pc, #524]	; (80035ac <HAL_DMA_IRQHandler+0x694>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a82      	ldr	r2, [pc, #520]	; (80035b0 <HAL_DMA_IRQHandler+0x698>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a80      	ldr	r2, [pc, #512]	; (80035b4 <HAL_DMA_IRQHandler+0x69c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7f      	ldr	r2, [pc, #508]	; (80035b8 <HAL_DMA_IRQHandler+0x6a0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7d      	ldr	r2, [pc, #500]	; (80035bc <HAL_DMA_IRQHandler+0x6a4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7c      	ldr	r2, [pc, #496]	; (80035c0 <HAL_DMA_IRQHandler+0x6a8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_DMA_IRQHandler+0x6ac>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	; (80035c8 <HAL_DMA_IRQHandler+0x6b0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_DMA_IRQHandler+0x6b4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <HAL_DMA_IRQHandler+0x6b8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_DMA_IRQHandler+0x6c0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_DMA_IRQHandler+0x6c4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_IRQHandler+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_DMA_IRQHandler+0x6cc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10a      	bne.n	8003444 <HAL_DMA_IRQHandler+0x52c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e009      	b.n	8003458 <HAL_DMA_IRQHandler+0x540>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03e      	beq.n	80034da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2210      	movs	r2, #16
 8003466:	409a      	lsls	r2, r3
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d108      	bne.n	800349a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d024      	beq.n	80034da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e01f      	b.n	80034da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01b      	beq.n	80034da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
 80034aa:	e016      	b.n	80034da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0208 	bic.w	r2, r2, #8
 80034c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2220      	movs	r2, #32
 80034e4:	409a      	lsls	r2, r3
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8110 	beq.w	8003710 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <HAL_DMA_IRQHandler+0x690>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_DMA_IRQHandler+0x694>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <HAL_DMA_IRQHandler+0x698>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_DMA_IRQHandler+0x69c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <HAL_DMA_IRQHandler+0x6a0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_DMA_IRQHandler+0x6a4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_DMA_IRQHandler+0x6a8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_DMA_IRQHandler+0x6ac>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_DMA_IRQHandler+0x6b0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_DMA_IRQHandler+0x6b4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <HAL_DMA_IRQHandler+0x6b8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_DMA_IRQHandler+0x6c0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_DMA_IRQHandler+0x6c4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_IRQHandler+0x678>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_DMA_IRQHandler+0x6cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d12b      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x6d0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	e02a      	b.n	80035fc <HAL_DMA_IRQHandler+0x6e4>
 80035a6:	bf00      	nop
 80035a8:	40020010 	.word	0x40020010
 80035ac:	40020028 	.word	0x40020028
 80035b0:	40020040 	.word	0x40020040
 80035b4:	40020058 	.word	0x40020058
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40020088 	.word	0x40020088
 80035c0:	400200a0 	.word	0x400200a0
 80035c4:	400200b8 	.word	0x400200b8
 80035c8:	40020410 	.word	0x40020410
 80035cc:	40020428 	.word	0x40020428
 80035d0:	40020440 	.word	0x40020440
 80035d4:	40020458 	.word	0x40020458
 80035d8:	40020470 	.word	0x40020470
 80035dc:	40020488 	.word	0x40020488
 80035e0:	400204a0 	.word	0x400204a0
 80035e4:	400204b8 	.word	0x400204b8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8087 	beq.w	8003710 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2220      	movs	r2, #32
 800360c:	409a      	lsls	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b04      	cmp	r3, #4
 800361c:	d139      	bne.n	8003692 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0216 	bic.w	r2, r2, #22
 800362c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800363c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_DMA_IRQHandler+0x736>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0208 	bic.w	r2, r2, #8
 800365c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	223f      	movs	r2, #63	; 0x3f
 8003668:	409a      	lsls	r2, r3
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 834a 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
          }
          return;
 8003690:	e344      	b.n	8003d1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e027      	b.n	8003710 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d023      	beq.n	8003710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
 80036d0:	e01e      	b.n	8003710 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10f      	bne.n	8003700 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0210 	bic.w	r2, r2, #16
 80036ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8306 	beq.w	8003d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8088 	beq.w	8003838 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2204      	movs	r2, #4
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a7a      	ldr	r2, [pc, #488]	; (8003920 <HAL_DMA_IRQHandler+0xa08>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04a      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a79      	ldr	r2, [pc, #484]	; (8003924 <HAL_DMA_IRQHandler+0xa0c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d045      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a77      	ldr	r2, [pc, #476]	; (8003928 <HAL_DMA_IRQHandler+0xa10>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a76      	ldr	r2, [pc, #472]	; (800392c <HAL_DMA_IRQHandler+0xa14>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d03b      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a74      	ldr	r2, [pc, #464]	; (8003930 <HAL_DMA_IRQHandler+0xa18>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d036      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	; (8003934 <HAL_DMA_IRQHandler+0xa1c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a71      	ldr	r2, [pc, #452]	; (8003938 <HAL_DMA_IRQHandler+0xa20>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02c      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a70      	ldr	r2, [pc, #448]	; (800393c <HAL_DMA_IRQHandler+0xa24>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_DMA_IRQHandler+0xa28>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6d      	ldr	r2, [pc, #436]	; (8003944 <HAL_DMA_IRQHandler+0xa2c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6b      	ldr	r2, [pc, #428]	; (8003948 <HAL_DMA_IRQHandler+0xa30>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6a      	ldr	r2, [pc, #424]	; (800394c <HAL_DMA_IRQHandler+0xa34>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a68      	ldr	r2, [pc, #416]	; (8003950 <HAL_DMA_IRQHandler+0xa38>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a67      	ldr	r2, [pc, #412]	; (8003954 <HAL_DMA_IRQHandler+0xa3c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_DMA_IRQHandler+0xa40>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x8b8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a64      	ldr	r2, [pc, #400]	; (800395c <HAL_DMA_IRQHandler+0xa44>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <HAL_DMA_IRQHandler+0x8ca>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_DMA_IRQHandler+0x8da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d307      	bcc.n	800380e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f2      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x8da>
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800380e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003826:	e003      	b.n	8003830 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8272 	beq.w	8003d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e26c      	b.n	8003d26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a43      	ldr	r2, [pc, #268]	; (8003960 <HAL_DMA_IRQHandler+0xa48>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a42      	ldr	r2, [pc, #264]	; (8003964 <HAL_DMA_IRQHandler+0xa4c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a40      	ldr	r2, [pc, #256]	; (8003968 <HAL_DMA_IRQHandler+0xa50>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_DMA_IRQHandler+0xa54>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <HAL_DMA_IRQHandler+0xa58>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <HAL_DMA_IRQHandler+0xa5c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <HAL_DMA_IRQHandler+0xa60>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_IRQHandler+0x984>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a39      	ldr	r2, [pc, #228]	; (800397c <HAL_DMA_IRQHandler+0xa64>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x988>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_DMA_IRQHandler+0x98a>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 823f 	beq.w	8003d26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2204      	movs	r2, #4
 80038ba:	409a      	lsls	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80cd 	beq.w	8003a60 <HAL_DMA_IRQHandler+0xb48>
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80c7 	beq.w	8003a60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2204      	movs	r2, #4
 80038dc:	409a      	lsls	r2, r3
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d049      	beq.n	8003980 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8210 	beq.w	8003d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003908:	e20a      	b.n	8003d20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8206 	beq.w	8003d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391c:	e200      	b.n	8003d20 <HAL_DMA_IRQHandler+0xe08>
 800391e:	bf00      	nop
 8003920:	40020010 	.word	0x40020010
 8003924:	40020028 	.word	0x40020028
 8003928:	40020040 	.word	0x40020040
 800392c:	40020058 	.word	0x40020058
 8003930:	40020070 	.word	0x40020070
 8003934:	40020088 	.word	0x40020088
 8003938:	400200a0 	.word	0x400200a0
 800393c:	400200b8 	.word	0x400200b8
 8003940:	40020410 	.word	0x40020410
 8003944:	40020428 	.word	0x40020428
 8003948:	40020440 	.word	0x40020440
 800394c:	40020458 	.word	0x40020458
 8003950:	40020470 	.word	0x40020470
 8003954:	40020488 	.word	0x40020488
 8003958:	400204a0 	.word	0x400204a0
 800395c:	400204b8 	.word	0x400204b8
 8003960:	58025408 	.word	0x58025408
 8003964:	5802541c 	.word	0x5802541c
 8003968:	58025430 	.word	0x58025430
 800396c:	58025444 	.word	0x58025444
 8003970:	58025458 	.word	0x58025458
 8003974:	5802546c 	.word	0x5802546c
 8003978:	58025480 	.word	0x58025480
 800397c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d160      	bne.n	8003a4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a8c      	ldr	r2, [pc, #560]	; (8003bc0 <HAL_DMA_IRQHandler+0xca8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_DMA_IRQHandler+0xcac>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a89      	ldr	r2, [pc, #548]	; (8003bc8 <HAL_DMA_IRQHandler+0xcb0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_DMA_IRQHandler+0xcb4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a86      	ldr	r2, [pc, #536]	; (8003bd0 <HAL_DMA_IRQHandler+0xcb8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a84      	ldr	r2, [pc, #528]	; (8003bd4 <HAL_DMA_IRQHandler+0xcbc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a83      	ldr	r2, [pc, #524]	; (8003bd8 <HAL_DMA_IRQHandler+0xcc0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a81      	ldr	r2, [pc, #516]	; (8003bdc <HAL_DMA_IRQHandler+0xcc4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a80      	ldr	r2, [pc, #512]	; (8003be0 <HAL_DMA_IRQHandler+0xcc8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7e      	ldr	r2, [pc, #504]	; (8003be4 <HAL_DMA_IRQHandler+0xccc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <HAL_DMA_IRQHandler+0xcd0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a7b      	ldr	r2, [pc, #492]	; (8003bec <HAL_DMA_IRQHandler+0xcd4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7a      	ldr	r2, [pc, #488]	; (8003bf0 <HAL_DMA_IRQHandler+0xcd8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a78      	ldr	r2, [pc, #480]	; (8003bf4 <HAL_DMA_IRQHandler+0xcdc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a77      	ldr	r2, [pc, #476]	; (8003bf8 <HAL_DMA_IRQHandler+0xce0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xb12>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a75      	ldr	r2, [pc, #468]	; (8003bfc <HAL_DMA_IRQHandler+0xce4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <HAL_DMA_IRQHandler+0xb24>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e007      	b.n	8003a4c <HAL_DMA_IRQHandler+0xb34>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8165 	beq.w	8003d20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a5e:	e15f      	b.n	8003d20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2202      	movs	r2, #2
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80c5 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xce8>
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80bf 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 813a 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab8:	e134      	b.n	8003d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8130 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003acc:	e12a      	b.n	8003d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d168      	bne.n	8003baa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <HAL_DMA_IRQHandler+0xca8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <HAL_DMA_IRQHandler+0xcac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <HAL_DMA_IRQHandler+0xcb0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_DMA_IRQHandler+0xcb4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a32      	ldr	r2, [pc, #200]	; (8003bd0 <HAL_DMA_IRQHandler+0xcb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_DMA_IRQHandler+0xcbc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <HAL_DMA_IRQHandler+0xcc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2e      	ldr	r2, [pc, #184]	; (8003bdc <HAL_DMA_IRQHandler+0xcc4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <HAL_DMA_IRQHandler+0xcc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_DMA_IRQHandler+0xccc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <HAL_DMA_IRQHandler+0xcd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	; (8003bec <HAL_DMA_IRQHandler+0xcd4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <HAL_DMA_IRQHandler+0xcd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_DMA_IRQHandler+0xcdc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <HAL_DMA_IRQHandler+0xce0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xc60>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_DMA_IRQHandler+0xce4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <HAL_DMA_IRQHandler+0xc72>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0214 	bic.w	r2, r2, #20
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_DMA_IRQHandler+0xc82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020a 	bic.w	r2, r2, #10
 8003b98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80b8 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbc:	e0b2      	b.n	8003d24 <HAL_DMA_IRQHandler+0xe0c>
 8003bbe:	bf00      	nop
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2208      	movs	r2, #8
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8088 	beq.w	8003d26 <HAL_DMA_IRQHandler+0xe0e>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8082 	beq.w	8003d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a41      	ldr	r2, [pc, #260]	; (8003d2c <HAL_DMA_IRQHandler+0xe14>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a3f      	ldr	r2, [pc, #252]	; (8003d30 <HAL_DMA_IRQHandler+0xe18>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3e      	ldr	r2, [pc, #248]	; (8003d34 <HAL_DMA_IRQHandler+0xe1c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d040      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3c      	ldr	r2, [pc, #240]	; (8003d38 <HAL_DMA_IRQHandler+0xe20>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <HAL_DMA_IRQHandler+0xe24>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d036      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a39      	ldr	r2, [pc, #228]	; (8003d40 <HAL_DMA_IRQHandler+0xe28>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d031      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_DMA_IRQHandler+0xe2c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d02c      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a36      	ldr	r2, [pc, #216]	; (8003d48 <HAL_DMA_IRQHandler+0xe30>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d027      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a35      	ldr	r2, [pc, #212]	; (8003d4c <HAL_DMA_IRQHandler+0xe34>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <HAL_DMA_IRQHandler+0xe38>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <HAL_DMA_IRQHandler+0xe3c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <HAL_DMA_IRQHandler+0xe40>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_DMA_IRQHandler+0xe44>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <HAL_DMA_IRQHandler+0xe48>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <HAL_DMA_IRQHandler+0xe4c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xdaa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_DMA_IRQHandler+0xe50>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0xdbc>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 021c 	bic.w	r2, r2, #28
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e007      	b.n	8003ce4 <HAL_DMA_IRQHandler+0xdcc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 020e 	bic.w	r2, r2, #14
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
 8003d1a:	e004      	b.n	8003d26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d1c:	bf00      	nop
 8003d1e:	e002      	b.n	8003d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d20:	bf00      	nop
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8

08003d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <DMA_CalcBaseAndBitshift+0x118>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a41      	ldr	r2, [pc, #260]	; (8003e88 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3f      	ldr	r2, [pc, #252]	; (8003e8c <DMA_CalcBaseAndBitshift+0x120>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <DMA_CalcBaseAndBitshift+0x124>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <DMA_CalcBaseAndBitshift+0x128>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <DMA_CalcBaseAndBitshift+0x12c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a39      	ldr	r2, [pc, #228]	; (8003e9c <DMA_CalcBaseAndBitshift+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x134>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a36      	ldr	r2, [pc, #216]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x138>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a33      	ldr	r2, [pc, #204]	; (8003eac <DMA_CalcBaseAndBitshift+0x140>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a32      	ldr	r2, [pc, #200]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x144>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x148>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <DMA_CalcBaseAndBitshift+0x150>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <DMA_CalcBaseAndBitshift+0xa8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x154>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <DMA_CalcBaseAndBitshift+0xac>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <DMA_CalcBaseAndBitshift+0xae>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3b10      	subs	r3, #16
 8003e26:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x158>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e38:	5cd3      	ldrb	r3, [r2, r3]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d908      	bls.n	8003e58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <DMA_CalcBaseAndBitshift+0x160>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	659a      	str	r2, [r3, #88]	; 0x58
 8003e56:	e00d      	b.n	8003e74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <DMA_CalcBaseAndBitshift+0x160>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
 8003e66:	e005      	b.n	8003e74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	aaaaaaab 	.word	0xaaaaaaab
 8003ec8:	0800aee8 	.word	0x0800aee8
 8003ecc:	fffffc00 	.word	0xfffffc00

08003ed0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d120      	bne.n	8003f26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d858      	bhi.n	8003f9e <DMA_CheckFifoParam+0xce>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <DMA_CheckFifoParam+0x24>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f17 	.word	0x08003f17
 8003efc:	08003f05 	.word	0x08003f05
 8003f00:	08003f9f 	.word	0x08003f9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d048      	beq.n	8003fa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f14:	e045      	b.n	8003fa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1e:	d142      	bne.n	8003fa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f24:	e03f      	b.n	8003fa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	d123      	bne.n	8003f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d838      	bhi.n	8003faa <DMA_CheckFifoParam+0xda>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <DMA_CheckFifoParam+0x70>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f57 	.word	0x08003f57
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003f69 	.word	0x08003f69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
        break;
 8003f54:	e030      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d025      	beq.n	8003fae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f66:	e022      	b.n	8003fae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f70:	d11f      	bne.n	8003fb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f76:	e01c      	b.n	8003fb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d902      	bls.n	8003f86 <DMA_CheckFifoParam+0xb6>
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f84:	e018      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e015      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8003f9c:	e00b      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e00a      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e008      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e006      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
    break;
 8003fb6:	bf00      	nop
    }
  }

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop

08003fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a38      	ldr	r2, [pc, #224]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a36      	ldr	r2, [pc, #216]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a33      	ldr	r2, [pc, #204]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a32      	ldr	r2, [pc, #200]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3b08      	subs	r3, #8
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004064:	e024      	b.n	80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	3b10      	subs	r3, #16
 800406e:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d806      	bhi.n	800408e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d902      	bls.n	800408e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3308      	adds	r3, #8
 800408c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	58025408 	.word	0x58025408
 80040c0:	5802541c 	.word	0x5802541c
 80040c4:	58025430 	.word	0x58025430
 80040c8:	58025444 	.word	0x58025444
 80040cc:	58025458 	.word	0x58025458
 80040d0:	5802546c 	.word	0x5802546c
 80040d4:	58025480 	.word	0x58025480
 80040d8:	58025494 	.word	0x58025494
 80040dc:	cccccccd 	.word	0xcccccccd
 80040e0:	16009600 	.word	0x16009600
 80040e4:	58025880 	.word	0x58025880
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	4002040f 	.word	0x4002040f
 80040f4:	10008200 	.word	0x10008200
 80040f8:	40020880 	.word	0x40020880

080040fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04a      	beq.n	80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d847      	bhi.n	80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d01d      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004184:	671a      	str	r2, [r3, #112]	; 0x70
 8004186:	e009      	b.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800419a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	58025408 	.word	0x58025408
 80041b8:	5802541c 	.word	0x5802541c
 80041bc:	58025430 	.word	0x58025430
 80041c0:	58025444 	.word	0x58025444
 80041c4:	58025458 	.word	0x58025458
 80041c8:	5802546c 	.word	0x5802546c
 80041cc:	58025480 	.word	0x58025480
 80041d0:	58025494 	.word	0x58025494
 80041d4:	1600963f 	.word	0x1600963f
 80041d8:	58025940 	.word	0x58025940
 80041dc:	1000823f 	.word	0x1000823f
 80041e0:	40020940 	.word	0x40020940

080041e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0c6      	b.n	8004384 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd fc1a 	bl	8001a38 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2223      	movs	r2, #35	; 0x23
 8004208:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420a:	4b60      	ldr	r3, [pc, #384]	; (800438c <HAL_ETH_Init+0x1a8>)
 800420c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004210:	4a5e      	ldr	r2, [pc, #376]	; (800438c <HAL_ETH_Init+0x1a8>)
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800421a:	4b5c      	ldr	r3, [pc, #368]	; (800438c <HAL_ETH_Init+0x1a8>)
 800421c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7a1b      	ldrb	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004230:	2000      	movs	r0, #0
 8004232:	f7fd ffad 	bl	8002190 <HAL_SYSCFG_ETHInterfaceSelect>
 8004236:	e003      	b.n	8004240 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004238:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800423c:	f7fd ffa8 	bl	8002190 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004258:	f7fd ff5e 	bl	8002118 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800425e:	e00f      	b.n	8004280 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004260:	f7fd ff5a 	bl	8002118 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800426e:	d907      	bls.n	8004280 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	22e0      	movs	r2, #224	; 0xe0
 800427a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e081      	b.n	8004384 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e6      	bne.n	8004260 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fac0 	bl	8004818 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004298:	f001 fed8 	bl	800604c <HAL_RCC_GetHCLKFreq>
 800429c:	4603      	mov	r3, r0
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_ETH_Init+0x1ac>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	0c9a      	lsrs	r2, r3, #18
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3a01      	subs	r2, #1
 80042ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa13 	bl	80046dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042d0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	22e0      	movs	r2, #224	; 0xe0
 80042e8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e04a      	b.n	8004384 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80042f6:	4413      	add	r3, r2
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <HAL_ETH_Init+0x1b0>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6952      	ldr	r2, [r2, #20]
 8004302:	0052      	lsls	r2, r2, #1
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	431a      	orrs	r2, r3
 800430a:	f241 1308 	movw	r3, #4360	; 0x1108
 800430e:	440b      	add	r3, r1
 8004310:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fad8 	bl	80048c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fb1c 	bl	8004956 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	3305      	adds	r3, #5
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	3303      	adds	r3, #3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	061a      	lsls	r2, r3, #24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	3302      	adds	r3, #2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	3301      	adds	r3, #1
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800435c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800436a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800436c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2210      	movs	r2, #16
 800437a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2210      	movs	r2, #16
 8004380:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	58024400 	.word	0x58024400
 8004390:	431bde83 	.word	0x431bde83
 8004394:	ffff8001 	.word	0xffff8001

08004398 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80043aa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80043b2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7b1b      	ldrb	r3, [r3, #12]
 80043b8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80043ba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	7b5b      	ldrb	r3, [r3, #13]
 80043c0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043c2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	7b9b      	ldrb	r3, [r3, #14]
 80043c8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80043ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	7bdb      	ldrb	r3, [r3, #15]
 80043d0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043d2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	7c12      	ldrb	r2, [r2, #16]
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d102      	bne.n	80043e2 <ETH_SetMACConfig+0x4a>
 80043dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043e0:	e000      	b.n	80043e4 <ETH_SetMACConfig+0x4c>
 80043e2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043e4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	7c52      	ldrb	r2, [r2, #17]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	d102      	bne.n	80043f4 <ETH_SetMACConfig+0x5c>
 80043ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043f2:	e000      	b.n	80043f6 <ETH_SetMACConfig+0x5e>
 80043f4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80043f6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	7c9b      	ldrb	r3, [r3, #18]
 80043fc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80043fe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004404:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800440a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	7f1b      	ldrb	r3, [r3, #28]
 8004410:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004412:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	7f5b      	ldrb	r3, [r3, #29]
 8004418:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800441a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	7f92      	ldrb	r2, [r2, #30]
 8004420:	2a00      	cmp	r2, #0
 8004422:	d102      	bne.n	800442a <ETH_SetMACConfig+0x92>
 8004424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004428:	e000      	b.n	800442c <ETH_SetMACConfig+0x94>
 800442a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800442c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	7fdb      	ldrb	r3, [r3, #31]
 8004432:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004434:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	f892 2020 	ldrb.w	r2, [r2, #32]
 800443c:	2a00      	cmp	r2, #0
 800443e:	d102      	bne.n	8004446 <ETH_SetMACConfig+0xae>
 8004440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004444:	e000      	b.n	8004448 <ETH_SetMACConfig+0xb0>
 8004446:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004448:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800444e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004456:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004458:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <ETH_SetMACConfig+0x22c>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	430b      	orrs	r3, r1
 8004474:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004482:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004484:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800448c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800448e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004496:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004498:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	d102      	bne.n	80044aa <ETH_SetMACConfig+0x112>
 80044a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044a8:	e000      	b.n	80044ac <ETH_SetMACConfig+0x114>
 80044aa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80044ac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <ETH_SetMACConfig+0x230>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <ETH_SetMACConfig+0x234>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80044fa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004502:	2a00      	cmp	r2, #0
 8004504:	d101      	bne.n	800450a <ETH_SetMACConfig+0x172>
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	e000      	b.n	800450c <ETH_SetMACConfig+0x174>
 800450a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800450c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	430b      	orrs	r3, r1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004534:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800453c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f023 0103 	bic.w	r1, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	430a      	orrs	r2, r1
 8004556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004562:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800457e:	2a00      	cmp	r2, #0
 8004580:	d101      	bne.n	8004586 <ETH_SetMACConfig+0x1ee>
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	e000      	b.n	8004588 <ETH_SetMACConfig+0x1f0>
 8004586:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004588:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004590:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004592:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800459a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80045a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	00048083 	.word	0x00048083
 80045c8:	c0f88000 	.word	0xc0f88000
 80045cc:	fffffef0 	.word	0xfffffef0

080045d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <ETH_SetDMAConfig+0xf8>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6809      	ldr	r1, [r1, #0]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80045f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	791b      	ldrb	r3, [r3, #4]
 80045fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004602:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
 8004608:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f241 0304 	movw	r3, #4100	; 0x1004
 8004616:	4413      	add	r3, r2
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <ETH_SetDMAConfig+0xfc>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6811      	ldr	r1, [r2, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	431a      	orrs	r2, r3
 8004626:	f241 0304 	movw	r3, #4100	; 0x1004
 800462a:	440b      	add	r3, r1
 800462c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	7b5b      	ldrb	r3, [r3, #13]
 8004632:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <ETH_SetDMAConfig+0x100>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6811      	ldr	r1, [r2, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	431a      	orrs	r2, r3
 8004652:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004656:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	7d1b      	ldrb	r3, [r3, #20]
 8004660:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004662:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	7f5b      	ldrb	r3, [r3, #29]
 8004668:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f241 1304 	movw	r3, #4356	; 0x1104
 8004676:	4413      	add	r3, r2
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <ETH_SetDMAConfig+0x104>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6811      	ldr	r1, [r2, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	431a      	orrs	r2, r3
 8004686:	f241 1304 	movw	r3, #4356	; 0x1104
 800468a:	440b      	add	r3, r1
 800468c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	7f1b      	ldrb	r3, [r3, #28]
 8004692:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	f241 1308 	movw	r3, #4360	; 0x1108
 80046a4:	4413      	add	r3, r2
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <ETH_SetDMAConfig+0x108>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80046b8:	440b      	add	r3, r1
 80046ba:	601a      	str	r2, [r3, #0]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	ffff87fd 	.word	0xffff87fd
 80046cc:	ffff2ffe 	.word	0xffff2ffe
 80046d0:	fffec000 	.word	0xfffec000
 80046d4:	ffc0efef 	.word	0xffc0efef
 80046d8:	7fc0ffff 	.word	0x7fc0ffff

080046dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b0a4      	sub	sp, #144	; 0x90
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80046ea:	2300      	movs	r3, #0
 80046ec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800471c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004724:	2300      	movs	r3, #0
 8004726:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004734:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004738:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004756:	2300      	movs	r3, #0
 8004758:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800475a:	2300      	movs	r3, #0
 800475c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800475e:	2300      	movs	r3, #0
 8004760:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004774:	2320      	movs	r3, #32
 8004776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004786:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800478c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004798:	2302      	movs	r3, #2
 800479a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80047b6:	2300      	movs	r3, #0
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fde6 	bl	8004398 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047d0:	2301      	movs	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80047fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fee1 	bl	80045d0 <ETH_SetDMAConfig>
}
 800480e:	bf00      	nop
 8004810:	3790      	adds	r7, #144	; 0x90
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004828:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004830:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004832:	f001 fc0b 	bl	800604c <HAL_RCC_GetHCLKFreq>
 8004836:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d908      	bls.n	8004852 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d804      	bhi.n	8004852 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e027      	b.n	80048a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d908      	bls.n	800486c <ETH_MAC_MDIO_ClkConfig+0x54>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d204      	bcs.n	800486c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e01a      	b.n	80048a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d303      	bcc.n	800487c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d911      	bls.n	80048a0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d908      	bls.n	8004896 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d804      	bhi.n	8004896 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e005      	b.n	80048a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e000      	b.n	80048a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80048a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	01312cff 	.word	0x01312cff
 80048b8:	02160ebf 	.word	0x02160ebf
 80048bc:	03938700 	.word	0x03938700
 80048c0:	05f5e0ff 	.word	0x05f5e0ff
 80048c4:	08f0d17f 	.word	0x08f0d17f

080048c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e01d      	b.n	8004912 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	3206      	adds	r2, #6
 8004908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d9de      	bls.n	80048d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f241 132c 	movw	r3, #4396	; 0x112c
 8004926:	4413      	add	r3, r2
 8004928:	2203      	movs	r2, #3
 800492a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68d9      	ldr	r1, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	f241 1314 	movw	r3, #4372	; 0x1114
 8004938:	4413      	add	r3, r2
 800493a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e024      	b.n	80049ae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6919      	ldr	r1, [r3, #16]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2200      	movs	r2, #0
 8004998:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3310      	adds	r3, #16
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d9d7      	bls.n	8004964 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f241 1330 	movw	r3, #4400	; 0x1130
 80049da:	4413      	add	r3, r2
 80049dc:	2203      	movs	r2, #3
 80049de:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6919      	ldr	r1, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80049ec:	4413      	add	r3, r2
 80049ee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f241 1328 	movw	r3, #4392	; 0x1128
 8004a00:	4413      	add	r3, r2
 8004a02:	6019      	str	r1, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	; 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a1e:	4b89      	ldr	r3, [pc, #548]	; (8004c44 <HAL_GPIO_Init+0x234>)
 8004a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a22:	e194      	b.n	8004d4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	4013      	ands	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8186 	beq.w	8004d48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d005      	beq.n	8004a54 <HAL_GPIO_Init+0x44>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d130      	bne.n	8004ab6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0201 	and.w	r2, r3, #1
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d017      	beq.n	8004af2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2203      	movs	r2, #3
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d123      	bne.n	8004b46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	08da      	lsrs	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3208      	adds	r2, #8
 8004b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80e0 	beq.w	8004d48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <HAL_GPIO_Init+0x238>)
 8004b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b8e:	4a2e      	ldr	r2, [pc, #184]	; (8004c48 <HAL_GPIO_Init+0x238>)
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_GPIO_Init+0x238>)
 8004b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <HAL_GPIO_Init+0x23c>)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	3302      	adds	r3, #2
 8004bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <HAL_GPIO_Init+0x240>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d052      	beq.n	8004c78 <HAL_GPIO_Init+0x268>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_GPIO_Init+0x244>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d031      	beq.n	8004c3e <HAL_GPIO_Init+0x22e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_GPIO_Init+0x248>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02b      	beq.n	8004c3a <HAL_GPIO_Init+0x22a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_GPIO_Init+0x24c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d025      	beq.n	8004c36 <HAL_GPIO_Init+0x226>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_GPIO_Init+0x250>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <HAL_GPIO_Init+0x222>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_GPIO_Init+0x254>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d019      	beq.n	8004c2e <HAL_GPIO_Init+0x21e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <HAL_GPIO_Init+0x258>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_GPIO_Init+0x21a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <HAL_GPIO_Init+0x25c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00d      	beq.n	8004c26 <HAL_GPIO_Init+0x216>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_GPIO_Init+0x260>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <HAL_GPIO_Init+0x212>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_GPIO_Init+0x264>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_GPIO_Init+0x20e>
 8004c1a:	2309      	movs	r3, #9
 8004c1c:	e02d      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c1e:	230a      	movs	r3, #10
 8004c20:	e02b      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c22:	2308      	movs	r3, #8
 8004c24:	e029      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c26:	2307      	movs	r3, #7
 8004c28:	e027      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e025      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e023      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c32:	2304      	movs	r3, #4
 8004c34:	e021      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e01f      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e01d      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e01b      	b.n	8004c7a <HAL_GPIO_Init+0x26a>
 8004c42:	bf00      	nop
 8004c44:	58000080 	.word	0x58000080
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58000400 	.word	0x58000400
 8004c50:	58020000 	.word	0x58020000
 8004c54:	58020400 	.word	0x58020400
 8004c58:	58020800 	.word	0x58020800
 8004c5c:	58020c00 	.word	0x58020c00
 8004c60:	58021000 	.word	0x58021000
 8004c64:	58021400 	.word	0x58021400
 8004c68:	58021800 	.word	0x58021800
 8004c6c:	58021c00 	.word	0x58021c00
 8004c70:	58022000 	.word	0x58022000
 8004c74:	58022400 	.word	0x58022400
 8004c78:	2300      	movs	r3, #0
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	f002 0203 	and.w	r2, r2, #3
 8004c80:	0092      	lsls	r2, r2, #2
 8004c82:	4093      	lsls	r3, r2
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8a:	4938      	ldr	r1, [pc, #224]	; (8004d6c <HAL_GPIO_Init+0x35c>)
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	3302      	adds	r3, #2
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f ae63 	bne.w	8004a24 <HAL_GPIO_Init+0x14>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	bf00      	nop
 8004d62:	3724      	adds	r7, #36	; 0x24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	58000400 	.word	0x58000400

08004d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	887b      	ldrh	r3, [r7, #2]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e001      	b.n	8004d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
 8004dac:	4613      	mov	r3, r2
 8004dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004db0:	787b      	ldrb	r3, [r7, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004db6:	887a      	ldrh	r2, [r7, #2]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004dbc:	e003      	b.n	8004dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	041a      	lsls	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ddc:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <HAL_HSEM_FastTake+0x2c>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3320      	adds	r3, #32
 8004de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <HAL_HSEM_FastTake+0x30>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d101      	bne.n	8004df0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	58026400 	.word	0x58026400
 8004e04:	80000300 	.word	0x80000300

08004e08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004e12:	4906      	ldr	r1, [pc, #24]	; (8004e2c <HAL_HSEM_Release+0x24>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	58026400 	.word	0x58026400

08004e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	b08f      	sub	sp, #60	; 0x3c
 8004e34:	af0a      	add	r7, sp, #40	; 0x28
 8004e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e116      	b.n	8005070 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fc ffe5 	bl	8001e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f004 fb7b 	bl	800957c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	687e      	ldr	r6, [r7, #4]
 8004e8e:	466d      	mov	r5, sp
 8004e90:	f106 0410 	add.w	r4, r6, #16
 8004e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ea4:	1d33      	adds	r3, r6, #4
 8004ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea8:	6838      	ldr	r0, [r7, #0]
 8004eaa:	f004 faf9 	bl	80094a0 <USB_CoreInit>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0d7      	b.n	8005070 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f004 fb69 	bl	800959e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e04a      	b.n	8004f68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	333d      	adds	r3, #61	; 0x3d
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	333c      	adds	r3, #60	; 0x3c
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	b298      	uxth	r0, r3
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3342      	adds	r3, #66	; 0x42
 8004f0e:	4602      	mov	r2, r0
 8004f10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	333f      	adds	r3, #63	; 0x3f
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3344      	adds	r3, #68	; 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3348      	adds	r3, #72	; 0x48
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3350      	adds	r3, #80	; 0x50
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	3301      	adds	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3af      	bcc.n	8004ed2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e044      	b.n	8005002 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	3301      	adds	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d3b5      	bcc.n	8004f78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	687e      	ldr	r6, [r7, #4]
 8005014:	466d      	mov	r5, sp
 8005016:	f106 0410 	add.w	r4, r6, #16
 800501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800501c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800501e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005026:	e885 0003 	stmia.w	r5, {r0, r1}
 800502a:	1d33      	adds	r3, r6, #4
 800502c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800502e:	6838      	ldr	r0, [r7, #0]
 8005030:	f004 fb02 	bl	8009638 <USB_DevInit>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e014      	b.n	8005070 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b01      	cmp	r3, #1
 800505c:	d102      	bne.n	8005064 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f80a 	bl	8005078 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f004 fcbc 	bl	80099e6 <USB_DevDisconnect>

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005078 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_PCDEx_ActivateLPM+0x44>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	10000003 	.word	0x10000003

080050c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80050c8:	4b29      	ldr	r3, [pc, #164]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d00a      	beq.n	80050ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050d4:	4b26      	ldr	r3, [pc, #152]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d001      	beq.n	80050e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e040      	b.n	8005168 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e03e      	b.n	8005168 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80050f2:	491f      	ldr	r1, [pc, #124]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050fa:	f7fd f80d 	bl	8002118 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005100:	e009      	b.n	8005116 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005102:	f7fd f809 	bl	8002118 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005110:	d901      	bls.n	8005116 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e028      	b.n	8005168 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005116:	4b16      	ldr	r3, [pc, #88]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	d1ee      	bne.n	8005102 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b1e      	cmp	r3, #30
 8005128:	d008      	beq.n	800513c <HAL_PWREx_ConfigSupply+0x7c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b2e      	cmp	r3, #46	; 0x2e
 800512e:	d005      	beq.n	800513c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b1d      	cmp	r3, #29
 8005134:	d002      	beq.n	800513c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b2d      	cmp	r3, #45	; 0x2d
 800513a:	d114      	bne.n	8005166 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800513c:	f7fc ffec 	bl	8002118 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005142:	e009      	b.n	8005158 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005144:	f7fc ffe8 	bl	8002118 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005152:	d901      	bls.n	8005158 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_PWREx_ConfigSupply+0xb0>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d1ee      	bne.n	8005144 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	58024800 	.word	0x58024800

08005174 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800517e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005182:	60d3      	str	r3, [r2, #12]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58024800 	.word	0x58024800

08005194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f000 bc1c 	b.w	80059e0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8087 	beq.w	80052c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b6:	4b9e      	ldr	r3, [pc, #632]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051c0:	4b9b      	ldr	r3, [pc, #620]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d007      	beq.n	80051dc <HAL_RCC_OscConfig+0x48>
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	2b18      	cmp	r3, #24
 80051d0:	d110      	bne.n	80051f4 <HAL_RCC_OscConfig+0x60>
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d10b      	bne.n	80051f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	4b94      	ldr	r3, [pc, #592]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d06c      	beq.n	80052c2 <HAL_RCC_OscConfig+0x12e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d168      	bne.n	80052c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e3f5      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d106      	bne.n	800520c <HAL_RCC_OscConfig+0x78>
 80051fe:	4b8c      	ldr	r3, [pc, #560]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a8b      	ldr	r2, [pc, #556]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e02e      	b.n	800526a <HAL_RCC_OscConfig+0xd6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <HAL_RCC_OscConfig+0x9a>
 8005214:	4b86      	ldr	r3, [pc, #536]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a85      	ldr	r2, [pc, #532]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	4b83      	ldr	r3, [pc, #524]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a82      	ldr	r2, [pc, #520]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e01d      	b.n	800526a <HAL_RCC_OscConfig+0xd6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0xbe>
 8005238:	4b7d      	ldr	r3, [pc, #500]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800523e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b7a      	ldr	r3, [pc, #488]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a79      	ldr	r2, [pc, #484]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800524a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e00b      	b.n	800526a <HAL_RCC_OscConfig+0xd6>
 8005252:	4b77      	ldr	r3, [pc, #476]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a76      	ldr	r2, [pc, #472]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b74      	ldr	r3, [pc, #464]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a73      	ldr	r2, [pc, #460]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005268:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fc ff51 	bl	8002118 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800527a:	f7fc ff4d 	bl	8002118 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b64      	cmp	r3, #100	; 0x64
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e3a9      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800528c:	4b68      	ldr	r3, [pc, #416]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0xe6>
 8005298:	e014      	b.n	80052c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529a:	f7fc ff3d 	bl	8002118 <HAL_GetTick>
 800529e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a2:	f7fc ff39 	bl	8002118 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	; 0x64
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e395      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052b4:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f0      	bne.n	80052a2 <HAL_RCC_OscConfig+0x10e>
 80052c0:	e000      	b.n	80052c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80ca 	beq.w	8005466 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d2:	4b57      	ldr	r3, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052dc:	4b54      	ldr	r3, [pc, #336]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_RCC_OscConfig+0x164>
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b18      	cmp	r3, #24
 80052ec:	d156      	bne.n	800539c <HAL_RCC_OscConfig+0x208>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d151      	bne.n	800539c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_OscConfig+0x17c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e367      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005310:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f023 0219 	bic.w	r2, r3, #25
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4944      	ldr	r1, [pc, #272]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005322:	f7fc fef9 	bl	8002118 <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532a:	f7fc fef5 	bl	8002118 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e351      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800533c:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	f7fc ff16 	bl	8002178 <HAL_GetREVID>
 800534c:	4603      	mov	r3, r0
 800534e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005352:	4293      	cmp	r3, r2
 8005354:	d817      	bhi.n	8005386 <HAL_RCC_OscConfig+0x1f2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d108      	bne.n	8005370 <HAL_RCC_OscConfig+0x1dc>
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005366:	4a32      	ldr	r2, [pc, #200]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536e:	e07a      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	492c      	ldr	r1, [pc, #176]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005384:	e06f      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	061b      	lsls	r3, r3, #24
 8005394:	4926      	ldr	r1, [pc, #152]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539a:	e064      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d047      	beq.n	8005434 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 0219 	bic.w	r2, r3, #25
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	491f      	ldr	r1, [pc, #124]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fc feaf 	bl	8002118 <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053be:	f7fc feab 	bl	8002118 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e307      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d0:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	f7fc fecc 	bl	8002178 <HAL_GetREVID>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d817      	bhi.n	800541a <HAL_RCC_OscConfig+0x286>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d108      	bne.n	8005404 <HAL_RCC_OscConfig+0x270>
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 80053fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005400:	6053      	str	r3, [r2, #4]
 8005402:	e030      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	4907      	ldr	r1, [pc, #28]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	e025      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	4901      	ldr	r1, [pc, #4]	; (8005430 <HAL_RCC_OscConfig+0x29c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	604b      	str	r3, [r1, #4]
 800542e:	e01a      	b.n	8005466 <HAL_RCC_OscConfig+0x2d2>
 8005430:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005434:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a9d      	ldr	r2, [pc, #628]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc fe6a 	bl	8002118 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005448:	f7fc fe66 	bl	8002118 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e2c2      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800545a:	4b95      	ldr	r3, [pc, #596]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80a9 	beq.w	80055c6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005474:	4b8e      	ldr	r3, [pc, #568]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547e:	4b8c      	ldr	r3, [pc, #560]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d007      	beq.n	800549a <HAL_RCC_OscConfig+0x306>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b18      	cmp	r3, #24
 800548e:	d13a      	bne.n	8005506 <HAL_RCC_OscConfig+0x372>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d135      	bne.n	8005506 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800549a:	4b85      	ldr	r3, [pc, #532]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x31e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b80      	cmp	r3, #128	; 0x80
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e296      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b2:	f7fc fe61 	bl	8002178 <HAL_GetREVID>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054bc:	4293      	cmp	r3, r2
 80054be:	d817      	bhi.n	80054f0 <HAL_RCC_OscConfig+0x35c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d108      	bne.n	80054da <HAL_RCC_OscConfig+0x346>
 80054c8:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054d0:	4a77      	ldr	r2, [pc, #476]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80054d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d8:	e075      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054da:	4b75      	ldr	r3, [pc, #468]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	069b      	lsls	r3, r3, #26
 80054e8:	4971      	ldr	r1, [pc, #452]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ee:	e06a      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054f0:	4b6f      	ldr	r3, [pc, #444]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	496c      	ldr	r1, [pc, #432]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005504:	e05f      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d042      	beq.n	8005594 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800550e:	4b68      	ldr	r3, [pc, #416]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a67      	ldr	r2, [pc, #412]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fc fdfd 	bl	8002118 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005522:	f7fc fdf9 	bl	8002118 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e255      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005534:	4b5e      	ldr	r3, [pc, #376]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005540:	f7fc fe1a 	bl	8002178 <HAL_GetREVID>
 8005544:	4603      	mov	r3, r0
 8005546:	f241 0203 	movw	r2, #4099	; 0x1003
 800554a:	4293      	cmp	r3, r2
 800554c:	d817      	bhi.n	800557e <HAL_RCC_OscConfig+0x3ea>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	2b20      	cmp	r3, #32
 8005554:	d108      	bne.n	8005568 <HAL_RCC_OscConfig+0x3d4>
 8005556:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800555e:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005564:	6053      	str	r3, [r2, #4]
 8005566:	e02e      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
 8005568:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	069b      	lsls	r3, r3, #26
 8005576:	494e      	ldr	r1, [pc, #312]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]
 800557c:	e023      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
 800557e:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	4948      	ldr	r1, [pc, #288]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
 8005592:	e018      	b.n	80055c6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005594:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a45      	ldr	r2, [pc, #276]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800559a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fc fdba 	bl	8002118 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055a8:	f7fc fdb6 	bl	8002118 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e212      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d036      	beq.n	8005640 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d019      	beq.n	800560e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055da:	4b35      	ldr	r3, [pc, #212]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e6:	f7fc fd97 	bl	8002118 <HAL_GetTick>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ee:	f7fc fd93 	bl	8002118 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1ef      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005600:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x45a>
 800560c:	e018      	b.n	8005640 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800560e:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005612:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fc fd7d 	bl	8002118 <HAL_GetTick>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005622:	f7fc fd79 	bl	8002118 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e1d5      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f0      	bne.n	8005622 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d039      	beq.n	80056c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d019      	beq.n	8005688 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800565a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800565e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005660:	f7fc fd5a 	bl	8002118 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005668:	f7fc fd56 	bl	8002118 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e1b2      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x4d4>
 8005686:	e01b      	b.n	80056c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <HAL_RCC_OscConfig+0x51c>)
 800568e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005692:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005694:	f7fc fd40 	bl	8002118 <HAL_GetTick>
 8005698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800569a:	e00b      	b.n	80056b4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800569c:	f7fc fd3c 	bl	8002118 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d904      	bls.n	80056b4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e198      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056b4:	4ba3      	ldr	r3, [pc, #652]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1ed      	bne.n	800569c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8081 	beq.w	80057d0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056ce:	4b9e      	ldr	r3, [pc, #632]	; (8005948 <HAL_RCC_OscConfig+0x7b4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a9d      	ldr	r2, [pc, #628]	; (8005948 <HAL_RCC_OscConfig+0x7b4>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056da:	f7fc fd1d 	bl	8002118 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056e2:	f7fc fd19 	bl	8002118 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b64      	cmp	r3, #100	; 0x64
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e175      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f4:	4b94      	ldr	r3, [pc, #592]	; (8005948 <HAL_RCC_OscConfig+0x7b4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0x582>
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a8d      	ldr	r2, [pc, #564]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	e02d      	b.n	8005772 <HAL_RCC_OscConfig+0x5de>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0x5a4>
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	4a88      	ldr	r2, [pc, #544]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6713      	str	r3, [r2, #112]	; 0x70
 800572a:	4b86      	ldr	r3, [pc, #536]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	4a85      	ldr	r2, [pc, #532]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	6713      	str	r3, [r2, #112]	; 0x70
 8005736:	e01c      	b.n	8005772 <HAL_RCC_OscConfig+0x5de>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d10c      	bne.n	800575a <HAL_RCC_OscConfig+0x5c6>
 8005740:	4b80      	ldr	r3, [pc, #512]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	4a7f      	ldr	r2, [pc, #508]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	6713      	str	r3, [r2, #112]	; 0x70
 800574c:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	4a7c      	ldr	r2, [pc, #496]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	; 0x70
 8005758:	e00b      	b.n	8005772 <HAL_RCC_OscConfig+0x5de>
 800575a:	4b7a      	ldr	r3, [pc, #488]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a79      	ldr	r2, [pc, #484]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b77      	ldr	r3, [pc, #476]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a76      	ldr	r2, [pc, #472]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fc fccd 	bl	8002118 <HAL_GetTick>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fc fcc9 	bl	8002118 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e123      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ee      	beq.n	8005782 <HAL_RCC_OscConfig+0x5ee>
 80057a4:	e014      	b.n	80057d0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fc fcb7 	bl	8002118 <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc fcb3 	bl	8002118 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e10d      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c4:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ee      	bne.n	80057ae <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8102 	beq.w	80059de <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057da:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e2:	2b18      	cmp	r3, #24
 80057e4:	f000 80bd 	beq.w	8005962 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	f040 8095 	bne.w	800591c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b54      	ldr	r3, [pc, #336]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a53      	ldr	r2, [pc, #332]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80057f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fc fc8b 	bl	8002118 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005806:	f7fc fc87 	bl	8002118 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0e3      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005818:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005824:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005828:	4b48      	ldr	r3, [pc, #288]	; (800594c <HAL_RCC_OscConfig+0x7b8>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	430a      	orrs	r2, r1
 8005838:	4942      	ldr	r1, [pc, #264]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	628b      	str	r3, [r1, #40]	; 0x28
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	3b01      	subs	r3, #1
 8005844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	3b01      	subs	r3, #1
 800584e:	025b      	lsls	r3, r3, #9
 8005850:	b29b      	uxth	r3, r3
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	3b01      	subs	r3, #1
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800586e:	4935      	ldr	r1, [pc, #212]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005874:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a32      	ldr	r2, [pc, #200]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005880:	4b30      	ldr	r3, [pc, #192]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <HAL_RCC_OscConfig+0x7bc>)
 8005886:	4013      	ands	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800588c:	00d2      	lsls	r2, r2, #3
 800588e:	492d      	ldr	r1, [pc, #180]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005890:	4313      	orrs	r3, r2
 8005892:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	f023 020c 	bic.w	r2, r3, #12
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	4928      	ldr	r1, [pc, #160]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f023 0202 	bic.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	4924      	ldr	r1, [pc, #144]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058b8:	4b22      	ldr	r3, [pc, #136]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a21      	ldr	r2, [pc, #132]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c4:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 80058ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc fc10 	bl	8002118 <HAL_GetTick>
 80058f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc fc0c 	bl	8002118 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e068      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x768>
 800591a:	e060      	b.n	80059de <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_RCC_OscConfig+0x7b0>)
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc fbf6 	bl	8002118 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800592e:	e011      	b.n	8005954 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005930:	f7fc fbf2 	bl	8002118 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d90a      	bls.n	8005954 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04e      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
 8005948:	58024800 	.word	0x58024800
 800594c:	fffffc0c 	.word	0xfffffc0c
 8005950:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <HAL_RCC_OscConfig+0x854>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e7      	bne.n	8005930 <HAL_RCC_OscConfig+0x79c>
 8005960:	e03d      	b.n	80059de <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCC_OscConfig+0x854>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005968:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <HAL_RCC_OscConfig+0x854>)
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b01      	cmp	r3, #1
 8005974:	d031      	beq.n	80059da <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f003 0203 	and.w	r2, r3, #3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005980:	429a      	cmp	r2, r3
 8005982:	d12a      	bne.n	80059da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d122      	bne.n	80059da <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d11a      	bne.n	80059da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d111      	bne.n	80059da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d108      	bne.n	80059da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d001      	beq.n	80059de <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3730      	adds	r7, #48	; 0x30
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024400 	.word	0x58024400

080059ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e19c      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a00:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d910      	bls.n	8005a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b87      	ldr	r3, [pc, #540]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f023 020f 	bic.w	r2, r3, #15
 8005a16:	4985      	ldr	r1, [pc, #532]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1e:	4b83      	ldr	r3, [pc, #524]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e184      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d010      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	4b7b      	ldr	r3, [pc, #492]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d908      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4975      	ldr	r1, [pc, #468]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d010      	beq.n	8005a8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	4b70      	ldr	r3, [pc, #448]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d908      	bls.n	8005a8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a7a:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	496a      	ldr	r1, [pc, #424]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d908      	bls.n	8005aba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	495e      	ldr	r1, [pc, #376]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	4b59      	ldr	r3, [pc, #356]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d908      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ad6:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4953      	ldr	r1, [pc, #332]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d908      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b4a      	ldr	r3, [pc, #296]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f023 020f 	bic.w	r2, r3, #15
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4947      	ldr	r1, [pc, #284]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d055      	beq.n	8005bce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b22:	4b43      	ldr	r3, [pc, #268]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4940      	ldr	r1, [pc, #256]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b3c:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d121      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0f6      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d115      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0ea      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0de      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0d6      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f023 0207 	bic.w	r2, r3, #7
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4925      	ldr	r1, [pc, #148]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fabb 	bl	8002118 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	e00a      	b.n	8005bbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba6:	f7fc fab7 	bl	8002118 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0be      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d1eb      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d208      	bcs.n	8005bfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	490e      	ldr	r1, [pc, #56]	; (8005c30 <HAL_RCC_ClockConfig+0x244>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d214      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 020f 	bic.w	r2, r3, #15
 8005c12:	4906      	ldr	r1, [pc, #24]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <HAL_RCC_ClockConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e086      	b.n	8005d3a <HAL_RCC_ClockConfig+0x34e>
 8005c2c:	52002000 	.word	0x52002000
 8005c30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d208      	bcs.n	8005c62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c50:	4b3c      	ldr	r3, [pc, #240]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4939      	ldr	r1, [pc, #228]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d208      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	492e      	ldr	r1, [pc, #184]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d208      	bcs.n	8005cbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	4922      	ldr	r1, [pc, #136]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d208      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4917      	ldr	r1, [pc, #92]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cec:	f000 f834 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	4912      	ldr	r1, [pc, #72]	; (8005d48 <HAL_RCC_ClockConfig+0x35c>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
 8005d08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <HAL_RCC_ClockConfig+0x35c>)
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <HAL_RCC_ClockConfig+0x360>)
 8005d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <HAL_RCC_ClockConfig+0x364>)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <HAL_RCC_ClockConfig+0x368>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fc f9a8 	bl	8002084 <HAL_InitTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	58024400 	.word	0x58024400
 8005d48:	08009b18 	.word	0x08009b18
 8005d4c:	24000004 	.word	0x24000004
 8005d50:	24000000 	.word	0x24000000
 8005d54:	24000058 	.word	0x24000058

08005d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	; 0x24
 8005d5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5e:	4bb3      	ldr	r3, [pc, #716]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	f200 8155 	bhi.w	8006016 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08006017 	.word	0x08006017
 8005d7c:	08006017 	.word	0x08006017
 8005d80:	08006017 	.word	0x08006017
 8005d84:	08006017 	.word	0x08006017
 8005d88:	08006017 	.word	0x08006017
 8005d8c:	08006017 	.word	0x08006017
 8005d90:	08006017 	.word	0x08006017
 8005d94:	08005dff 	.word	0x08005dff
 8005d98:	08006017 	.word	0x08006017
 8005d9c:	08006017 	.word	0x08006017
 8005da0:	08006017 	.word	0x08006017
 8005da4:	08006017 	.word	0x08006017
 8005da8:	08006017 	.word	0x08006017
 8005dac:	08006017 	.word	0x08006017
 8005db0:	08006017 	.word	0x08006017
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08006017 	.word	0x08006017
 8005dbc:	08006017 	.word	0x08006017
 8005dc0:	08006017 	.word	0x08006017
 8005dc4:	08006017 	.word	0x08006017
 8005dc8:	08006017 	.word	0x08006017
 8005dcc:	08006017 	.word	0x08006017
 8005dd0:	08006017 	.word	0x08006017
 8005dd4:	08005e0b 	.word	0x08005e0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b94      	ldr	r3, [pc, #592]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de4:	4b91      	ldr	r3, [pc, #580]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a90      	ldr	r2, [pc, #576]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005df6:	e111      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005df8:	4b8d      	ldr	r3, [pc, #564]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dfa:	61bb      	str	r3, [r7, #24]
    break;
 8005dfc:	e10e      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005dfe:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e00:	61bb      	str	r3, [r7, #24]
    break;
 8005e02:	e10b      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e04:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e06:	61bb      	str	r3, [r7, #24]
    break;
 8005e08:	e108      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e0a:	4b88      	ldr	r3, [pc, #544]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e14:	4b85      	ldr	r3, [pc, #532]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e20:	4b82      	ldr	r3, [pc, #520]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e2a:	4b80      	ldr	r3, [pc, #512]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80e1 	beq.w	8006010 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f000 8083 	beq.w	8005f5c <HAL_RCC_GetSysClockFreq+0x204>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f200 80a1 	bhi.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x114>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d056      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e6a:	e099      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	4b6f      	ldr	r3, [pc, #444]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d02d      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e78:	4b6c      	ldr	r3, [pc, #432]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a6b      	ldr	r2, [pc, #428]	; (8006030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b62      	ldr	r3, [pc, #392]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005ed2:	e087      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006040 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b51      	ldr	r3, [pc, #324]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f16:	e065      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5a:	e043      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006048 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	e021      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800603c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	0a5b      	lsrs	r3, r3, #9
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	3301      	adds	r3, #1
 8005ff0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006008:	ee17 3a90 	vmov	r3, s15
 800600c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800600e:	e005      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
    break;
 8006014:	e002      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006018:	61bb      	str	r3, [r7, #24]
    break;
 800601a:	bf00      	nop
  }

  return sysclockfreq;
 800601c:	69bb      	ldr	r3, [r7, #24]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3724      	adds	r7, #36	; 0x24
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	03d09000 	.word	0x03d09000
 8006034:	003d0900 	.word	0x003d0900
 8006038:	007a1200 	.word	0x007a1200
 800603c:	46000000 	.word	0x46000000
 8006040:	4c742400 	.word	0x4c742400
 8006044:	4a742400 	.word	0x4a742400
 8006048:	4af42400 	.word	0x4af42400

0800604c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006052:	f7ff fe81 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490f      	ldr	r1, [pc, #60]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_GetHCLKFreq+0x50>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006088:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	08009b18 	.word	0x08009b18
 80060a4:	24000004 	.word	0x24000004
 80060a8:	24000000 	.word	0x24000000

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060b0:	f7ff ffcc 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	58024400 	.word	0x58024400
 80060d4:	08009b18 	.word	0x08009b18

080060d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060dc:	f7ff ffb6 	bl	800604c <HAL_RCC_GetHCLKFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	4904      	ldr	r1, [pc, #16]	; (8006100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	58024400 	.word	0x58024400
 8006100:	08009b18 	.word	0x08009b18

08006104 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800610c:	2300      	movs	r3, #0
 800610e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006110:	2300      	movs	r3, #0
 8006112:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d03f      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006128:	d02a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800612a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800612e:	d824      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006134:	d018      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800613a:	d81e      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006144:	d007      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006146:	e018      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006148:	4bab      	ldr	r3, [pc, #684]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4aaa      	ldr	r2, [pc, #680]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2102      	movs	r1, #2
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f9cf 	bl	8007500 <RCCEx_PLL2_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006166:	e00c      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fa78 	bl	8007664 <RCCEx_PLL3_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006178:	e003      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
      break;
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006188:	4b9b      	ldr	r3, [pc, #620]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	4998      	ldr	r1, [pc, #608]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	650b      	str	r3, [r1, #80]	; 0x50
 800619a:	e001      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d03d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d826      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061d1 	.word	0x080061d1
 80061c0:	080061df 	.word	0x080061df
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b89      	ldr	r3, [pc, #548]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a88      	ldr	r2, [pc, #544]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061dc:	e015      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3304      	adds	r3, #4
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f98b 	bl	8007500 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061ee:	e00c      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3324      	adds	r3, #36	; 0x24
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fa34 	bl	8007664 <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
      break;
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006210:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	f023 0207 	bic.w	r2, r3, #7
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	4976      	ldr	r1, [pc, #472]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	650b      	str	r3, [r1, #80]	; 0x50
 8006222:	e001      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006230:	2b00      	cmp	r3, #0
 8006232:	d042      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623c:	d02b      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d825      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006244:	2bc0      	cmp	r3, #192	; 0xc0
 8006246:	d028      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006248:	2bc0      	cmp	r3, #192	; 0xc0
 800624a:	d821      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d016      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d81d      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d007      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800625c:	e018      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625e:	4b66      	ldr	r3, [pc, #408]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	4a65      	ldr	r2, [pc, #404]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800626a:	e017      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f944 	bl	8007500 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800627c:	e00e      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f9ed 	bl	8007664 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800628e:	e005      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800629a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062a2:	4b55      	ldr	r3, [pc, #340]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	4952      	ldr	r1, [pc, #328]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	650b      	str	r3, [r1, #80]	; 0x50
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d049      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d0:	d030      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80062d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d6:	d82a      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062dc:	d02c      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80062de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e2:	d824      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062e8:	d018      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ee:	d81e      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80062f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f8:	d007      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80062fa:	e018      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a3d      	ldr	r2, [pc, #244]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006308:	e017      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f8f5 	bl	8007500 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800631a:	e00e      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f99e 	bl	8007664 <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800632c:	e005      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
      break;
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800634e:	492a      	ldr	r1, [pc, #168]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	658b      	str	r3, [r1, #88]	; 0x58
 8006354:	e001      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04c      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800636c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006370:	d030      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006376:	d82a      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800637c:	d02c      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800637e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006382:	d824      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006388:	d018      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800638a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800638e:	d81e      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006398:	d007      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800639a:	e018      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a8:	e017      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f8a5 	bl	8007500 <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063ba:	e00e      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f94e 	bl	8007664 <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80063d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10d      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ee:	4902      	ldr	r1, [pc, #8]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	658b      	str	r3, [r1, #88]	; 0x58
 80063f4:	e004      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d032      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006410:	2b30      	cmp	r3, #48	; 0x30
 8006412:	d01c      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d817      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d00c      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d813      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d10f      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006428:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4aae      	ldr	r2, [pc, #696]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006434:	e00e      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f85f 	bl	8007500 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006446:	e005      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800645a:	4ba3      	ldr	r3, [pc, #652]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	49a0      	ldr	r1, [pc, #640]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006468:	4313      	orrs	r3, r2
 800646a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800646c:	e001      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d047      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006486:	d030      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648c:	d82a      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006492:	d02c      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006498:	d824      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d018      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80064a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a4:	d81e      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d007      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80064b0:	e018      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b2:	4b8d      	ldr	r3, [pc, #564]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	4a8c      	ldr	r2, [pc, #560]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064be:	e017      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f81a 	bl	8007500 <RCCEx_PLL2_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064d0:	e00e      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3324      	adds	r3, #36	; 0x24
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f8c3 	bl	8007664 <RCCEx_PLL3_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064e2:	e005      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
      break;
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80064ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064f6:	4b7c      	ldr	r3, [pc, #496]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	4979      	ldr	r1, [pc, #484]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006504:	4313      	orrs	r3, r2
 8006506:	650b      	str	r3, [r1, #80]	; 0x50
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d049      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006522:	d02e      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006528:	d828      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800652a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800652e:	d02a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006534:	d822      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800653a:	d026      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800653c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006540:	d81c      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006546:	d010      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d816      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01d      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d111      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f000 ffce 	bl	8007500 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006568:	e012      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3324      	adds	r3, #36	; 0x24
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f001 f877 	bl	8007664 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800657a:	e009      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006582:	bf00      	nop
 8006584:	e004      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800658e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006596:	4b54      	ldr	r3, [pc, #336]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a2:	4951      	ldr	r1, [pc, #324]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	650b      	str	r3, [r1, #80]	; 0x50
 80065a8:	e001      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04b      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c4:	d02e      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80065c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ca:	d828      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d02a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d822      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065dc:	d026      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80065de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065e2:	d81c      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d010      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d816      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01d      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80065f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f8:	d111      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2101      	movs	r1, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f000 ff7d 	bl	8007500 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800660a:	e012      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	2101      	movs	r1, #1
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f826 	bl	8007664 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800661c:	e009      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
      break;
 8006622:	e006      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006624:	bf00      	nop
 8006626:	e004      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006638:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006646:	4928      	ldr	r1, [pc, #160]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	658b      	str	r3, [r1, #88]	; 0x58
 800664c:	e001      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02f      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006666:	d00e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666c:	d814      	bhi.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d015      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006676:	d10f      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a1a      	ldr	r2, [pc, #104]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006684:	e00c      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff37 	bl	8007500 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006696:	e003      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
      break;
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800669e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b2:	490d      	ldr	r1, [pc, #52]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	650b      	str	r3, [r1, #80]	; 0x50
 80066b8:	e001      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d033      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d81c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	08006713 	.word	0x08006713
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	080066fb 	.word	0x080066fb
 80066e4:	08006713 	.word	0x08006713
 80066e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ec:	4bb8      	ldr	r3, [pc, #736]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4ab7      	ldr	r2, [pc, #732]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066f8:	e00c      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fefd 	bl	8007500 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800671a:	4bad      	ldr	r3, [pc, #692]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	f023 0203 	bic.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	49aa      	ldr	r1, [pc, #680]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006728:	4313      	orrs	r3, r2
 800672a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8086 	beq.w	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006740:	4ba4      	ldr	r3, [pc, #656]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4aa3      	ldr	r2, [pc, #652]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800674c:	f7fb fce4 	bl	8002118 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006752:	e009      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006754:	f7fb fce0 	bl	8002118 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d902      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	75fb      	strb	r3, [r7, #23]
        break;
 8006766:	e005      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006768:	4b9a      	ldr	r3, [pc, #616]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0ef      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d166      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800677a:	4b95      	ldr	r3, [pc, #596]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800677c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006784:	4053      	eors	r3, r2
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d013      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678e:	4b90      	ldr	r3, [pc, #576]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006796:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006798:	4b8d      	ldr	r3, [pc, #564]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a8c      	ldr	r2, [pc, #560]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067a4:	4b8a      	ldr	r3, [pc, #552]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	4a89      	ldr	r2, [pc, #548]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067b0:	4a87      	ldr	r2, [pc, #540]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c0:	d115      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fb fca9 	bl	8002118 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c8:	e00b      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fb fca5 	bl	8002118 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d902      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	75fb      	strb	r3, [r7, #23]
            break;
 80067e0:	e005      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e2:	4b7b      	ldr	r3, [pc, #492]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ed      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d126      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006802:	d10d      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006804:	4b72      	ldr	r3, [pc, #456]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006812:	0919      	lsrs	r1, r3, #4
 8006814:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006816:	400b      	ands	r3, r1
 8006818:	496d      	ldr	r1, [pc, #436]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	610b      	str	r3, [r1, #16]
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006820:	4b6b      	ldr	r3, [pc, #428]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	4a6a      	ldr	r2, [pc, #424]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006826:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800682a:	6113      	str	r3, [r2, #16]
 800682c:	4b68      	ldr	r3, [pc, #416]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683a:	4965      	ldr	r1, [pc, #404]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683c:	4313      	orrs	r3, r2
 800683e:	670b      	str	r3, [r1, #112]	; 0x70
 8006840:	e004      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	75bb      	strb	r3, [r7, #22]
 8006846:	e001      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d07e      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d867      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006937 	.word	0x08006937
 800686c:	08006931 	.word	0x08006931
 8006870:	08006931 	.word	0x08006931
 8006874:	08006931 	.word	0x08006931
 8006878:	08006931 	.word	0x08006931
 800687c:	08006931 	.word	0x08006931
 8006880:	08006931 	.word	0x08006931
 8006884:	08006931 	.word	0x08006931
 8006888:	0800690d 	.word	0x0800690d
 800688c:	08006931 	.word	0x08006931
 8006890:	08006931 	.word	0x08006931
 8006894:	08006931 	.word	0x08006931
 8006898:	08006931 	.word	0x08006931
 800689c:	08006931 	.word	0x08006931
 80068a0:	08006931 	.word	0x08006931
 80068a4:	08006931 	.word	0x08006931
 80068a8:	0800691f 	.word	0x0800691f
 80068ac:	08006931 	.word	0x08006931
 80068b0:	08006931 	.word	0x08006931
 80068b4:	08006931 	.word	0x08006931
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006937 	.word	0x08006937
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006931 	.word	0x08006931
 80068e8:	08006937 	.word	0x08006937
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006931 	.word	0x08006931
 80068f4:	08006931 	.word	0x08006931
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006931 	.word	0x08006931
 8006904:	08006931 	.word	0x08006931
 8006908:	08006937 	.word	0x08006937
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdf4 	bl	8007500 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800691c:	e00c      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3324      	adds	r3, #36	; 0x24
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe9d 	bl	8007664 <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      break;
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800693e:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694a:	4921      	ldr	r1, [pc, #132]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	654b      	str	r3, [r1, #84]	; 0x54
 8006950:	e001      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d03e      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	2b05      	cmp	r3, #5
 8006968:	d820      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069b3 	.word	0x080069b3
 8006974:	08006989 	.word	0x08006989
 8006978:	0800699b 	.word	0x0800699b
 800697c:	080069b3 	.word	0x080069b3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069b3 	.word	0x080069b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fdb6 	bl	8007500 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fe5f 	bl	8007664 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80069b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d110      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f023 0207 	bic.w	r2, r3, #7
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	4902      	ldr	r1, [pc, #8]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	654b      	str	r3, [r1, #84]	; 0x54
 80069cc:	e008      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	58024800 	.word	0x58024800
 80069d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d039      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d820      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a3f 	.word	0x08006a3f
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a27 	.word	0x08006a27
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a3f 	.word	0x08006a3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fd70 	bl	8007500 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a24:	e00c      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3324      	adds	r3, #36	; 0x24
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fe19 	bl	8007664 <RCCEx_PLL3_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a46:	4bb7      	ldr	r3, [pc, #732]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f023 0207 	bic.w	r2, r3, #7
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	49b3      	ldr	r1, [pc, #716]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	658b      	str	r3, [r1, #88]	; 0x58
 8006a5a:	e001      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d04b      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a76:	d02e      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a7c:	d828      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d02a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d822      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a8e:	d026      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a94:	d81c      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9a:	d010      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d816      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aaa:	d111      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fd24 	bl	8007500 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006abc:	e012      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fdcd 	bl	8007664 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ace:	e009      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	e006      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aea:	4b8e      	ldr	r3, [pc, #568]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af8:	498a      	ldr	r1, [pc, #552]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	654b      	str	r3, [r1, #84]	; 0x54
 8006afe:	e001      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04b      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b1a:	d02e      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006b1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b20:	d828      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d02a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d822      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b32:	d026      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b38:	d81c      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b44:	d816      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4e:	d111      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fcd2 	bl	8007500 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b60:	e012      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	2102      	movs	r1, #2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fd7b 	bl	8007664 <RCCEx_PLL3_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b72:	e009      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
      break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b8e:	4b65      	ldr	r3, [pc, #404]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9c:	4961      	ldr	r1, [pc, #388]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba2:	e001      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d04b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bbe:	d02e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006bc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bc4:	d828      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d02a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d822      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bd6:	d026      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006bd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be2:	d010      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be8:	d816      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf2:	d111      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fc80 	bl	8007500 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c04:	e012      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fd29 	bl	8007664 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c16:	e009      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c32:	4b3c      	ldr	r3, [pc, #240]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c40:	4938      	ldr	r1, [pc, #224]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	658b      	str	r3, [r1, #88]	; 0x58
 8006c46:	e001      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d10a      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3324      	adds	r3, #36	; 0x24
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fcfa 	bl	8007664 <RCCEx_PLL3_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	4926      	ldr	r1, [pc, #152]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	2102      	movs	r1, #2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fcd9 	bl	8007664 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cca:	4916      	ldr	r1, [pc, #88]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d036      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ce6:	d01f      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cec:	d817      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf6:	d009      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006cf8:	e011      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fbfd 	bl	8007500 <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d0a:	e00e      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	2102      	movs	r1, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fca6 	bl	8007664 <RCCEx_PLL3_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d1c:	e005      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
      break;
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006d24:	58024400 	.word	0x58024400
      break;
 8006d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d30:	4b93      	ldr	r3, [pc, #588]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d3e:	4990      	ldr	r1, [pc, #576]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	658b      	str	r3, [r1, #88]	; 0x58
 8006d44:	e001      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d033      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d60:	d01c      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d66:	d816      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d72:	d007      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006d74:	e00f      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d76:	4b82      	ldr	r3, [pc, #520]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a81      	ldr	r2, [pc, #516]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d82:	e00c      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc6a 	bl	8007664 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006da4:	4b76      	ldr	r3, [pc, #472]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	4973      	ldr	r1, [pc, #460]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	654b      	str	r3, [r1, #84]	; 0x54
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d029      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d007      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006dd8:	e00f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dda:	4b69      	ldr	r3, [pc, #420]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a68      	ldr	r2, [pc, #416]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006de6:	e00b      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	2102      	movs	r1, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb86 	bl	8007500 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006df8:	e002      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e06:	4b5e      	ldr	r3, [pc, #376]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	495b      	ldr	r1, [pc, #364]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e18:	e001      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3324      	adds	r3, #36	; 0x24
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fc17 	bl	8007664 <RCCEx_PLL3_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d030      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e54:	d017      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5a:	d811      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	d013      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e66:	d80b      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d010      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e70:	d106      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e72:	4b43      	ldr	r3, [pc, #268]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a42      	ldr	r2, [pc, #264]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e7e:	e007      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e004      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e86:	bf00      	nop
 8006e88:	e002      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e000      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e96:	4b3a      	ldr	r3, [pc, #232]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea2:	4937      	ldr	r1, [pc, #220]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea8:	e001      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ed8:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ee6:	4926      	ldr	r1, [pc, #152]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f04:	491e      	ldr	r1, [pc, #120]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	4a19      	ldr	r2, [pc, #100]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f20:	6113      	str	r3, [r2, #16]
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f2c:	4914      	ldr	r1, [pc, #80]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da08      	bge.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	490e      	ldr	r1, [pc, #56]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	4906      	ldr	r1, [pc, #24]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f6c:	7dbb      	ldrb	r3, [r7, #22]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e000      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	58024400 	.word	0x58024400

08006f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f88:	f7ff f860 	bl	800604c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	08009b18 	.word	0x08009b18

08006fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fb8:	4ba1      	ldr	r3, [pc, #644]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006fc2:	4b9f      	ldr	r3, [pc, #636]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	0b1b      	lsrs	r3, r3, #12
 8006fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fce:	4b9c      	ldr	r3, [pc, #624]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006fda:	4b99      	ldr	r3, [pc, #612]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	08db      	lsrs	r3, r3, #3
 8006fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8111 	beq.w	8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f000 8083 	beq.w	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b02      	cmp	r3, #2
 800700a:	f200 80a1 	bhi.w	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d056      	beq.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800701a:	e099      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800701c:	4b88      	ldr	r3, [pc, #544]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02d      	beq.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007028:	4b85      	ldr	r3, [pc, #532]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	4a84      	ldr	r2, [pc, #528]	; (8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b7b      	ldr	r3, [pc, #492]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a03 	vldr	s12, [r7, #12]
 8007066:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007082:	e087      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800724c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070c6:	e065      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b59      	ldr	r3, [pc, #356]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800710a:	e043      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b48      	ldr	r3, [pc, #288]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800714e:	e021      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b37      	ldr	r3, [pc, #220]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007194:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	0a5b      	lsrs	r3, r3, #9
 800719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ba:	ee17 2a90 	vmov	r2, s15
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80071c2:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e8:	ee17 2a90 	vmov	r2, s15
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80071f0:	4b13      	ldr	r3, [pc, #76]	; (8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800720a:	edd7 6a07 	vldr	s13, [r7, #28]
 800720e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007216:	ee17 2a90 	vmov	r2, s15
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800721e:	e008      	b.n	8007232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
}
 8007232:	bf00      	nop
 8007234:	3724      	adds	r7, #36	; 0x24
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
 8007244:	03d09000 	.word	0x03d09000
 8007248:	46000000 	.word	0x46000000
 800724c:	4c742400 	.word	0x4c742400
 8007250:	4a742400 	.word	0x4a742400
 8007254:	4af42400 	.word	0x4af42400

08007258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	; 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007260:	4ba1      	ldr	r3, [pc, #644]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800726a:	4b9f      	ldr	r3, [pc, #636]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	0d1b      	lsrs	r3, r3, #20
 8007270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007276:	4b9c      	ldr	r3, [pc, #624]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007282:	4b99      	ldr	r3, [pc, #612]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8111 	beq.w	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f000 8083 	beq.w	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f200 80a1 	bhi.w	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d056      	beq.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072c2:	e099      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c4:	4b88      	ldr	r3, [pc, #544]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02d      	beq.n	800732c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072d0:	4b85      	ldr	r3, [pc, #532]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	4a84      	ldr	r2, [pc, #528]	; (80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b7b      	ldr	r3, [pc, #492]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800732a:	e087      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b6a      	ldr	r3, [pc, #424]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736e:	e065      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b2:	e043      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b48      	ldr	r3, [pc, #288]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073f6:	e021      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800743a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800743c:	4b2a      	ldr	r3, [pc, #168]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	0a5b      	lsrs	r3, r3, #9
 8007442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007456:	edd7 6a07 	vldr	s13, [r7, #28]
 800745a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007462:	ee17 2a90 	vmov	r2, s15
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007484:	edd7 6a07 	vldr	s13, [r7, #28]
 8007488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007490:	ee17 2a90 	vmov	r2, s15
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074c6:	e008      	b.n	80074da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	3724      	adds	r7, #36	; 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
 80074ec:	03d09000 	.word	0x03d09000
 80074f0:	46000000 	.word	0x46000000
 80074f4:	4c742400 	.word	0x4c742400
 80074f8:	4a742400 	.word	0x4a742400
 80074fc:	4af42400 	.word	0x4af42400

08007500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800750e:	4b53      	ldr	r3, [pc, #332]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d101      	bne.n	800751e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e099      	b.n	8007652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800751e:	4b4f      	ldr	r3, [pc, #316]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4e      	ldr	r2, [pc, #312]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752a:	f7fa fdf5 	bl	8002118 <HAL_GetTick>
 800752e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007530:	e008      	b.n	8007544 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007532:	f7fa fdf1 	bl	8002118 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e086      	b.n	8007652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f0      	bne.n	8007532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007550:	4b42      	ldr	r3, [pc, #264]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	493f      	ldr	r1, [pc, #252]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	628b      	str	r3, [r1, #40]	; 0x28
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	3b01      	subs	r3, #1
 800756a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	3b01      	subs	r3, #1
 8007574:	025b      	lsls	r3, r3, #9
 8007576:	b29b      	uxth	r3, r3
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	3b01      	subs	r3, #1
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	3b01      	subs	r3, #1
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007594:	4931      	ldr	r1, [pc, #196]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800759a:	4b30      	ldr	r3, [pc, #192]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	492d      	ldr	r1, [pc, #180]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075ac:	4b2b      	ldr	r3, [pc, #172]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f023 0220 	bic.w	r2, r3, #32
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	4928      	ldr	r1, [pc, #160]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075be:	4b27      	ldr	r3, [pc, #156]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	4a26      	ldr	r2, [pc, #152]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075c4:	f023 0310 	bic.w	r3, r3, #16
 80075c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <RCCEx_PLL2_Config+0x160>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	69d2      	ldr	r2, [r2, #28]
 80075d6:	00d2      	lsls	r2, r2, #3
 80075d8:	4920      	ldr	r1, [pc, #128]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075e4:	f043 0310 	orr.w	r3, r3, #16
 80075e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 80075f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075fc:	e00f      	b.n	800761e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d106      	bne.n	8007612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007604:	4b15      	ldr	r3, [pc, #84]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a14      	ldr	r2, [pc, #80]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 800760a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007610:	e005      	b.n	800761e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	4a11      	ldr	r2, [pc, #68]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800761c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a0e      	ldr	r2, [pc, #56]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762a:	f7fa fd75 	bl	8002118 <HAL_GetTick>
 800762e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007630:	e008      	b.n	8007644 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007632:	f7fa fd71 	bl	8002118 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e006      	b.n	8007652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <RCCEx_PLL2_Config+0x15c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0f0      	beq.n	8007632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	ffff0007 	.word	0xffff0007

08007664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007672:	4b53      	ldr	r3, [pc, #332]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b03      	cmp	r3, #3
 800767c:	d101      	bne.n	8007682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e099      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007682:	4b4f      	ldr	r3, [pc, #316]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4e      	ldr	r2, [pc, #312]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7fa fd43 	bl	8002118 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007694:	e008      	b.n	80076a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007696:	f7fa fd3f 	bl	8002118 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e086      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076a8:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076b4:	4b42      	ldr	r3, [pc, #264]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	051b      	lsls	r3, r3, #20
 80076c2:	493f      	ldr	r1, [pc, #252]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	628b      	str	r3, [r1, #40]	; 0x28
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	025b      	lsls	r3, r3, #9
 80076da:	b29b      	uxth	r3, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	061b      	lsls	r3, r3, #24
 80076f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076f8:	4931      	ldr	r1, [pc, #196]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076fe:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	492d      	ldr	r1, [pc, #180]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007710:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	4928      	ldr	r1, [pc, #160]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007722:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a26      	ldr	r2, [pc, #152]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <RCCEx_PLL3_Config+0x160>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	69d2      	ldr	r2, [r2, #28]
 800773a:	00d2      	lsls	r2, r2, #3
 800773c:	4920      	ldr	r1, [pc, #128]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007742:	4b1f      	ldr	r3, [pc, #124]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007754:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800775a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800775e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007760:	e00f      	b.n	8007782 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d106      	bne.n	8007776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800776e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007774:	e005      	b.n	8007782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007776:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 800777c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007780:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a0e      	ldr	r2, [pc, #56]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 8007788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778e:	f7fa fcc3 	bl	8002118 <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007794:	e008      	b.n	80077a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007796:	f7fa fcbf 	bl	8002118 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <RCCEx_PLL3_Config+0x15c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	ffff0007 	.word	0xffff0007

080077c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e0f1      	b.n	80079be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a78      	ldr	r2, [pc, #480]	; (80079c8 <HAL_SPI_Init+0x200>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00f      	beq.n	800780a <HAL_SPI_Init+0x42>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a77      	ldr	r2, [pc, #476]	; (80079cc <HAL_SPI_Init+0x204>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00a      	beq.n	800780a <HAL_SPI_Init+0x42>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a75      	ldr	r2, [pc, #468]	; (80079d0 <HAL_SPI_Init+0x208>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d005      	beq.n	800780a <HAL_SPI_Init+0x42>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b0f      	cmp	r3, #15
 8007804:	d901      	bls.n	800780a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e0d9      	b.n	80079be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fdc4 	bl	8008398 <SPI_GetPacketSize>
 8007810:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a6c      	ldr	r2, [pc, #432]	; (80079c8 <HAL_SPI_Init+0x200>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00c      	beq.n	8007836 <HAL_SPI_Init+0x6e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a6a      	ldr	r2, [pc, #424]	; (80079cc <HAL_SPI_Init+0x204>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d007      	beq.n	8007836 <HAL_SPI_Init+0x6e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a69      	ldr	r2, [pc, #420]	; (80079d0 <HAL_SPI_Init+0x208>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d002      	beq.n	8007836 <HAL_SPI_Init+0x6e>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b08      	cmp	r3, #8
 8007834:	d811      	bhi.n	800785a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800783a:	4a63      	ldr	r2, [pc, #396]	; (80079c8 <HAL_SPI_Init+0x200>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a61      	ldr	r2, [pc, #388]	; (80079cc <HAL_SPI_Init+0x204>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_SPI_Init+0x8c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a60      	ldr	r2, [pc, #384]	; (80079d0 <HAL_SPI_Init+0x208>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d104      	bne.n	800785e <HAL_SPI_Init+0x96>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b10      	cmp	r3, #16
 8007858:	d901      	bls.n	800785e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e0af      	b.n	80079be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa f9ae 	bl	8001bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800789a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078a4:	d119      	bne.n	80078da <HAL_SPI_Init+0x112>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ae:	d103      	bne.n	80078b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10c      	bne.n	80078da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078c8:	d107      	bne.n	80078da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69da      	ldr	r2, [r3, #28]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ec:	ea42 0103 	orr.w	r1, r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793a:	ea42 0103 	orr.w	r1, r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d113      	bne.n	800797a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007964:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007978:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40013000 	.word	0x40013000
 80079cc:	40003800 	.word	0x40003800
 80079d0:	40003c00 	.word	0x40003c00

080079d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3320      	adds	r3, #32
 80079ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_SPI_Transmit+0x2a>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e1d7      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a06:	f7fa fb87 	bl	8002118 <HAL_GetTick>
 8007a0a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d007      	beq.n	8007a28 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a24:	7efb      	ldrb	r3, [r7, #27]
 8007a26:	e1c2      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_SPI_Transmit+0x60>
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d107      	bne.n	8007a44 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a40:	7efb      	ldrb	r3, [r7, #27]
 8007a42:	e1b4      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2203      	movs	r2, #3
 8007a48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	88fa      	ldrh	r2, [r7, #6]
 8007a5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007a94:	d107      	bne.n	8007aa6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b96      	ldr	r3, [pc, #600]	; (8007d08 <HAL_SPI_Transmit+0x334>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	88f9      	ldrh	r1, [r7, #6]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad2:	d107      	bne.n	8007ae4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b0f      	cmp	r3, #15
 8007aea:	d947      	bls.n	8007b7c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007aec:	e03f      	b.n	8007b6e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d114      	bne.n	8007b26 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b24:	e023      	b.n	8007b6e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b26:	f7fa faf7 	bl	8002118 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d803      	bhi.n	8007b3e <HAL_SPI_Transmit+0x16a>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d102      	bne.n	8007b44 <HAL_SPI_Transmit+0x170>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d114      	bne.n	8007b6e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fb59 	bl	80081fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e11f      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1b9      	bne.n	8007aee <HAL_SPI_Transmit+0x11a>
 8007b7a:	e0f2      	b.n	8007d62 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b07      	cmp	r3, #7
 8007b82:	f240 80e7 	bls.w	8007d54 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b86:	e05d      	b.n	8007c44 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d132      	bne.n	8007bfc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d918      	bls.n	8007bd4 <HAL_SPI_Transmit+0x200>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d014      	beq.n	8007bd4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b02      	subs	r3, #2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007bd2:	e037      	b.n	8007c44 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	881a      	ldrh	r2, [r3, #0]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007bfa:	e023      	b.n	8007c44 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfc:	f7fa fa8c 	bl	8002118 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d803      	bhi.n	8007c14 <HAL_SPI_Transmit+0x240>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d102      	bne.n	8007c1a <HAL_SPI_Transmit+0x246>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d114      	bne.n	8007c44 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 faee 	bl	80081fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e0b4      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d19b      	bne.n	8007b88 <HAL_SPI_Transmit+0x1b4>
 8007c50:	e087      	b.n	8007d62 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d155      	bne.n	8007d0c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d918      	bls.n	8007c9e <HAL_SPI_Transmit+0x2ca>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c70:	2b40      	cmp	r3, #64	; 0x40
 8007c72:	d914      	bls.n	8007c9e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c84:	1d1a      	adds	r2, r3, #4
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b04      	subs	r3, #4
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c9c:	e05a      	b.n	8007d54 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d917      	bls.n	8007cda <HAL_SPI_Transmit+0x306>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d013      	beq.n	8007cda <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc0:	1c9a      	adds	r2, r3, #2
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b02      	subs	r3, #2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007cd8:	e03c      	b.n	8007d54 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3320      	adds	r3, #32
 8007ce4:	7812      	ldrb	r2, [r2, #0]
 8007ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d04:	e026      	b.n	8007d54 <HAL_SPI_Transmit+0x380>
 8007d06:	bf00      	nop
 8007d08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d0c:	f7fa fa04 	bl	8002118 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d803      	bhi.n	8007d24 <HAL_SPI_Transmit+0x350>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d102      	bne.n	8007d2a <HAL_SPI_Transmit+0x356>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d114      	bne.n	8007d54 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fa66 	bl	80081fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e02c      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f47f af78 	bne.w	8007c52 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2108      	movs	r1, #8
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fae5 	bl	800833c <SPI_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7e:	f043 0220 	orr.w	r2, r3, #32
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fa37 	bl	80081fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007dac:	7efb      	ldrb	r3, [r7, #27]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop

08007db8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007dd0:	6a3a      	ldr	r2, [r7, #32]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dea:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3330      	adds	r3, #48	; 0x30
 8007df2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d113      	bne.n	8007e26 <HAL_SPI_IRQHandler+0x6e>
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10e      	bne.n	8007e26 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
    handled = 1UL;
 8007e22:	2301      	movs	r3, #1
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10f      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x98>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d105      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
    handled = 1UL;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10f      	bne.n	8007e7a <HAL_SPI_IRQHandler+0xc2>
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
    handled = 1UL;
 8007e76:	2301      	movs	r3, #1
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 816f 	bne.w	8008160 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a0 	beq.w	8007fce <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0208 	orr.w	r2, r2, #8
 8007e9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0210 	orr.w	r2, r2, #16
 8007eac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ebc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0208 	bic.w	r2, r2, #8
 8007ecc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00f      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x140>
 8007ed8:	7cfb      	ldrb	r3, [r7, #19]
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d004      	beq.n	8007ee8 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d007      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x140>
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d059      	beq.n	8007fa2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d154      	bne.n	8007fa2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d13d      	bne.n	8007f82 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007f06:	e036      	b.n	8007f76 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b0f      	cmp	r3, #15
 8007f0e:	d90b      	bls.n	8007f28 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f1a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	1d1a      	adds	r2, r3, #4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	665a      	str	r2, [r3, #100]	; 0x64
 8007f26:	e01d      	b.n	8007f64 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b07      	cmp	r3, #7
 8007f2e:	d90b      	bls.n	8007f48 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	8812      	ldrh	r2, [r2, #0]
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	665a      	str	r2, [r3, #100]	; 0x64
 8007f46:	e00d      	b.n	8007f64 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1c2      	bne.n	8007f08 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f93a 	bl	80081fc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f90a 	bl	80081b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007fa0:	e0e3      	b.n	800816a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007fa2:	7cfb      	ldrb	r3, [r7, #19]
 8007fa4:	2b05      	cmp	r3, #5
 8007fa6:	d103      	bne.n	8007fb0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f8f9 	bl	80081a0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007fae:	e0d9      	b.n	8008164 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d103      	bne.n	8007fbe <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8e8 	bl	800818c <HAL_SPI_RxCpltCallback>
    return;
 8007fbc:	e0d2      	b.n	8008164 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007fbe:	7cfb      	ldrb	r3, [r7, #19]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	f040 80cf 	bne.w	8008164 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8d6 	bl	8008178 <HAL_SPI_TxCpltCallback>
    return;
 8007fcc:	e0ca      	b.n	8008164 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00d      	beq.n	8007ff4 <HAL_SPI_IRQHandler+0x23c>
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff0:	619a      	str	r2, [r3, #24]

    return;
 8007ff2:	e0ba      	b.n	800816a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80b5 	beq.w	800816a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00f      	beq.n	800802a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008010:	f043 0204 	orr.w	r2, r3, #4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	699a      	ldr	r2, [r3, #24]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008028:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00f      	beq.n	8008054 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	f043 0201 	orr.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008052:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	f043 0208 	orr.w	r2, r3, #8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800807c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0220 	orr.w	r2, r2, #32
 80080a6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d05a      	beq.n	8008168 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6919      	ldr	r1, [r3, #16]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4b28      	ldr	r3, [pc, #160]	; (8008170 <HAL_SPI_IRQHandler+0x3b8>)
 80080ce:	400b      	ands	r3, r1
 80080d0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080dc:	d138      	bne.n	8008150 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80080ec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d013      	beq.n	800811e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	4a1e      	ldr	r2, [pc, #120]	; (8008174 <HAL_SPI_IRQHandler+0x3bc>)
 80080fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008102:	4618      	mov	r0, r3
 8008104:	f7fa fcc4 	bl	8002a90 <HAL_DMA_Abort_IT>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008114:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008122:	2b00      	cmp	r3, #0
 8008124:	d020      	beq.n	8008168 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800812a:	4a12      	ldr	r2, [pc, #72]	; (8008174 <HAL_SPI_IRQHandler+0x3bc>)
 800812c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008132:	4618      	mov	r0, r3
 8008134:	f7fa fcac 	bl	8002a90 <HAL_DMA_Abort_IT>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d014      	beq.n	8008168 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008144:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800814e:	e00b      	b.n	8008168 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f82b 	bl	80081b4 <HAL_SPI_ErrorCallback>
    return;
 800815e:	e003      	b.n	8008168 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008160:	bf00      	nop
 8008162:	e002      	b.n	800816a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008168:	bf00      	nop
  }
}
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	fffffc94 	.word	0xfffffc94
 8008174:	080081c9 	.word	0x080081c9

08008178 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff ffe0 	bl	80081b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0210 	orr.w	r2, r2, #16
 800822a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0201 	bic.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6919      	ldr	r1, [r3, #16]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b3c      	ldr	r3, [pc, #240]	; (8008338 <SPI_CloseTransfer+0x13c>)
 8008248:	400b      	ands	r3, r1
 800824a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800825a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b04      	cmp	r3, #4
 8008266:	d014      	beq.n	8008292 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00f      	beq.n	8008292 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0220 	orr.w	r2, r2, #32
 8008290:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d014      	beq.n	80082c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ae:	f043 0204 	orr.w	r2, r3, #4
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	f043 0201 	orr.w	r2, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00f      	beq.n	800831c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008302:	f043 0208 	orr.w	r2, r3, #8
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800831a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	fffffc90 	.word	0xfffffc90

0800833c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	4613      	mov	r3, r2
 800834a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800834c:	e010      	b.n	8008370 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834e:	f7f9 fee3 	bl	8002118 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	429a      	cmp	r2, r3
 800835c:	d803      	bhi.n	8008366 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d102      	bne.n	800836c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e00f      	b.n	8008390 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4013      	ands	r3, r2
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	429a      	cmp	r2, r3
 800837e:	bf0c      	ite	eq
 8008380:	2301      	moveq	r3, #1
 8008382:	2300      	movne	r3, #0
 8008384:	b2db      	uxtb	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	429a      	cmp	r2, r3
 800838c:	d0df      	beq.n	800834e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3307      	adds	r3, #7
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	fb02 f303 	mul.w	r3, r2, r3
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e042      	b.n	8008466 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7f9 fcb4 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2224      	movs	r2, #36	; 0x24
 80083fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f82d 	bl	8008470 <UART_SetConfig>
 8008416:	4603      	mov	r3, r0
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e022      	b.n	8008466 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fd81 	bl	8008f30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800843c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800844c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0201 	orr.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fe08 	bl	8009074 <UART_CheckIdleState>
 8008464:	4603      	mov	r3, r0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b08e      	sub	sp, #56	; 0x38
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4bbf      	ldr	r3, [pc, #764]	; (800879c <UART_SetConfig+0x32c>)
 800849e:	4013      	ands	r3, r2
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084a6:	430b      	orrs	r3, r1
 80084a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4ab5      	ldr	r2, [pc, #724]	; (80087a0 <UART_SetConfig+0x330>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d6:	4313      	orrs	r3, r2
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	4bb0      	ldr	r3, [pc, #704]	; (80087a4 <UART_SetConfig+0x334>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084ea:	430b      	orrs	r3, r1
 80084ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	f023 010f 	bic.w	r1, r3, #15
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4aa7      	ldr	r2, [pc, #668]	; (80087a8 <UART_SetConfig+0x338>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d176      	bne.n	80085fc <UART_SetConfig+0x18c>
 800850e:	4ba7      	ldr	r3, [pc, #668]	; (80087ac <UART_SetConfig+0x33c>)
 8008510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008516:	2b28      	cmp	r3, #40	; 0x28
 8008518:	d86c      	bhi.n	80085f4 <UART_SetConfig+0x184>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <UART_SetConfig+0xb0>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	080085c5 	.word	0x080085c5
 8008524:	080085f5 	.word	0x080085f5
 8008528:	080085f5 	.word	0x080085f5
 800852c:	080085f5 	.word	0x080085f5
 8008530:	080085f5 	.word	0x080085f5
 8008534:	080085f5 	.word	0x080085f5
 8008538:	080085f5 	.word	0x080085f5
 800853c:	080085f5 	.word	0x080085f5
 8008540:	080085cd 	.word	0x080085cd
 8008544:	080085f5 	.word	0x080085f5
 8008548:	080085f5 	.word	0x080085f5
 800854c:	080085f5 	.word	0x080085f5
 8008550:	080085f5 	.word	0x080085f5
 8008554:	080085f5 	.word	0x080085f5
 8008558:	080085f5 	.word	0x080085f5
 800855c:	080085f5 	.word	0x080085f5
 8008560:	080085d5 	.word	0x080085d5
 8008564:	080085f5 	.word	0x080085f5
 8008568:	080085f5 	.word	0x080085f5
 800856c:	080085f5 	.word	0x080085f5
 8008570:	080085f5 	.word	0x080085f5
 8008574:	080085f5 	.word	0x080085f5
 8008578:	080085f5 	.word	0x080085f5
 800857c:	080085f5 	.word	0x080085f5
 8008580:	080085dd 	.word	0x080085dd
 8008584:	080085f5 	.word	0x080085f5
 8008588:	080085f5 	.word	0x080085f5
 800858c:	080085f5 	.word	0x080085f5
 8008590:	080085f5 	.word	0x080085f5
 8008594:	080085f5 	.word	0x080085f5
 8008598:	080085f5 	.word	0x080085f5
 800859c:	080085f5 	.word	0x080085f5
 80085a0:	080085e5 	.word	0x080085e5
 80085a4:	080085f5 	.word	0x080085f5
 80085a8:	080085f5 	.word	0x080085f5
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	080085f5 	.word	0x080085f5
 80085b4:	080085f5 	.word	0x080085f5
 80085b8:	080085f5 	.word	0x080085f5
 80085bc:	080085f5 	.word	0x080085f5
 80085c0:	080085ed 	.word	0x080085ed
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ca:	e222      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085cc:	2304      	movs	r3, #4
 80085ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d2:	e21e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085d4:	2308      	movs	r3, #8
 80085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085da:	e21a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085dc:	2310      	movs	r3, #16
 80085de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e2:	e216      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085e4:	2320      	movs	r3, #32
 80085e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ea:	e212      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f2:	e20e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fa:	e20a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6b      	ldr	r2, [pc, #428]	; (80087b0 <UART_SetConfig+0x340>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d130      	bne.n	8008668 <UART_SetConfig+0x1f8>
 8008606:	4b69      	ldr	r3, [pc, #420]	; (80087ac <UART_SetConfig+0x33c>)
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	2b05      	cmp	r3, #5
 8008610:	d826      	bhi.n	8008660 <UART_SetConfig+0x1f0>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <UART_SetConfig+0x1a8>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008631 	.word	0x08008631
 800861c:	08008639 	.word	0x08008639
 8008620:	08008641 	.word	0x08008641
 8008624:	08008649 	.word	0x08008649
 8008628:	08008651 	.word	0x08008651
 800862c:	08008659 	.word	0x08008659
 8008630:	2300      	movs	r3, #0
 8008632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008636:	e1ec      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008638:	2304      	movs	r3, #4
 800863a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863e:	e1e8      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008640:	2308      	movs	r3, #8
 8008642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008646:	e1e4      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008648:	2310      	movs	r3, #16
 800864a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864e:	e1e0      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008650:	2320      	movs	r3, #32
 8008652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008656:	e1dc      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008658:	2340      	movs	r3, #64	; 0x40
 800865a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865e:	e1d8      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008660:	2380      	movs	r3, #128	; 0x80
 8008662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008666:	e1d4      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a51      	ldr	r2, [pc, #324]	; (80087b4 <UART_SetConfig+0x344>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d130      	bne.n	80086d4 <UART_SetConfig+0x264>
 8008672:	4b4e      	ldr	r3, [pc, #312]	; (80087ac <UART_SetConfig+0x33c>)
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	f003 0307 	and.w	r3, r3, #7
 800867a:	2b05      	cmp	r3, #5
 800867c:	d826      	bhi.n	80086cc <UART_SetConfig+0x25c>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <UART_SetConfig+0x214>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	0800869d 	.word	0x0800869d
 8008688:	080086a5 	.word	0x080086a5
 800868c:	080086ad 	.word	0x080086ad
 8008690:	080086b5 	.word	0x080086b5
 8008694:	080086bd 	.word	0x080086bd
 8008698:	080086c5 	.word	0x080086c5
 800869c:	2300      	movs	r3, #0
 800869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a2:	e1b6      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086a4:	2304      	movs	r3, #4
 80086a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086aa:	e1b2      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086ac:	2308      	movs	r3, #8
 80086ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b2:	e1ae      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086b4:	2310      	movs	r3, #16
 80086b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ba:	e1aa      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086bc:	2320      	movs	r3, #32
 80086be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c2:	e1a6      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ca:	e1a2      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d2:	e19e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a37      	ldr	r2, [pc, #220]	; (80087b8 <UART_SetConfig+0x348>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d130      	bne.n	8008740 <UART_SetConfig+0x2d0>
 80086de:	4b33      	ldr	r3, [pc, #204]	; (80087ac <UART_SetConfig+0x33c>)
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	d826      	bhi.n	8008738 <UART_SetConfig+0x2c8>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <UART_SetConfig+0x280>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008709 	.word	0x08008709
 80086f4:	08008711 	.word	0x08008711
 80086f8:	08008719 	.word	0x08008719
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008729 	.word	0x08008729
 8008704:	08008731 	.word	0x08008731
 8008708:	2300      	movs	r3, #0
 800870a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870e:	e180      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008710:	2304      	movs	r3, #4
 8008712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008716:	e17c      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008718:	2308      	movs	r3, #8
 800871a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871e:	e178      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008720:	2310      	movs	r3, #16
 8008722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008726:	e174      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008728:	2320      	movs	r3, #32
 800872a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872e:	e170      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008736:	e16c      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873e:	e168      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <UART_SetConfig+0x34c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d142      	bne.n	80087d0 <UART_SetConfig+0x360>
 800874a:	4b18      	ldr	r3, [pc, #96]	; (80087ac <UART_SetConfig+0x33c>)
 800874c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	2b05      	cmp	r3, #5
 8008754:	d838      	bhi.n	80087c8 <UART_SetConfig+0x358>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x2ec>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008775 	.word	0x08008775
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008785 	.word	0x08008785
 8008768:	0800878d 	.word	0x0800878d
 800876c:	08008795 	.word	0x08008795
 8008770:	080087c1 	.word	0x080087c1
 8008774:	2300      	movs	r3, #0
 8008776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877a:	e14a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800877c:	2304      	movs	r3, #4
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	e146      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008784:	2308      	movs	r3, #8
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	e142      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800878c:	2310      	movs	r3, #16
 800878e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008792:	e13e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008794:	2320      	movs	r3, #32
 8008796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879a:	e13a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800879c:	cfff69f3 	.word	0xcfff69f3
 80087a0:	58000c00 	.word	0x58000c00
 80087a4:	11fff4ff 	.word	0x11fff4ff
 80087a8:	40011000 	.word	0x40011000
 80087ac:	58024400 	.word	0x58024400
 80087b0:	40004400 	.word	0x40004400
 80087b4:	40004800 	.word	0x40004800
 80087b8:	40004c00 	.word	0x40004c00
 80087bc:	40005000 	.word	0x40005000
 80087c0:	2340      	movs	r3, #64	; 0x40
 80087c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087c6:	e124      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80087c8:	2380      	movs	r3, #128	; 0x80
 80087ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ce:	e120      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4acc      	ldr	r2, [pc, #816]	; (8008b08 <UART_SetConfig+0x698>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d176      	bne.n	80088c8 <UART_SetConfig+0x458>
 80087da:	4bcc      	ldr	r3, [pc, #816]	; (8008b0c <UART_SetConfig+0x69c>)
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087e2:	2b28      	cmp	r3, #40	; 0x28
 80087e4:	d86c      	bhi.n	80088c0 <UART_SetConfig+0x450>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <UART_SetConfig+0x37c>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008891 	.word	0x08008891
 80087f0:	080088c1 	.word	0x080088c1
 80087f4:	080088c1 	.word	0x080088c1
 80087f8:	080088c1 	.word	0x080088c1
 80087fc:	080088c1 	.word	0x080088c1
 8008800:	080088c1 	.word	0x080088c1
 8008804:	080088c1 	.word	0x080088c1
 8008808:	080088c1 	.word	0x080088c1
 800880c:	08008899 	.word	0x08008899
 8008810:	080088c1 	.word	0x080088c1
 8008814:	080088c1 	.word	0x080088c1
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088c1 	.word	0x080088c1
 8008820:	080088c1 	.word	0x080088c1
 8008824:	080088c1 	.word	0x080088c1
 8008828:	080088c1 	.word	0x080088c1
 800882c:	080088a1 	.word	0x080088a1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088c1 	.word	0x080088c1
 800883c:	080088c1 	.word	0x080088c1
 8008840:	080088c1 	.word	0x080088c1
 8008844:	080088c1 	.word	0x080088c1
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088a9 	.word	0x080088a9
 8008850:	080088c1 	.word	0x080088c1
 8008854:	080088c1 	.word	0x080088c1
 8008858:	080088c1 	.word	0x080088c1
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088c1 	.word	0x080088c1
 8008864:	080088c1 	.word	0x080088c1
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088b1 	.word	0x080088b1
 8008870:	080088c1 	.word	0x080088c1
 8008874:	080088c1 	.word	0x080088c1
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088c1 	.word	0x080088c1
 8008880:	080088c1 	.word	0x080088c1
 8008884:	080088c1 	.word	0x080088c1
 8008888:	080088c1 	.word	0x080088c1
 800888c:	080088b9 	.word	0x080088b9
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	e0bc      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008898:	2304      	movs	r3, #4
 800889a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889e:	e0b8      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088a0:	2308      	movs	r3, #8
 80088a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a6:	e0b4      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ae:	e0b0      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088b0:	2320      	movs	r3, #32
 80088b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b6:	e0ac      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088be:	e0a8      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c6:	e0a4      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a90      	ldr	r2, [pc, #576]	; (8008b10 <UART_SetConfig+0x6a0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d130      	bne.n	8008934 <UART_SetConfig+0x4c4>
 80088d2:	4b8e      	ldr	r3, [pc, #568]	; (8008b0c <UART_SetConfig+0x69c>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d826      	bhi.n	800892c <UART_SetConfig+0x4bc>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <UART_SetConfig+0x474>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	080088fd 	.word	0x080088fd
 80088e8:	08008905 	.word	0x08008905
 80088ec:	0800890d 	.word	0x0800890d
 80088f0:	08008915 	.word	0x08008915
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008925 	.word	0x08008925
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e086      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008904:	2304      	movs	r3, #4
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e082      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800890c:	2308      	movs	r3, #8
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	e07e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008914:	2310      	movs	r3, #16
 8008916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891a:	e07a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800891c:	2320      	movs	r3, #32
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e076      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008924:	2340      	movs	r3, #64	; 0x40
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892a:	e072      	b.n	8008a12 <UART_SetConfig+0x5a2>
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008932:	e06e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a76      	ldr	r2, [pc, #472]	; (8008b14 <UART_SetConfig+0x6a4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d130      	bne.n	80089a0 <UART_SetConfig+0x530>
 800893e:	4b73      	ldr	r3, [pc, #460]	; (8008b0c <UART_SetConfig+0x69c>)
 8008940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b05      	cmp	r3, #5
 8008948:	d826      	bhi.n	8008998 <UART_SetConfig+0x528>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x4e0>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008969 	.word	0x08008969
 8008954:	08008971 	.word	0x08008971
 8008958:	08008979 	.word	0x08008979
 800895c:	08008981 	.word	0x08008981
 8008960:	08008989 	.word	0x08008989
 8008964:	08008991 	.word	0x08008991
 8008968:	2300      	movs	r3, #0
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e050      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e04c      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e048      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008986:	e044      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008988:	2320      	movs	r3, #32
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	e040      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008996:	e03c      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899e:	e038      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a5c      	ldr	r2, [pc, #368]	; (8008b18 <UART_SetConfig+0x6a8>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d130      	bne.n	8008a0c <UART_SetConfig+0x59c>
 80089aa:	4b58      	ldr	r3, [pc, #352]	; (8008b0c <UART_SetConfig+0x69c>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d826      	bhi.n	8008a04 <UART_SetConfig+0x594>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <UART_SetConfig+0x54c>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089d5 	.word	0x080089d5
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	080089e5 	.word	0x080089e5
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	2302      	movs	r3, #2
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e01a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089dc:	2304      	movs	r3, #4
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e016      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089e4:	2308      	movs	r3, #8
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e012      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089ec:	2310      	movs	r3, #16
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f2:	e00e      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089f4:	2320      	movs	r3, #32
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	e00a      	b.n	8008a12 <UART_SetConfig+0x5a2>
 80089fc:	2340      	movs	r3, #64	; 0x40
 80089fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a02:	e006      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e002      	b.n	8008a12 <UART_SetConfig+0x5a2>
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a40      	ldr	r2, [pc, #256]	; (8008b18 <UART_SetConfig+0x6a8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	f040 80ef 	bne.w	8008bfc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	dc46      	bgt.n	8008ab4 <UART_SetConfig+0x644>
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	f2c0 8081 	blt.w	8008b2e <UART_SetConfig+0x6be>
 8008a2c:	3b02      	subs	r3, #2
 8008a2e:	2b1e      	cmp	r3, #30
 8008a30:	d87d      	bhi.n	8008b2e <UART_SetConfig+0x6be>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x5c8>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008abb 	.word	0x08008abb
 8008a3c:	08008b2f 	.word	0x08008b2f
 8008a40:	08008ac3 	.word	0x08008ac3
 8008a44:	08008b2f 	.word	0x08008b2f
 8008a48:	08008b2f 	.word	0x08008b2f
 8008a4c:	08008b2f 	.word	0x08008b2f
 8008a50:	08008ad3 	.word	0x08008ad3
 8008a54:	08008b2f 	.word	0x08008b2f
 8008a58:	08008b2f 	.word	0x08008b2f
 8008a5c:	08008b2f 	.word	0x08008b2f
 8008a60:	08008b2f 	.word	0x08008b2f
 8008a64:	08008b2f 	.word	0x08008b2f
 8008a68:	08008b2f 	.word	0x08008b2f
 8008a6c:	08008b2f 	.word	0x08008b2f
 8008a70:	08008ae3 	.word	0x08008ae3
 8008a74:	08008b2f 	.word	0x08008b2f
 8008a78:	08008b2f 	.word	0x08008b2f
 8008a7c:	08008b2f 	.word	0x08008b2f
 8008a80:	08008b2f 	.word	0x08008b2f
 8008a84:	08008b2f 	.word	0x08008b2f
 8008a88:	08008b2f 	.word	0x08008b2f
 8008a8c:	08008b2f 	.word	0x08008b2f
 8008a90:	08008b2f 	.word	0x08008b2f
 8008a94:	08008b2f 	.word	0x08008b2f
 8008a98:	08008b2f 	.word	0x08008b2f
 8008a9c:	08008b2f 	.word	0x08008b2f
 8008aa0:	08008b2f 	.word	0x08008b2f
 8008aa4:	08008b2f 	.word	0x08008b2f
 8008aa8:	08008b2f 	.word	0x08008b2f
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b21 	.word	0x08008b21
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	d036      	beq.n	8008b26 <UART_SetConfig+0x6b6>
 8008ab8:	e039      	b.n	8008b2e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008aba:	f7fe fa63 	bl	8006f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8008abe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ac0:	e03b      	b.n	8008b3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac2:	f107 0314 	add.w	r3, r7, #20
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fa72 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ad0:	e033      	b.n	8008b3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fbbe 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ae0:	e02b      	b.n	8008b3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <UART_SetConfig+0x69c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aee:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <UART_SetConfig+0x69c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <UART_SetConfig+0x6ac>)
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b00:	e01b      	b.n	8008b3a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <UART_SetConfig+0x6ac>)
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b06:	e018      	b.n	8008b3a <UART_SetConfig+0x6ca>
 8008b08:	40011400 	.word	0x40011400
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	40007800 	.word	0x40007800
 8008b14:	40007c00 	.word	0x40007c00
 8008b18:	58000c00 	.word	0x58000c00
 8008b1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b20:	4bc4      	ldr	r3, [pc, #784]	; (8008e34 <UART_SetConfig+0x9c4>)
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b24:	e009      	b.n	8008b3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b2c:	e005      	b.n	8008b3a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 81da 	beq.w	8008ef6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	4abc      	ldr	r2, [pc, #752]	; (8008e38 <UART_SetConfig+0x9c8>)
 8008b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b54:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	6a3a      	ldr	r2, [r7, #32]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d305      	bcc.n	8008b72 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b6c:	6a3a      	ldr	r2, [r7, #32]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d903      	bls.n	8008b7a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b78:	e1bd      	b.n	8008ef6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f04f 0100 	mov.w	r1, #0
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	4aac      	ldr	r2, [pc, #688]	; (8008e38 <UART_SetConfig+0x9c8>)
 8008b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	f7f7 fba1 	bl	80002d8 <__aeabi_uldivmod>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	020b      	lsls	r3, r1, #8
 8008ba8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bac:	0202      	lsls	r2, r0, #8
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	6849      	ldr	r1, [r1, #4]
 8008bb2:	0849      	lsrs	r1, r1, #1
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	f04f 0100 	mov.w	r1, #0
 8008bba:	1814      	adds	r4, r2, r0
 8008bbc:	eb43 0501 	adc.w	r5, r3, r1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fb83 	bl	80002d8 <__aeabi_uldivmod>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be0:	d308      	bcc.n	8008bf4 <UART_SetConfig+0x784>
 8008be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be8:	d204      	bcs.n	8008bf4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	e180      	b.n	8008ef6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008bfa:	e17c      	b.n	8008ef6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c04:	f040 80be 	bne.w	8008d84 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8008c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	dc49      	bgt.n	8008ca4 <UART_SetConfig+0x834>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	db7c      	blt.n	8008d0e <UART_SetConfig+0x89e>
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d87a      	bhi.n	8008d0e <UART_SetConfig+0x89e>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x7b0>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008cab 	.word	0x08008cab
 8008c24:	08008cb3 	.word	0x08008cb3
 8008c28:	08008d0f 	.word	0x08008d0f
 8008c2c:	08008d0f 	.word	0x08008d0f
 8008c30:	08008cbb 	.word	0x08008cbb
 8008c34:	08008d0f 	.word	0x08008d0f
 8008c38:	08008d0f 	.word	0x08008d0f
 8008c3c:	08008d0f 	.word	0x08008d0f
 8008c40:	08008ccb 	.word	0x08008ccb
 8008c44:	08008d0f 	.word	0x08008d0f
 8008c48:	08008d0f 	.word	0x08008d0f
 8008c4c:	08008d0f 	.word	0x08008d0f
 8008c50:	08008d0f 	.word	0x08008d0f
 8008c54:	08008d0f 	.word	0x08008d0f
 8008c58:	08008d0f 	.word	0x08008d0f
 8008c5c:	08008d0f 	.word	0x08008d0f
 8008c60:	08008cdb 	.word	0x08008cdb
 8008c64:	08008d0f 	.word	0x08008d0f
 8008c68:	08008d0f 	.word	0x08008d0f
 8008c6c:	08008d0f 	.word	0x08008d0f
 8008c70:	08008d0f 	.word	0x08008d0f
 8008c74:	08008d0f 	.word	0x08008d0f
 8008c78:	08008d0f 	.word	0x08008d0f
 8008c7c:	08008d0f 	.word	0x08008d0f
 8008c80:	08008d0f 	.word	0x08008d0f
 8008c84:	08008d0f 	.word	0x08008d0f
 8008c88:	08008d0f 	.word	0x08008d0f
 8008c8c:	08008d0f 	.word	0x08008d0f
 8008c90:	08008d0f 	.word	0x08008d0f
 8008c94:	08008d0f 	.word	0x08008d0f
 8008c98:	08008d0f 	.word	0x08008d0f
 8008c9c:	08008d0f 	.word	0x08008d0f
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	2b40      	cmp	r3, #64	; 0x40
 8008ca6:	d02e      	beq.n	8008d06 <UART_SetConfig+0x896>
 8008ca8:	e031      	b.n	8008d0e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008caa:	f7fd f9ff 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8008cae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cb0:	e033      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cb2:	f7fd fa11 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8008cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cb8:	e02f      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cba:	f107 0314 	add.w	r3, r7, #20
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe f976 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cc8:	e027      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fac2 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cd8:	e01f      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cda:	4b58      	ldr	r3, [pc, #352]	; (8008e3c <UART_SetConfig+0x9cc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d009      	beq.n	8008cfa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ce6:	4b55      	ldr	r3, [pc, #340]	; (8008e3c <UART_SetConfig+0x9cc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	08db      	lsrs	r3, r3, #3
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	4a53      	ldr	r2, [pc, #332]	; (8008e40 <UART_SetConfig+0x9d0>)
 8008cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cf8:	e00f      	b.n	8008d1a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008cfa:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <UART_SetConfig+0x9d0>)
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cfe:	e00c      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d00:	4b4c      	ldr	r3, [pc, #304]	; (8008e34 <UART_SetConfig+0x9c4>)
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d04:	e009      	b.n	8008d1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d0c:	e005      	b.n	8008d1a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80ea 	beq.w	8008ef6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	4a44      	ldr	r2, [pc, #272]	; (8008e38 <UART_SetConfig+0x9c8>)
 8008d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d34:	005a      	lsls	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2b0f      	cmp	r3, #15
 8008d4c:	d916      	bls.n	8008d7c <UART_SetConfig+0x90c>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d54:	d212      	bcs.n	8008d7c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f023 030f 	bic.w	r3, r3, #15
 8008d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	085b      	lsrs	r3, r3, #1
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	e0bc      	b.n	8008ef6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d82:	e0b8      	b.n	8008ef6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	dc4b      	bgt.n	8008e24 <UART_SetConfig+0x9b4>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f2c0 8087 	blt.w	8008ea0 <UART_SetConfig+0xa30>
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	f200 8084 	bhi.w	8008ea0 <UART_SetConfig+0xa30>
 8008d98:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0x930>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008e2b 	.word	0x08008e2b
 8008da4:	08008e45 	.word	0x08008e45
 8008da8:	08008ea1 	.word	0x08008ea1
 8008dac:	08008ea1 	.word	0x08008ea1
 8008db0:	08008e4d 	.word	0x08008e4d
 8008db4:	08008ea1 	.word	0x08008ea1
 8008db8:	08008ea1 	.word	0x08008ea1
 8008dbc:	08008ea1 	.word	0x08008ea1
 8008dc0:	08008e5d 	.word	0x08008e5d
 8008dc4:	08008ea1 	.word	0x08008ea1
 8008dc8:	08008ea1 	.word	0x08008ea1
 8008dcc:	08008ea1 	.word	0x08008ea1
 8008dd0:	08008ea1 	.word	0x08008ea1
 8008dd4:	08008ea1 	.word	0x08008ea1
 8008dd8:	08008ea1 	.word	0x08008ea1
 8008ddc:	08008ea1 	.word	0x08008ea1
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008ea1 	.word	0x08008ea1
 8008de8:	08008ea1 	.word	0x08008ea1
 8008dec:	08008ea1 	.word	0x08008ea1
 8008df0:	08008ea1 	.word	0x08008ea1
 8008df4:	08008ea1 	.word	0x08008ea1
 8008df8:	08008ea1 	.word	0x08008ea1
 8008dfc:	08008ea1 	.word	0x08008ea1
 8008e00:	08008ea1 	.word	0x08008ea1
 8008e04:	08008ea1 	.word	0x08008ea1
 8008e08:	08008ea1 	.word	0x08008ea1
 8008e0c:	08008ea1 	.word	0x08008ea1
 8008e10:	08008ea1 	.word	0x08008ea1
 8008e14:	08008ea1 	.word	0x08008ea1
 8008e18:	08008ea1 	.word	0x08008ea1
 8008e1c:	08008ea1 	.word	0x08008ea1
 8008e20:	08008e93 	.word	0x08008e93
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d037      	beq.n	8008e98 <UART_SetConfig+0xa28>
 8008e28:	e03a      	b.n	8008ea0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7fd f93f 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8008e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e30:	e03c      	b.n	8008eac <UART_SetConfig+0xa3c>
 8008e32:	bf00      	nop
 8008e34:	003d0900 	.word	0x003d0900
 8008e38:	0800aef0 	.word	0x0800aef0
 8008e3c:	58024400 	.word	0x58024400
 8008e40:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e44:	f7fd f948 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8008e48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e4a:	e02f      	b.n	8008eac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe f8ad 	bl	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e5a:	e027      	b.n	8008eac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5c:	f107 0308 	add.w	r3, r7, #8
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe f9f9 	bl	8007258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e6a:	e01f      	b.n	8008eac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e6c:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <UART_SetConfig+0xab0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e78:	4b29      	ldr	r3, [pc, #164]	; (8008f20 <UART_SetConfig+0xab0>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	08db      	lsrs	r3, r3, #3
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	4a28      	ldr	r2, [pc, #160]	; (8008f24 <UART_SetConfig+0xab4>)
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e8a:	e00f      	b.n	8008eac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <UART_SetConfig+0xab4>)
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e90:	e00c      	b.n	8008eac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e92:	4b25      	ldr	r3, [pc, #148]	; (8008f28 <UART_SetConfig+0xab8>)
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e96:	e009      	b.n	8008eac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e9e:	e005      	b.n	8008eac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d021      	beq.n	8008ef6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <UART_SetConfig+0xabc>)
 8008eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	441a      	add	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	2b0f      	cmp	r3, #15
 8008eda:	d909      	bls.n	8008ef0 <UART_SetConfig+0xa80>
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee2:	d205      	bcs.n	8008ef0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	e002      	b.n	8008ef6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3738      	adds	r7, #56	; 0x38
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	58024400 	.word	0x58024400
 8008f24:	03d09000 	.word	0x03d09000
 8008f28:	003d0900 	.word	0x003d0900
 8008f2c:	0800aef0 	.word	0x0800aef0

08008f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00a      	beq.n	8008f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	f003 0308 	and.w	r3, r3, #8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00a      	beq.n	8008fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01a      	beq.n	8009046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902e:	d10a      	bne.n	8009046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	605a      	str	r2, [r3, #4]
  }
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af02      	add	r7, sp, #8
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009084:	f7f9 f848 	bl	8002118 <HAL_GetTick>
 8009088:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d10e      	bne.n	80090b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f82f 	bl	800910a <UART_WaitOnFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e025      	b.n	8009102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d10e      	bne.n	80090e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f819 	bl	800910a <UART_WaitOnFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e00f      	b.n	8009102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b09c      	sub	sp, #112	; 0x70
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	4613      	mov	r3, r2
 8009118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911a:	e0a9      	b.n	8009270 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009122:	f000 80a5 	beq.w	8009270 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009126:	f7f8 fff7 	bl	8002118 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009132:	429a      	cmp	r2, r3
 8009134:	d302      	bcc.n	800913c <UART_WaitOnFlagUntilTimeout+0x32>
 8009136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009138:	2b00      	cmp	r3, #0
 800913a:	d140      	bne.n	80091be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800914a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009150:	667b      	str	r3, [r7, #100]	; 0x64
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800915c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e6      	bne.n	800913c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	f023 0301 	bic.w	r3, r3, #1
 8009184:	663b      	str	r3, [r7, #96]	; 0x60
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800918e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e5      	bne.n	800916e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e069      	b.n	8009292 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d051      	beq.n	8009270 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091da:	d149      	bne.n	8009270 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
 8009206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800920a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	613b      	str	r3, [r7, #16]
   return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3308      	adds	r3, #8
 8009236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009238:	623a      	str	r2, [r7, #32]
 800923a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	69f9      	ldr	r1, [r7, #28]
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	61bb      	str	r3, [r7, #24]
   return(result);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e5      	bne.n	8009218 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e010      	b.n	8009292 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69da      	ldr	r2, [r3, #28]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4013      	ands	r3, r2
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	429a      	cmp	r2, r3
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	429a      	cmp	r2, r3
 800928c:	f43f af46 	beq.w	800911c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3770      	adds	r7, #112	; 0x70
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e027      	b.n	8009300 <HAL_UARTEx_DisableFifoMode+0x66>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2224      	movs	r2, #36	; 0x24
 80092bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0201 	bic.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009320:	2302      	movs	r3, #2
 8009322:	e02d      	b.n	8009380 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2224      	movs	r2, #36	; 0x24
 8009330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 0201 	bic.w	r2, r2, #1
 800934a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f84f 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800939c:	2302      	movs	r3, #2
 800939e:	e02d      	b.n	80093fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2224      	movs	r2, #36	; 0x24
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0201 	bic.w	r2, r2, #1
 80093c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f811 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009424:	e031      	b.n	800948a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009426:	2310      	movs	r3, #16
 8009428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800942a:	2310      	movs	r3, #16
 800942c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0e5b      	lsrs	r3, r3, #25
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	0f5b      	lsrs	r3, r3, #29
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	7b3a      	ldrb	r2, [r7, #12]
 8009452:	4911      	ldr	r1, [pc, #68]	; (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009454:	5c8a      	ldrb	r2, [r1, r2]
 8009456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800945a:	7b3a      	ldrb	r2, [r7, #12]
 800945c:	490f      	ldr	r1, [pc, #60]	; (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800945e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009460:	fb93 f3f2 	sdiv	r3, r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	4909      	ldr	r1, [pc, #36]	; (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009472:	5c8a      	ldrb	r2, [r1, r2]
 8009474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	4908      	ldr	r1, [pc, #32]	; (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800947c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800947e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	0800af08 	.word	0x0800af08
 800949c:	0800af10 	.word	0x0800af10

080094a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094a0:	b084      	sub	sp, #16
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	f107 001c 	add.w	r0, r7, #28
 80094ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d120      	bne.n	80094fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68da      	ldr	r2, [r3, #12]
 80094c8:	4b2a      	ldr	r3, [pc, #168]	; (8009574 <USB_CoreInit+0xd4>)
 80094ca:	4013      	ands	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d105      	bne.n	80094ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 faa8 	bl	8009a44 <USB_CoreReset>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
 80094f8:	e01a      	b.n	8009530 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa9c 	bl	8009a44 <USB_CoreReset>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
 8009522:	e005      	b.n	8009530 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	2b01      	cmp	r3, #1
 8009534:	d116      	bne.n	8009564 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <USB_CoreInit+0xd8>)
 8009546:	4313      	orrs	r3, r2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f043 0206 	orr.w	r2, r3, #6
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009570:	b004      	add	sp, #16
 8009572:	4770      	bx	lr
 8009574:	ffbdffbf 	.word	0xffbdffbf
 8009578:	03ee0000 	.word	0x03ee0000

0800957c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f023 0201 	bic.w	r2, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d115      	bne.n	80095ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095cc:	2001      	movs	r0, #1
 80095ce:	f7f8 fdaf 	bl	8002130 <HAL_Delay>
      ms++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa25 	bl	8009a28 <USB_GetMode>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d01e      	beq.n	8009622 <USB_SetCurrentMode+0x84>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b31      	cmp	r3, #49	; 0x31
 80095e8:	d9f0      	bls.n	80095cc <USB_SetCurrentMode+0x2e>
 80095ea:	e01a      	b.n	8009622 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d115      	bne.n	800961e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095fe:	2001      	movs	r0, #1
 8009600:	f7f8 fd96 	bl	8002130 <HAL_Delay>
      ms++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa0c 	bl	8009a28 <USB_GetMode>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <USB_SetCurrentMode+0x84>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b31      	cmp	r3, #49	; 0x31
 800961a:	d9f0      	bls.n	80095fe <USB_SetCurrentMode+0x60>
 800961c:	e001      	b.n	8009622 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e005      	b.n	800962e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b32      	cmp	r3, #50	; 0x32
 8009626:	d101      	bne.n	800962c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e000      	b.n	800962e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009638:	b084      	sub	sp, #16
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009652:	2300      	movs	r3, #0
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	e009      	b.n	800966c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	3340      	adds	r3, #64	; 0x40
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	2200      	movs	r2, #0
 8009664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	3301      	adds	r3, #1
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2b0e      	cmp	r3, #14
 8009670:	d9f2      	bls.n	8009658 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11c      	bne.n	80096b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009686:	f043 0302 	orr.w	r3, r3, #2
 800968a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	e005      	b.n	80096be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096c4:	461a      	mov	r2, r3
 80096c6:	2300      	movs	r3, #0
 80096c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d0:	4619      	mov	r1, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d8:	461a      	mov	r2, r3
 80096da:	680b      	ldr	r3, [r1, #0]
 80096dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10c      	bne.n	80096fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096ea:	2100      	movs	r1, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f961 	bl	80099b4 <USB_SetDevSpeed>
 80096f2:	e008      	b.n	8009706 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096f4:	2101      	movs	r1, #1
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f95c 	bl	80099b4 <USB_SetDevSpeed>
 80096fc:	e003      	b.n	8009706 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096fe:	2103      	movs	r1, #3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f957 	bl	80099b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009706:	2110      	movs	r1, #16
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8f3 	bl	80098f4 <USB_FlushTxFifo>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f91d 	bl	8009958 <USB_FlushRxFifo>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972e:	461a      	mov	r2, r3
 8009730:	2300      	movs	r3, #0
 8009732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	461a      	mov	r2, r3
 800973c:	2300      	movs	r3, #0
 800973e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009746:	461a      	mov	r2, r3
 8009748:	2300      	movs	r3, #0
 800974a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	e043      	b.n	80097da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009768:	d118      	bne.n	800979c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	461a      	mov	r2, r3
 800977e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e013      	b.n	80097ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009792:	461a      	mov	r2, r3
 8009794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e008      	b.n	80097ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	461a      	mov	r2, r3
 80097aa:	2300      	movs	r3, #0
 80097ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ba:	461a      	mov	r2, r3
 80097bc:	2300      	movs	r3, #0
 80097be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	461a      	mov	r2, r3
 80097ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3301      	adds	r3, #1
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d3b7      	bcc.n	8009752 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e043      	b.n	8009870 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097fe:	d118      	bne.n	8009832 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	461a      	mov	r2, r3
 8009814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	e013      	b.n	8009844 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009828:	461a      	mov	r2, r3
 800982a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e008      	b.n	8009844 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983e:	461a      	mov	r2, r3
 8009840:	2300      	movs	r3, #0
 8009842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009850:	461a      	mov	r2, r3
 8009852:	2300      	movs	r3, #0
 8009854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009862:	461a      	mov	r2, r3
 8009864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3301      	adds	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	429a      	cmp	r2, r3
 8009876:	d3b7      	bcc.n	80097e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800988a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d105      	bne.n	80098ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	f043 0210 	orr.w	r2, r3, #16
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	4b0e      	ldr	r3, [pc, #56]	; (80098ec <USB_DevInit+0x2b4>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f043 0208 	orr.w	r2, r3, #8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d105      	bne.n	80098dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <USB_DevInit+0x2b8>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e8:	b004      	add	sp, #16
 80098ea:	4770      	bx	lr
 80098ec:	803c3800 	.word	0x803c3800
 80098f0:	40000004 	.word	0x40000004

080098f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	4a12      	ldr	r2, [pc, #72]	; (8009954 <USB_FlushTxFifo+0x60>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d901      	bls.n	8009912 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e01a      	b.n	8009948 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	daf3      	bge.n	8009902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	019b      	lsls	r3, r3, #6
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	4a08      	ldr	r2, [pc, #32]	; (8009954 <USB_FlushTxFifo+0x60>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d901      	bls.n	800993a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e006      	b.n	8009948 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b20      	cmp	r3, #32
 8009944:	d0f1      	beq.n	800992a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	00030d40 	.word	0x00030d40

08009958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3301      	adds	r3, #1
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	4a11      	ldr	r2, [pc, #68]	; (80099b0 <USB_FlushRxFifo+0x58>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d901      	bls.n	8009974 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e017      	b.n	80099a4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	daf3      	bge.n	8009964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2210      	movs	r2, #16
 8009984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3301      	adds	r3, #1
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	4a08      	ldr	r2, [pc, #32]	; (80099b0 <USB_FlushRxFifo+0x58>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e006      	b.n	80099a4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	f003 0310 	and.w	r3, r3, #16
 800999e:	2b10      	cmp	r3, #16
 80099a0:	d0f1      	beq.n	8009986 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	00030d40 	.word	0x00030d40

080099b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099d4:	4313      	orrs	r3, r2
 80099d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a00:	f023 0303 	bic.w	r3, r3, #3
 8009a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a14:	f043 0302 	orr.w	r3, r3, #2
 8009a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	f003 0301 	and.w	r3, r3, #1
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <USB_CoreReset+0x60>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d901      	bls.n	8009a60 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e01a      	b.n	8009a96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	daf3      	bge.n	8009a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	f043 0201 	orr.w	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <USB_CoreReset+0x60>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d901      	bls.n	8009a88 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e006      	b.n	8009a96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d0f1      	beq.n	8009a78 <USB_CoreReset+0x34>

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	00030d40 	.word	0x00030d40

08009aa8 <__libc_init_array>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4d0d      	ldr	r5, [pc, #52]	; (8009ae0 <__libc_init_array+0x38>)
 8009aac:	4c0d      	ldr	r4, [pc, #52]	; (8009ae4 <__libc_init_array+0x3c>)
 8009aae:	1b64      	subs	r4, r4, r5
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	42a6      	cmp	r6, r4
 8009ab6:	d109      	bne.n	8009acc <__libc_init_array+0x24>
 8009ab8:	4d0b      	ldr	r5, [pc, #44]	; (8009ae8 <__libc_init_array+0x40>)
 8009aba:	4c0c      	ldr	r4, [pc, #48]	; (8009aec <__libc_init_array+0x44>)
 8009abc:	f000 f820 	bl	8009b00 <_init>
 8009ac0:	1b64      	subs	r4, r4, r5
 8009ac2:	10a4      	asrs	r4, r4, #2
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	42a6      	cmp	r6, r4
 8009ac8:	d105      	bne.n	8009ad6 <__libc_init_array+0x2e>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad0:	4798      	blx	r3
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__libc_init_array+0xc>
 8009ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ada:	4798      	blx	r3
 8009adc:	3601      	adds	r6, #1
 8009ade:	e7f2      	b.n	8009ac6 <__libc_init_array+0x1e>
 8009ae0:	0800af20 	.word	0x0800af20
 8009ae4:	0800af20 	.word	0x0800af20
 8009ae8:	0800af20 	.word	0x0800af20
 8009aec:	0800af24 	.word	0x0800af24

08009af0 <memset>:
 8009af0:	4402      	add	r2, r0
 8009af2:	4603      	mov	r3, r0
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d100      	bne.n	8009afa <memset+0xa>
 8009af8:	4770      	bx	lr
 8009afa:	f803 1b01 	strb.w	r1, [r3], #1
 8009afe:	e7f9      	b.n	8009af4 <memset+0x4>

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
