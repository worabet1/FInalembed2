
Finalembed2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c0c  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb24  0800cb24  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb24  0800cb24  0001cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb2c  0800cb2c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb2c  0800cb2c  0001cb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb30  0800cb30  0001cb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  24000000  0800cb34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240000a8  0800cbdc  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000108  0800cc3c  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000093c  24000168  0800cc9c  00020168  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000aa4  0800cc9c  00020aa4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c9f7  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004163  00000000  00000000  0004cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00050cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001358  00000000  00000000  00052188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ba98  00000000  00000000  000534e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c26a  00000000  00000000  0008ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00185a0b  00000000  00000000  000ab1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00230bed  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005784  00000000  00000000  00230c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000168 	.word	0x24000168
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800af00 	.word	0x0800af00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400016c 	.word	0x2400016c
 80002d4:	0800af00 	.word	0x0800af00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af02      	add	r7, sp, #8
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000722:	88f8      	ldrh	r0, [r7, #6]
 8000724:	88b9      	ldrh	r1, [r7, #4]
 8000726:	887a      	ldrh	r2, [r7, #2]
 8000728:	883c      	ldrh	r4, [r7, #0]
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f000 fa8c 	bl	8000c4c <ST7735_FillRectangle>
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fillScreen+0x2c>)
 8000748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <fillScreen+0x30>)
 800074e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	460b      	mov	r3, r1
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd2 	bl	8000704 <fillRect>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	240001ee 	.word	0x240001ee
 800076c:	240001f2 	.word	0x240001f2

08000770 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <ST7735_Select+0x14>)
 800077c:	f005 f832 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00

08000788 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <ST7735_Unselect+0x14>)
 8000794:	f005 f826 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58020c00 	.word	0x58020c00

080007a0 <ST7735_Reset>:

void ST7735_Reset()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_Reset+0x28>)
 80007ac:	f005 f81a 	bl	80057e4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f002 f9df 	bl	8002b74 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ST7735_Reset+0x28>)
 80007be:	f005 f811 	bl	80057e4 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58021800 	.word	0x58021800

080007cc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <ST7735_WriteCommand+0x2c>)
 80007de:	f005 f801 	bl	80057e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ST7735_WriteCommand+0x30>)
 80007ec:	f007 fe14 	bl	8008418 <HAL_SPI_Transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	240007e8 	.word	0x240007e8

08000800 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <ST7735_WriteData+0x30>)
 8000812:	f004 ffe7 	bl	80057e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <ST7735_WriteData+0x34>)
 8000822:	f007 fdf9 	bl	8008418 <HAL_SPI_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58020c00 	.word	0x58020c00
 8000834:	240007e8 	.word	0x240007e8

08000838 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800084a:	e034      	b.n	80008b6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffb7 	bl	80007cc <ST7735_WriteCommand>

        numArgs = *addr++;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	b29b      	uxth	r3, r3
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000878:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800087a:	7abb      	ldrb	r3, [r7, #10]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffbb 	bl	8000800 <ST7735_WriteData>
            addr += numArgs;
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00e      	beq.n	80008b6 <DisplayInit+0x7e>
            ms = *addr++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d102      	bne.n	80008ae <DisplayInit+0x76>
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f95f 	bl	8002b74 <HAL_Delay>
    while(numCommands--) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	73fa      	strb	r2, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1c5      	bne.n	800084c <DisplayInit+0x14>
        }
    }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4604      	mov	r4, r0
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4623      	mov	r3, r4
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4603      	mov	r3, r0
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	717b      	strb	r3, [r7, #5]
 80008e6:	4613      	mov	r3, r2
 80008e8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f7ff ff6e 	bl	80007cc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008f0:	2300      	movs	r3, #0
 80008f2:	733b      	strb	r3, [r7, #12]
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff72 	bl	8000800 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800091c:	202b      	movs	r0, #43	; 0x2b
 800091e:	f7ff ff55 	bl	80007cc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000946:	202c      	movs	r0, #44	; 0x2c
 8000948:	f7ff ff40 	bl	80007cc <ST7735_WriteCommand>
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	240001e6 	.word	0x240001e6
 8000958:	240001ea 	.word	0x240001ea

0800095c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000966:	f7ff ff03 	bl	8000770 <ST7735_Select>
    ST7735_Reset();
 800096a:	f7ff ff19 	bl	80007a0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <ST7735_Init+0x44>)
 8000970:	f7ff ff62 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds2);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <ST7735_Init+0x48>)
 8000976:	f7ff ff5f 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds3);
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ST7735_Init+0x4c>)
 800097c:	f7ff ff5c 	bl	8000838 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <ST7735_Init+0x50>)
 8000982:	2202      	movs	r2, #2
 8000984:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <ST7735_Init+0x54>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f810 	bl	80009b4 <ST7735_SetRotation>
    ST7735_Unselect();
 8000994:	f7ff fef8 	bl	8000788 <ST7735_Unselect>

}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800afc8 	.word	0x0800afc8
 80009a4:	0800b000 	.word	0x0800b000
 80009a8:	0800b010 	.word	0x0800b010
 80009ac:	240001e7 	.word	0x240001e7
 80009b0:	240001eb 	.word	0x240001eb

080009b4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009cc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d84e      	bhi.n	8000a74 <ST7735_SetRotation+0xc0>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <ST7735_SetRotation+0x28>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a0f 	.word	0x08000a0f
 80009e4:	08000a31 	.word	0x08000a31
 80009e8:	08000a53 	.word	0x08000a53
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <ST7735_SetRotation+0xe8>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <ST7735_SetRotation+0xec>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a02:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a0a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a0c:	e032      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a24:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a2e:	e021      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a46:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a50:	e010      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a72:	bf00      	nop
  }
  ST7735_Select();
 8000a74:	f7ff fe7c 	bl	8000770 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f7ff fea7 	bl	80007cc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff febb 	bl	8000800 <ST7735_WriteData>
  ST7735_Unselect();
 8000a8a:	f7ff fe7d 	bl	8000788 <ST7735_Unselect>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	240001ec 	.word	0x240001ec
 8000a9c:	240001f2 	.word	0x240001f2
 8000aa0:	240001ee 	.word	0x240001ee
 8000aa4:	240001e7 	.word	0x240001e7
 8000aa8:	240001e6 	.word	0x240001e6
 8000aac:	240001eb 	.word	0x240001eb
 8000ab0:	240001ea 	.word	0x240001ea

08000ab4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b089      	sub	sp, #36	; 0x24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2d8      	uxtb	r0, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2dc      	uxtb	r4, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4622      	mov	r2, r4
 8000af4:	f7ff feea 	bl	80008cc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e043      	b.n	8000b86 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	3b20      	subs	r3, #32
 8000b04:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e029      	b.n	8000b74 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	743b      	strb	r3, [r7, #16]
 8000b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe5a 	bl	8000800 <ST7735_WriteData>
 8000b4c:	e00f      	b.n	8000b6e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe49 	bl	8000800 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b78:	461a      	mov	r2, r3
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d3cf      	bcc.n	8000b20 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3301      	adds	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d3b5      	bcc.n	8000afe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3724      	adds	r7, #36	; 0x24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
	...

08000ba4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af04      	add	r7, sp, #16
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000bb8:	f7ff fdda 	bl	8000770 <ST7735_Select>

    while(*str) {
 8000bbc:	e033      	b.n	8000c26 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	7d3a      	ldrb	r2, [r7, #20]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <ST7735_WriteString+0xa0>)
 8000bc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	db16      	blt.n	8000bfc <ST7735_WriteString+0x58>
            x = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	7d7a      	ldrb	r2, [r7, #21]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <ST7735_WriteString+0xa4>)
 8000be4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da21      	bge.n	8000c30 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d103      	bne.n	8000bfc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
                continue;
 8000bfa:	e014      	b.n	8000c26 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	8bbb      	ldrh	r3, [r7, #28]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f7ff ff4f 	bl	8000ab4 <ST7735_WriteChar>
        x += font.width;
 8000c16:	7d3b      	ldrb	r3, [r7, #20]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1c7      	bne.n	8000bbe <ST7735_WriteString+0x1a>
 8000c2e:	e000      	b.n	8000c32 <ST7735_WriteString+0x8e>
                break;
 8000c30:	bf00      	nop
    }

    ST7735_Unselect();
 8000c32:	f7ff fda9 	bl	8000788 <ST7735_Unselect>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c40:	b002      	add	sp, #8
 8000c42:	4770      	bx	lr
 8000c44:	240001ee 	.word	0x240001ee
 8000c48:	240001f2 	.word	0x240001f2

08000c4c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	da67      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	da61      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd06      	ble.n	8000ca0 <ST7735_FillRectangle+0x54>
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd06      	ble.n	8000cbe <ST7735_FillRectangle+0x72>
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cbe:	f7ff fd57 	bl	8000770 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2dc      	uxtb	r4, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4622      	mov	r2, r4
 8000cec:	f7ff fdee 	bl	80008cc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf0:	8c3b      	ldrh	r3, [r7, #32]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	733b      	strb	r3, [r7, #12]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <ST7735_FillRectangle+0x10c>)
 8000d08:	f004 fd6c 	bl	80057e4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	e013      	b.n	8000d3a <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e00a      	b.n	8000d2e <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ST7735_FillRectangle+0x110>)
 8000d24:	f007 fb78 	bl	8008418 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000d40:	f7ff fd22 	bl	8000788 <ST7735_Unselect>
 8000d44:	e000      	b.n	8000d48 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	240001ee 	.word	0x240001ee
 8000d54:	240001f2 	.word	0x240001f2
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	240007e8 	.word	0x240007e8

08000d60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af04      	add	r7, sp, #16
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000d6c:	bf00      	nop
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <main+0x274>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <main+0x24>
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	617a      	str	r2, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0xe>
		;
	if (timeout < 0) {
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x2e>
		Error_Handler();
 8000d8a:	f001 fa5b 	bl	8002244 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d8e:	f001 fe5f 	bl	8002a50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d92:	f000 fb9f 	bl	80014d4 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d96:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <main+0x274>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a8d      	ldr	r2, [pc, #564]	; (8000fd4 <main+0x274>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b8b      	ldr	r3, [pc, #556]	; (8000fd4 <main+0x274>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 fd2f 	bl	8005818 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f004 fd45 	bl	800584c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000dc8:	bf00      	nop
 8000dca:	4b82      	ldr	r3, [pc, #520]	; (8000fd4 <main+0x274>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x80>
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	617a      	str	r2, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dcf4      	bgt.n	8000dca <main+0x6a>
		;
	if (timeout < 0) {
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da01      	bge.n	8000dea <main+0x8a>
		Error_Handler();
 8000de6:	f001 fa2d 	bl	8002244 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dea:	f000 fda1 	bl	8001930 <MX_GPIO_Init>
	MX_ETH_Init();
 8000dee:	f000 fbf5 	bl	80015dc <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000df2:	f000 fcef 	bl	80017d4 <MX_USART3_UART_Init>
	MX_DMA_Init();
 8000df6:	f000 fd6b 	bl	80018d0 <MX_DMA_Init>
	MX_SPI1_Init();
 8000dfa:	f000 fc3b 	bl	8001674 <MX_SPI1_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 fd35 	bl	800186c <MX_USB_OTG_FS_PCD_Init>
	MX_SPI2_Init();
 8000e02:	f000 fc8f 	bl	8001724 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	ST7735_Init(2);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff fda8 	bl	800095c <ST7735_Init>
	fillScreen(BLACK);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fc95 	bl	800073c <fillScreen>
	Write_MFRC522(0x2A, 0x80);
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	202a      	movs	r0, #42	; 0x2a
 8000e16:	f001 f819 	bl	8001e4c <Write_MFRC522>
	Write_MFRC522(0x2B, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000e1a:	21a9      	movs	r1, #169	; 0xa9
 8000e1c:	202b      	movs	r0, #43	; 0x2b
 8000e1e:	f001 f815 	bl	8001e4c <Write_MFRC522>
	Write_MFRC522(0x2D, 0x03); //30);
 8000e22:	2103      	movs	r1, #3
 8000e24:	202d      	movs	r0, #45	; 0x2d
 8000e26:	f001 f811 	bl	8001e4c <Write_MFRC522>
	Write_MFRC522(0x2C, 0xE8); //0);
 8000e2a:	21e8      	movs	r1, #232	; 0xe8
 8000e2c:	202c      	movs	r0, #44	; 0x2c
 8000e2e:	f001 f80d 	bl	8001e4c <Write_MFRC522>
	Write_MFRC522(0x15, 0x40);     // force 100% ASK modulation
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	2015      	movs	r0, #21
 8000e36:	f001 f809 	bl	8001e4c <Write_MFRC522>
	Write_MFRC522(0x11, 0x3D);       // CRC Initial value 0x6363
 8000e3a:	213d      	movs	r1, #61	; 0x3d
 8000e3c:	2011      	movs	r0, #17
 8000e3e:	f001 f805 	bl	8001e4c <Write_MFRC522>
	char tmp1;
	tmp1 = Read_MFRC522(0x14);
 8000e42:	2014      	movs	r0, #20
 8000e44:	f001 f834 	bl	8001eb0 <Read_MFRC522>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	72fb      	strb	r3, [r7, #11]
	Write_MFRC522(0x14, tmp1 | 0x03); // antenna on
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4619      	mov	r1, r3
 8000e56:	2014      	movs	r0, #20
 8000e58:	f000 fff8 	bl	8001e4c <Write_MFRC522>
	card_data[0] = 0xFF;
 8000e5c:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <main+0x278>)
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	601a      	str	r2, [r3, #0]
	card_data[1] = 0xFF;
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <main+0x278>)
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	605a      	str	r2, [r3, #4]
	card_data[2] = 0xFF;
 8000e68:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <main+0x278>)
 8000e6a:	22ff      	movs	r2, #255	; 0xff
 8000e6c:	609a      	str	r2, [r3, #8]
	card_data[3] = 0xFF;
 8000e6e:	4b5a      	ldr	r3, [pc, #360]	; (8000fd8 <main+0x278>)
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	60da      	str	r2, [r3, #12]
	card_data[4] = 0xFF;
 8000e74:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <main+0x278>)
 8000e76:	22ff      	movs	r2, #255	; 0xff
 8000e78:	611a      	str	r2, [r3, #16]
	card_data[5] = 0xFF;
 8000e7a:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <main+0x278>)
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	615a      	str	r2, [r3, #20]
	card_data[6] = 0xFF; //Access_bits[6]
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <main+0x278>)
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	619a      	str	r2, [r3, #24]
	card_data[7] = 0x07; //Access_bits[7]
 8000e86:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <main+0x278>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	61da      	str	r2, [r3, #28]
	card_data[8] = 0x80; //Access_bits[8]
 8000e8c:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <main+0x278>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	621a      	str	r2, [r3, #32]
	card_data[9] = 0x88; //user_byte[9]
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <main+0x278>)
 8000e94:	2288      	movs	r2, #136	; 0x88
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
	card_data[10] = 0x88; //user_byte[10]
 8000e98:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <main+0x278>)
 8000e9a:	2288      	movs	r2, #136	; 0x88
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
	card_data[11] = 0x88; //user_byte[11]
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <main+0x278>)
 8000ea0:	2288      	movs	r2, #136	; 0x88
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	card_data[12] = 0x88; //user_byte[12]
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <main+0x278>)
 8000ea6:	2288      	movs	r2, #136	; 0x88
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
	card_data[13] = 0x88; //user_byte[13]
 8000eaa:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <main+0x278>)
 8000eac:	2288      	movs	r2, #136	; 0x88
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
	card_data[14] = 0x88; //user_byte[14]
 8000eb0:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <main+0x278>)
 8000eb2:	2288      	movs	r2, #136	; 0x88
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
	card_data[15] = 0x88; //user_byte[15]
 8000eb6:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <main+0x278>)
 8000eb8:	2288      	movs	r2, #136	; 0x88
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 16; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	e007      	b.n	8000ed2 <main+0x172>
			cardstr[i] = 0;
 8000ec2:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <main+0x27c>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 16; i++) {
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	ddf4      	ble.n	8000ec2 <main+0x162>
		}
		findcard = MFRC522_Request(0x26, cardstr);
 8000ed8:	4940      	ldr	r1, [pc, #256]	; (8000fdc <main+0x27c>)
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f001 f8e5 	bl	80020aa <MFRC522_Request>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <main+0x280>)
 8000ee6:	601a      	str	r2, [r3, #0]
		if (findcard == 0) {
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <main+0x280>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d12f      	bne.n	8000f50 <main+0x1f0>
			if (write == 0) {
 8000ef0:	4b3c      	ldr	r3, [pc, #240]	; (8000fe4 <main+0x284>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d118      	bne.n	8000f2a <main+0x1ca>
				MFRC522_Read(10, uid);
 8000ef8:	493b      	ldr	r1, [pc, #236]	; (8000fe8 <main+0x288>)
 8000efa:	200a      	movs	r0, #10
 8000efc:	f001 f92d 	bl	800215a <MFRC522_Read>
				int h;
				for (h = 0; h < 16; ++h) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e00d      	b.n	8000f22 <main+0x1c2>
					if (uid[0] == keyRFID[h]) {
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <main+0x288>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4938      	ldr	r1, [pc, #224]	; (8000fec <main+0x28c>)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d102      	bne.n	8000f1c <main+0x1bc>
						lock = 1;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <main+0x290>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
				for (h = 0; h < 16; ++h) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	ddee      	ble.n	8000f06 <main+0x1a6>
 8000f28:	e012      	b.n	8000f50 <main+0x1f0>
					}
				}
			} else {
				write = 0;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <main+0x284>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
				MFRC522_Read(0, uid);
 8000f30:	492d      	ldr	r1, [pc, #180]	; (8000fe8 <main+0x288>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f001 f911 	bl	800215a <MFRC522_Read>
				keyRFID[slot] = uid[0];
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <main+0x294>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <main+0x288>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	492a      	ldr	r1, [pc, #168]	; (8000fec <main+0x28c>)
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				slot = slot + 1;
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <main+0x294>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <main+0x294>)
 8000f4e:	6013      	str	r3, [r2, #0]
//				status_write = MFRC522_Write(4, card_data);
			}
		}

		numbercar[0] = password[0] + 48;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <main+0x298>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3330      	adds	r3, #48	; 0x30
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <main+0x29c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
		numbercar[2] = password[1] + 48;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <main+0x298>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3330      	adds	r3, #48	; 0x30
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <main+0x29c>)
 8000f6a:	709a      	strb	r2, [r3, #2]
		numbercar[4] = password[2] + 48;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <main+0x298>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3330      	adds	r3, #48	; 0x30
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <main+0x29c>)
 8000f78:	711a      	strb	r2, [r3, #4]
		numbercar[6] = password[3] + 48;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <main+0x298>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3330      	adds	r3, #48	; 0x30
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <main+0x29c>)
 8000f86:	719a      	strb	r2, [r3, #6]
		//		ST7735_WriteString(0, 51, "_ _ _ _", Font_16x26, YELLOW,BLACK);
		ST7735_WriteString(0, 50, numbercar, Font_16x26, YELLOW, BLACK);
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <main+0x2a0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <main+0x29c>)
 8000f9c:	2132      	movs	r1, #50	; 0x32
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fe00 	bl	8000ba4 <ST7735_WriteString>

		if (lock == 0) {
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <main+0x290>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d12f      	bne.n	800100c <main+0x2ac>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4814      	ldr	r0, [pc, #80]	; (8001004 <main+0x2a4>)
 8000fb2:	f004 fc17 	bl	80057e4 <HAL_GPIO_WritePin>
			ST7735_WriteString(0, 0, "LOCK  ", Font_16x26, RED, BLACK);
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <main+0x2a0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	9202      	str	r2, [sp, #8]
 8000fbc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <main+0x2a8>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fde9 	bl	8000ba4 <ST7735_WriteString>
 8000fd2:	e02e      	b.n	8001032 <main+0x2d2>
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	24000874 	.word	0x24000874
 8000fdc:	24000a60 	.word	0x24000a60
 8000fe0:	24000870 	.word	0x24000870
 8000fe4:	240001b4 	.word	0x240001b4
 8000fe8:	24000280 	.word	0x24000280
 8000fec:	24000030 	.word	0x24000030
 8000ff0:	2400019c 	.word	0x2400019c
 8000ff4:	240001cc 	.word	0x240001cc
 8000ff8:	24000018 	.word	0x24000018
 8000ffc:	24000028 	.word	0x24000028
 8001000:	24000010 	.word	0x24000010
 8001004:	58021000 	.word	0x58021000
 8001008:	0800af18 	.word	0x0800af18
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	4894      	ldr	r0, [pc, #592]	; (8001264 <main+0x504>)
 8001012:	f004 fbe7 	bl	80057e4 <HAL_GPIO_WritePin>
			ST7735_WriteString(0, 0, "UNLOCK", Font_16x26, GREEN, BLACK);
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <main+0x508>)
 8001018:	2200      	movs	r2, #0
 800101a:	9202      	str	r2, [sp, #8]
 800101c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a90      	ldr	r2, [pc, #576]	; (800126c <main+0x50c>)
 800102a:	2100      	movs	r1, #0
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fdb9 	bl	8000ba4 <ST7735_WriteString>
		}
		if (setpassword == 1 || setRFID == 1) {
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <main+0x510>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d003      	beq.n	8001042 <main+0x2e2>
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <main+0x514>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10e      	bne.n	8001060 <main+0x300>
			ST7735_WriteString(0, 100, "Enter your password", Font_7x10, GREEN,
 8001042:	4b8d      	ldr	r3, [pc, #564]	; (8001278 <main+0x518>)
 8001044:	2200      	movs	r2, #0
 8001046:	9202      	str	r2, [sp, #8]
 8001048:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800104c:	9201      	str	r2, [sp, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a89      	ldr	r2, [pc, #548]	; (800127c <main+0x51c>)
 8001056:	2164      	movs	r1, #100	; 0x64
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fda3 	bl	8000ba4 <ST7735_WriteString>
 800105e:	e046      	b.n	80010ee <main+0x38e>
					BLACK);
		} else if (setpassword == 2) {
 8001060:	4b83      	ldr	r3, [pc, #524]	; (8001270 <main+0x510>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10e      	bne.n	8001086 <main+0x326>
			ST7735_WriteString(0, 100, "Enter your new password", Font_7x10,
 8001068:	4b83      	ldr	r3, [pc, #524]	; (8001278 <main+0x518>)
 800106a:	2200      	movs	r2, #0
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a81      	ldr	r2, [pc, #516]	; (8001280 <main+0x520>)
 800107c:	2164      	movs	r1, #100	; 0x64
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fd90 	bl	8000ba4 <ST7735_WriteString>
 8001084:	e033      	b.n	80010ee <main+0x38e>
					GREEN, BLACK);
		} else if (setpassword == 3) {
 8001086:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <main+0x510>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d10e      	bne.n	80010ac <main+0x34c>
			ST7735_WriteString(0, 100, "One more time           ", Font_7x10,
 800108e:	4b7a      	ldr	r3, [pc, #488]	; (8001278 <main+0x518>)
 8001090:	2200      	movs	r2, #0
 8001092:	9202      	str	r2, [sp, #8]
 8001094:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	9200      	str	r2, [sp, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a78      	ldr	r2, [pc, #480]	; (8001284 <main+0x524>)
 80010a2:	2164      	movs	r1, #100	; 0x64
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff fd7d 	bl	8000ba4 <ST7735_WriteString>
 80010aa:	e020      	b.n	80010ee <main+0x38e>
					GREEN, BLACK);
		} else if (write == 1) {
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <main+0x528>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10e      	bne.n	80010d2 <main+0x372>
			ST7735_WriteString(0, 100, "Ready to write            ", Font_7x10, MAGENTA,
 80010b4:	4b70      	ldr	r3, [pc, #448]	; (8001278 <main+0x518>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	9202      	str	r2, [sp, #8]
 80010ba:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	9200      	str	r2, [sp, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a71      	ldr	r2, [pc, #452]	; (800128c <main+0x52c>)
 80010c8:	2164      	movs	r1, #100	; 0x64
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fd6a 	bl	8000ba4 <ST7735_WriteString>
 80010d0:	e00d      	b.n	80010ee <main+0x38e>
					BLACK);
		} else {
			ST7735_WriteString(0, 100,
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <main+0x518>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	9202      	str	r2, [sp, #8]
 80010d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <main+0x530>)
 80010e6:	2164      	movs	r1, #100	; 0x64
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fd5b 	bl	8000ba4 <ST7735_WriteString>
					"                                           ", Font_7x10,
					GREEN, BLACK);
		}
		lockcount[0] = lock;
 80010ee:	4b69      	ldr	r3, [pc, #420]	; (8001294 <main+0x534>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a69      	ldr	r2, [pc, #420]	; (8001298 <main+0x538>)
 80010f4:	6013      	str	r3, [r2, #0]
		if (lockcount[0] == 1 && lockcount[1] == 0) {
 80010f6:	4b68      	ldr	r3, [pc, #416]	; (8001298 <main+0x538>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d109      	bne.n	8001112 <main+0x3b2>
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <main+0x538>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <main+0x3b2>
			locktimestamp = HAL_GetTick();
 8001106:	f001 fd29 	bl	8002b5c <HAL_GetTick>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b63      	ldr	r3, [pc, #396]	; (800129c <main+0x53c>)
 8001110:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - locktimestamp >= 10000) {
 8001112:	f001 fd23 	bl	8002b5c <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	4a60      	ldr	r2, [pc, #384]	; (800129c <main+0x53c>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001122:	4293      	cmp	r3, r2
 8001124:	d902      	bls.n	800112c <main+0x3cc>
			lock = 0;
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <main+0x534>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
		}
		lockcount[1] = lockcount[0];
 800112c:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <main+0x538>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a59      	ldr	r2, [pc, #356]	; (8001298 <main+0x538>)
 8001132:	6053      	str	r3, [r2, #4]

		writecount[0] = write;
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <main+0x528>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a59      	ldr	r2, [pc, #356]	; (80012a0 <main+0x540>)
 800113a:	6013      	str	r3, [r2, #0]
		if (writecount[0] == 1 && writecount[1] == 0) {
 800113c:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <main+0x540>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d109      	bne.n	8001158 <main+0x3f8>
 8001144:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <main+0x540>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <main+0x3f8>
			writetimestamp = HAL_GetTick();
 800114c:	f001 fd06 	bl	8002b5c <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <main+0x544>)
 8001156:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GetTick() - writetimestamp >= 10000) {
 8001158:	f001 fd00 	bl	8002b5c <HAL_GetTick>
 800115c:	4603      	mov	r3, r0
 800115e:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <main+0x544>)
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	f242 720f 	movw	r2, #9999	; 0x270f
 8001168:	4293      	cmp	r3, r2
 800116a:	d902      	bls.n	8001172 <main+0x412>
			write = 0;
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <main+0x528>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		}
		writecount[1] = writecount[0];
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <main+0x540>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <main+0x540>)
 8001178:	6053      	str	r3, [r2, #4]

		ButtonMatrixUpdate();
 800117a:	f000 fd31 	bl	8001be0 <ButtonMatrixUpdate>
		press[0] = ButtonMatrixState;
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <main+0x548>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <main+0x54c>)
 8001186:	601a      	str	r2, [r3, #0]

		if (press[0] != press[1] && press[0] != 0) {
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <main+0x54c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <main+0x54c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	f000 8186 	beq.w	80014a2 <main+0x742>
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <main+0x54c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8181 	beq.w	80014a2 <main+0x742>
			if (state == 0) {
 80011a0:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <main+0x550>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d111      	bne.n	80011cc <main+0x46c>
				if (ButtonMatrixState != 0b100000000000) {
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <main+0x548>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b0:	f000 808d 	beq.w	80012ce <main+0x56e>
					password[0] = Button(ButtonMatrixState);
 80011b4:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <main+0x548>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fda3 	bl	8001d04 <Button>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <main+0x554>)
 80011c2:	6013      	str	r3, [r2, #0]
					state = 1;
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <main+0x550>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e080      	b.n	80012ce <main+0x56e>
				}
			} else if (state == 1) {
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <main+0x550>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d118      	bne.n	8001206 <main+0x4a6>
				if (ButtonMatrixState == 0b100000000000) {
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <main+0x548>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011dc:	d107      	bne.n	80011ee <main+0x48e>
					password[0] = -16;
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <main+0x554>)
 80011e0:	f06f 020f 	mvn.w	r2, #15
 80011e4:	601a      	str	r2, [r3, #0]
					state = 0;
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <main+0x550>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e06f      	b.n	80012ce <main+0x56e>
				} else {
					password[1] = Button(ButtonMatrixState);
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <main+0x548>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd86 	bl	8001d04 <Button>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <main+0x554>)
 80011fc:	6053      	str	r3, [r2, #4]
					state = 2;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <main+0x550>)
 8001200:	2202      	movs	r2, #2
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e063      	b.n	80012ce <main+0x56e>
				}
			} else if (state == 2) {
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <main+0x550>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d118      	bne.n	8001240 <main+0x4e0>
				if (ButtonMatrixState == 0b100000000000) {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <main+0x548>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001216:	d107      	bne.n	8001228 <main+0x4c8>
					password[1] = -16;
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <main+0x554>)
 800121a:	f06f 020f 	mvn.w	r2, #15
 800121e:	605a      	str	r2, [r3, #4]
					state = 1;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <main+0x550>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e052      	b.n	80012ce <main+0x56e>
				} else {
					password[2] = Button(ButtonMatrixState);
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <main+0x548>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fd69 	bl	8001d04 <Button>
 8001232:	4603      	mov	r3, r0
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <main+0x554>)
 8001236:	6093      	str	r3, [r2, #8]
					state = 3;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <main+0x550>)
 800123a:	2203      	movs	r2, #3
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e046      	b.n	80012ce <main+0x56e>
				}
			} else if (state == 3) {
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <main+0x550>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d142      	bne.n	80012ce <main+0x56e>
				if (ButtonMatrixState == 0b100000000000) {
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <main+0x548>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001250:	d132      	bne.n	80012b8 <main+0x558>
					password[2] = -16;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <main+0x554>)
 8001254:	f06f 020f 	mvn.w	r2, #15
 8001258:	609a      	str	r2, [r3, #8]
					state = 2;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <main+0x550>)
 800125c:	2202      	movs	r2, #2
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e035      	b.n	80012ce <main+0x56e>
 8001262:	bf00      	nop
 8001264:	58021000 	.word	0x58021000
 8001268:	24000010 	.word	0x24000010
 800126c:	0800af20 	.word	0x0800af20
 8001270:	240001a0 	.word	0x240001a0
 8001274:	240001bc 	.word	0x240001bc
 8001278:	24000008 	.word	0x24000008
 800127c:	0800af28 	.word	0x0800af28
 8001280:	0800af3c 	.word	0x0800af3c
 8001284:	0800af54 	.word	0x0800af54
 8001288:	240001b4 	.word	0x240001b4
 800128c:	0800af70 	.word	0x0800af70
 8001290:	0800af8c 	.word	0x0800af8c
 8001294:	2400019c 	.word	0x2400019c
 8001298:	240001c0 	.word	0x240001c0
 800129c:	240001c8 	.word	0x240001c8
 80012a0:	240001d0 	.word	0x240001d0
 80012a4:	240001d8 	.word	0x240001d8
 80012a8:	24000184 	.word	0x24000184
 80012ac:	240007e0 	.word	0x240007e0
 80012b0:	24000188 	.word	0x24000188
 80012b4:	24000018 	.word	0x24000018
				} else {
					password[3] = Button(ButtonMatrixState);
 80012b8:	4b7c      	ldr	r3, [pc, #496]	; (80014ac <main+0x74c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fd21 	bl	8001d04 <Button>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a7a      	ldr	r2, [pc, #488]	; (80014b0 <main+0x750>)
 80012c6:	60d3      	str	r3, [r2, #12]
					state = 4;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <main+0x754>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	601a      	str	r2, [r3, #0]
				}
			}
			if (state == 4) {
 80012ce:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <main+0x754>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	f040 80e5 	bne.w	80014a2 <main+0x742>
				if (setRFID == 1) {
 80012d8:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <main+0x758>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d109      	bne.n	80012f4 <main+0x594>
					write = 1;
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <main+0x75c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
					setRFID = 0;
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <main+0x758>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
					state = 0;
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <main+0x754>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e0c6      	b.n	8001482 <main+0x722>
				} else if (setpassword == 3) {
 80012f4:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <main+0x760>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d12e      	bne.n	800135a <main+0x5fa>
					if (password[0] == verify[0] && password[1] == verify[1]
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <main+0x750>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <main+0x764>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d121      	bne.n	800134c <main+0x5ec>
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <main+0x750>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <main+0x764>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	d11b      	bne.n	800134c <main+0x5ec>
							&& password[2] == verify[2]
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <main+0x750>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <main+0x764>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	d115      	bne.n	800134c <main+0x5ec>
							&& password[3] == verify[3]) {
 8001320:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <main+0x750>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <main+0x764>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d10f      	bne.n	800134c <main+0x5ec>
						key[0] = verify[0];
 800132c:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <main+0x764>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <main+0x768>)
 8001332:	6013      	str	r3, [r2, #0]
						key[1] = verify[1];
 8001334:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <main+0x764>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <main+0x768>)
 800133a:	6053      	str	r3, [r2, #4]
						key[2] = verify[2];
 800133c:	4b61      	ldr	r3, [pc, #388]	; (80014c4 <main+0x764>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a61      	ldr	r2, [pc, #388]	; (80014c8 <main+0x768>)
 8001342:	6093      	str	r3, [r2, #8]
						key[3] = verify[3];
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <main+0x764>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <main+0x768>)
 800134a:	60d3      	str	r3, [r2, #12]
					}
					setpassword = 0;
 800134c:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <main+0x760>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
					state = 0;
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <main+0x754>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e093      	b.n	8001482 <main+0x722>
				} else if (setpassword == 2) {
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <main+0x760>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d116      	bne.n	8001390 <main+0x630>
					verify[0] = password[0];
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <main+0x750>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <main+0x764>)
 8001368:	6013      	str	r3, [r2, #0]
					verify[1] = password[1];
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <main+0x750>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <main+0x764>)
 8001370:	6053      	str	r3, [r2, #4]
					verify[2] = password[2];
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <main+0x750>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4a53      	ldr	r2, [pc, #332]	; (80014c4 <main+0x764>)
 8001378:	6093      	str	r3, [r2, #8]
					verify[3] = password[3];
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <main+0x750>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <main+0x764>)
 8001380:	60d3      	str	r3, [r2, #12]
					setpassword = 3;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <main+0x760>)
 8001384:	2203      	movs	r2, #3
 8001386:	601a      	str	r2, [r3, #0]
					state = 0;
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <main+0x754>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e078      	b.n	8001482 <main+0x722>
				} else if (setpassword == 1) {
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <main+0x760>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d122      	bne.n	80013de <main+0x67e>
					if (password[0] == key[0] && password[1] == key[1]
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <main+0x750>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <main+0x768>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d115      	bne.n	80013d0 <main+0x670>
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <main+0x750>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <main+0x768>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10f      	bne.n	80013d0 <main+0x670>
							&& password[2] == key[3] && password[3] == key[4]) {
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <main+0x750>)
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <main+0x768>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d109      	bne.n	80013d0 <main+0x670>
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <main+0x750>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <main+0x768>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d103      	bne.n	80013d0 <main+0x670>
						setpassword = 2;
 80013c8:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <main+0x760>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e002      	b.n	80013d6 <main+0x676>
					} else {
						setpassword = 0;
 80013d0:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <main+0x760>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
					}
					state = 0;
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <main+0x754>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e051      	b.n	8001482 <main+0x722>
				} else if (password[0] == -6 && password[1] == 1
 80013de:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <main+0x750>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f113 0f06 	cmn.w	r3, #6
 80013e6:	d112      	bne.n	800140e <main+0x6ae>
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <main+0x750>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10e      	bne.n	800140e <main+0x6ae>
						&& password[2] == 2 && password[3] == 3) {
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <main+0x750>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d10a      	bne.n	800140e <main+0x6ae>
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <main+0x750>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d106      	bne.n	800140e <main+0x6ae>
					state = 0;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <main+0x754>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
					setpassword = 1;
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <main+0x760>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e039      	b.n	8001482 <main+0x722>
				} else if (password[0] == -6 && password[1] == 4
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <main+0x750>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f113 0f06 	cmn.w	r3, #6
 8001416:	d112      	bne.n	800143e <main+0x6de>
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <main+0x750>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d10e      	bne.n	800143e <main+0x6de>
						&& password[2] == 5 && password[3] == 6) {
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <main+0x750>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d10a      	bne.n	800143e <main+0x6de>
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <main+0x750>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b06      	cmp	r3, #6
 800142e:	d106      	bne.n	800143e <main+0x6de>
					setRFID = 1;
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <main+0x758>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]
					state = 0;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <main+0x754>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e021      	b.n	8001482 <main+0x722>
				} else if (password[0] == key[0] && password[1] == key[1]
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <main+0x750>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0x768>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d118      	bne.n	800147c <main+0x71c>
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <main+0x750>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <main+0x768>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	d112      	bne.n	800147c <main+0x71c>
						&& password[2] == key[2] && password[3] == key[3]) {
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <main+0x750>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <main+0x768>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d10c      	bne.n	800147c <main+0x71c>
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <main+0x750>)
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <main+0x768>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	429a      	cmp	r2, r3
 800146c:	d106      	bne.n	800147c <main+0x71c>
					lock = 1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <main+0x76c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
					state = 0;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <main+0x754>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e002      	b.n	8001482 <main+0x722>
				} else {
					state = 0;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <main+0x754>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
				}
				password[0] = -16;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <main+0x750>)
 8001484:	f06f 020f 	mvn.w	r2, #15
 8001488:	601a      	str	r2, [r3, #0]
				password[1] = -16;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <main+0x750>)
 800148c:	f06f 020f 	mvn.w	r2, #15
 8001490:	605a      	str	r2, [r3, #4]
				password[2] = -16;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <main+0x750>)
 8001494:	f06f 020f 	mvn.w	r2, #15
 8001498:	609a      	str	r2, [r3, #8]
				password[3] = -16;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <main+0x750>)
 800149c:	f06f 020f 	mvn.w	r2, #15
 80014a0:	60da      	str	r2, [r3, #12]
			}
		}

		press[1] = press[0];
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <main+0x770>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <main+0x770>)
 80014a8:	6053      	str	r3, [r2, #4]
		for (int i = 0; i < 16; i++) {
 80014aa:	e507      	b.n	8000ebc <main+0x15c>
 80014ac:	24000184 	.word	0x24000184
 80014b0:	24000018 	.word	0x24000018
 80014b4:	24000188 	.word	0x24000188
 80014b8:	240001bc 	.word	0x240001bc
 80014bc:	240001b4 	.word	0x240001b4
 80014c0:	240001a0 	.word	0x240001a0
 80014c4:	240001a4 	.word	0x240001a4
 80014c8:	2400018c 	.word	0x2400018c
 80014cc:	2400019c 	.word	0x2400019c
 80014d0:	240007e0 	.word	0x240007e0

080014d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09c      	sub	sp, #112	; 0x70
 80014d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	224c      	movs	r2, #76	; 0x4c
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 fd04 	bl	800aef0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2220      	movs	r2, #32
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f009 fcfe 	bl	800aef0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014f4:	2004      	movs	r0, #4
 80014f6:	f004 fb05 	bl	8005b04 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <SystemClock_Config+0xfc>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a33      	ldr	r2, [pc, #204]	; (80015d0 <SystemClock_Config+0xfc>)
 8001504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <SystemClock_Config+0xfc>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <SystemClock_Config+0x100>)
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <SystemClock_Config+0x100>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <SystemClock_Config+0x100>)
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800152c:	bf00      	nop
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemClock_Config+0xfc>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800153a:	d1f8      	bne.n	800152e <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <SystemClock_Config+0x104>)
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f023 0303 	bic.w	r3, r3, #3
 8001544:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <SystemClock_Config+0x104>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800154c:	2301      	movs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001550:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001556:	2302      	movs	r3, #2
 8001558:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8001562:	2378      	movs	r3, #120	; 0x78
 8001564:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 800156a:	2306      	movs	r3, #6
 800156c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001572:	230c      	movs	r3, #12
 8001574:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001576:	2300      	movs	r3, #0
 8001578:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fb28 	bl	8005bd8 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xbe>
		Error_Handler();
 800158e:	f000 fe59 	bl	8002244 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001592:	233f      	movs	r3, #63	; 0x3f
 8001594:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2303      	movs	r3, #3
 8001598:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800159e:	2308      	movs	r3, #8
 80015a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ae:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2104      	movs	r1, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 ff39 	bl	8006430 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xf4>
		Error_Handler();
 80015c4:	f000 fe3e 	bl	8002244 <Error_Handler>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3770      	adds	r7, #112	; 0x70
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58024800 	.word	0x58024800
 80015d4:	58000400 	.word	0x58000400
 80015d8:	58024400 	.word	0x58024400

080015dc <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_ETH_Init+0x80>)
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <MX_ETH_Init+0x84>)
 80015e4:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_ETH_Init+0x88>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_ETH_Init+0x88>)
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_ETH_Init+0x88>)
 80015f4:	22e1      	movs	r2, #225	; 0xe1
 80015f6:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ETH_Init+0x88>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_ETH_Init+0x88>)
 8001600:	2200      	movs	r2, #0
 8001602:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_ETH_Init+0x88>)
 8001606:	2200      	movs	r2, #0
 8001608:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_ETH_Init+0x80>)
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <MX_ETH_Init+0x88>)
 800160e:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_ETH_Init+0x80>)
 8001612:	2201      	movs	r2, #1
 8001614:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_ETH_Init+0x80>)
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_ETH_Init+0x8c>)
 800161a:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_ETH_Init+0x80>)
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <MX_ETH_Init+0x90>)
 8001620:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_ETH_Init+0x80>)
 8001624:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001628:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_ETH_Init+0x80>)
 800162c:	f003 fafc 	bl	8004c28 <HAL_ETH_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ETH_Init+0x5e>
		Error_Handler();
 8001636:	f000 fe05 	bl	8002244 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800163a:	2234      	movs	r2, #52	; 0x34
 800163c:	2100      	movs	r1, #0
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_ETH_Init+0x94>)
 8001640:	f009 fc56 	bl	800aef0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_ETH_Init+0x94>)
 8001646:	2221      	movs	r2, #33	; 0x21
 8001648:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_ETH_Init+0x94>)
 800164c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001650:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_ETH_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2400092c 	.word	0x2400092c
 8001660:	40028000 	.word	0x40028000
 8001664:	240001e0 	.word	0x240001e0
 8001668:	24000108 	.word	0x24000108
 800166c:	240000a8 	.word	0x240000a8
 8001670:	240009b4 	.word	0x240009b4

08001674 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_SPI1_Init+0xa8>)
 800167a:	4a29      	ldr	r2, [pc, #164]	; (8001720 <MX_SPI1_Init+0xac>)
 800167c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <MX_SPI1_Init+0xa8>)
 8001680:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001684:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_SPI1_Init+0xa8>)
 8001688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <MX_SPI1_Init+0xa8>)
 8001690:	2207      	movs	r2, #7
 8001692:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_SPI1_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <MX_SPI1_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_SPI1_Init+0xa8>)
 80016a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016a6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_SPI1_Init+0xa8>)
 80016aa:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016ae:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_SPI1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_SPI1_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_SPI1_Init+0xa8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI1_Init+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI1_Init+0xa8>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_SPI1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_SPI1_Init+0xa8>)
 80016fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_SPI1_Init+0xa8>)
 800170a:	f006 fd7f 	bl	800820c <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI1_Init+0xa4>
		Error_Handler();
 8001714:	f000 fd96 	bl	8002244 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	240007e8 	.word	0x240007e8
 8001720:	40013000 	.word	0x40013000

08001724 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <MX_SPI2_Init+0xa8>)
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <MX_SPI2_Init+0xac>)
 800172c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001730:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001734:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <MX_SPI2_Init+0xa8>)
 800173e:	2207      	movs	r2, #7
 8001740:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001750:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001754:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_SPI2_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_SPI2_Init+0xa8>)
 80017aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_SPI2_Init+0xa8>)
 80017b8:	f006 fd28 	bl	800820c <HAL_SPI_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_SPI2_Init+0xa2>
		Error_Handler();
 80017c2:	f000 fd3f 	bl	8002244 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240001f8 	.word	0x240001f8
 80017d0:	40003800 	.word	0x40003800

080017d4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <MX_USART3_UART_Init+0x94>)
 80017dc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800181e:	f007 ffd6 	bl	80097ce <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001828:	f000 fd0c 	bl	8002244 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800182c:	2100      	movs	r1, #0
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001830:	f008 ff6c 	bl	800a70c <HAL_UARTEx_SetTxFifoThreshold>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800183a:	f000 fd03 	bl	8002244 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800183e:	2100      	movs	r1, #0
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001842:	f008 ffa1 	bl	800a788 <HAL_UARTEx_SetRxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800184c:	f000 fcfa 	bl	8002244 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001852:	f008 ff22 	bl	800a69a <HAL_UARTEx_DisableFifoMode>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 800185c:	f000 fcf2 	bl	8002244 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	240002c0 	.word	0x240002c0
 8001868:	40004800 	.word	0x40004800

0800186c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001874:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001878:	2209      	movs	r2, #9
 800187a:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187e:	2202      	movs	r2, #2
 8001880:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800188a:	2202      	movs	r2, #2
 800188c:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b4:	f003 ffde 	bl	8005874 <HAL_PCD_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 80018be:	f000 fcc1 	bl	8002244 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24000350 	.word	0x24000350
 80018cc:	40080000 	.word	0x40080000

080018d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_DMA_Init+0x5c>)
 80018d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <MX_DMA_Init+0x5c>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_DMA_Init+0x5c>)
 80018e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	200b      	movs	r0, #11
 80018fa:	f001 fa5a 	bl	8002db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018fe:	200b      	movs	r0, #11
 8001900:	f001 fa71 	bl	8002de6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	200c      	movs	r0, #12
 800190a:	f001 fa52 	bl	8002db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800190e:	200c      	movs	r0, #12
 8001910:	f001 fa69 	bl	8002de6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	200d      	movs	r0, #13
 800191a:	f001 fa4a 	bl	8002db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800191e:	200d      	movs	r0, #13
 8001920:	f001 fa61 	bl	8002de6 <HAL_NVIC_EnableIRQ>

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400

08001930 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4b9f      	ldr	r3, [pc, #636]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a9d      	ldr	r2, [pc, #628]	; (8001bc4 <MX_GPIO_Init+0x294>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b9b      	ldr	r3, [pc, #620]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001964:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a96      	ldr	r2, [pc, #600]	; (8001bc4 <MX_GPIO_Init+0x294>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b93      	ldr	r3, [pc, #588]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b90      	ldr	r3, [pc, #576]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a8e      	ldr	r2, [pc, #568]	; (8001bc4 <MX_GPIO_Init+0x294>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b8c      	ldr	r3, [pc, #560]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	4a87      	ldr	r2, [pc, #540]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b0:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b7d      	ldr	r3, [pc, #500]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a78      	ldr	r2, [pc, #480]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80019fa:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <MX_GPIO_Init+0x294>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a70      	ldr	r2, [pc, #448]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b6e      	ldr	r3, [pc, #440]	; (8001bc4 <MX_GPIO_Init+0x294>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f244 0101 	movw	r1, #16385	; 0x4001
 8001a1e:	486a      	ldr	r0, [pc, #424]	; (8001bc8 <MX_GPIO_Init+0x298>)
 8001a20:	f003 fee0 	bl	80057e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 | RFIDreset_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001a2a:	4868      	ldr	r0, [pc, #416]	; (8001bcc <MX_GPIO_Init+0x29c>)
 8001a2c:	f003 feda 	bl	80057e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RFIDcs_Pin | GPIO_PIN_6 | GPIO_PIN_7,
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8001a36:	4864      	ldr	r0, [pc, #400]	; (8001bc8 <MX_GPIO_Init+0x298>)
 8001a38:	f003 fed4 	bl	80057e4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | LCDc_d_Pin,
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8001a42:	4863      	ldr	r0, [pc, #396]	; (8001bd0 <MX_GPIO_Init+0x2a0>)
 8001a44:	f003 fece 	bl	80057e4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCDcs_GPIO_Port, LCDcs_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4e:	4860      	ldr	r0, [pc, #384]	; (8001bd0 <MX_GPIO_Init+0x2a0>)
 8001a50:	f003 fec8 	bl	80057e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LCDreset_Pin | GPIO_PIN_14, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8001a5a:	485e      	ldr	r0, [pc, #376]	; (8001bd4 <MX_GPIO_Init+0x2a4>)
 8001a5c:	f003 fec2 	bl	80057e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2102      	movs	r1, #2
 8001a64:	4859      	ldr	r0, [pc, #356]	; (8001bcc <MX_GPIO_Init+0x29c>)
 8001a66:	f003 febd 	bl	80057e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4856      	ldr	r0, [pc, #344]	; (8001bd8 <MX_GPIO_Init+0x2a8>)
 8001a80:	f003 fce8 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin RFIDcs_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | RFIDcs_Pin | LD3_Pin;
 8001a84:	f644 0301 	movw	r3, #18433	; 0x4801
 8001a88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	484a      	ldr	r0, [pc, #296]	; (8001bc8 <MX_GPIO_Init+0x298>)
 8001a9e:	f003 fcd9 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_14;
 8001aa2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001aa6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4845      	ldr	r0, [pc, #276]	; (8001bcc <MX_GPIO_Init+0x29c>)
 8001ab8:	f003 fccc 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ac2:	2311      	movs	r3, #17
 8001ac4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483d      	ldr	r0, [pc, #244]	; (8001bcc <MX_GPIO_Init+0x29c>)
 8001ad6:	f003 fcbd 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pins : RFIDreset_Pin LD2_Pin */
	GPIO_InitStruct.Pin = RFIDreset_Pin | LD2_Pin;
 8001ada:	f248 0302 	movw	r3, #32770	; 0x8002
 8001ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4836      	ldr	r0, [pc, #216]	; (8001bcc <MX_GPIO_Init+0x29c>)
 8001af4:	f003 fcae 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin LCDcs_Pin LCDc_d_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | LCDcs_Pin | LCDc_d_Pin;
 8001af8:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001afc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <MX_GPIO_Init+0x2a0>)
 8001b12:	f003 fc9f 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	482a      	ldr	r0, [pc, #168]	; (8001bd4 <MX_GPIO_Init+0x2a4>)
 8001b2c:	f003 fc92 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4825      	ldr	r0, [pc, #148]	; (8001bdc <MX_GPIO_Init+0x2ac>)
 8001b46:	f003 fc85 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCDreset_Pin */
	GPIO_InitStruct.Pin = LCDreset_Pin;
 8001b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCDreset_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0x2a4>)
 8001b64:	f003 fc76 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MX_GPIO_Init+0x2a4>)
 8001b7e:	f003 fc69 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b88:	2311      	movs	r3, #17
 8001b8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <MX_GPIO_Init+0x2a4>)
 8001b9c:	f003 fc5a 	bl	8005454 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ba4:	2311      	movs	r3, #17
 8001ba6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_GPIO_Init+0x298>)
 8001bb8:	f003 fc4c 	bl	8005454 <HAL_GPIO_Init>

}
 8001bbc:	bf00      	nop
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58021000 	.word	0x58021000
 8001bd0:	58020c00 	.word	0x58020c00
 8001bd4:	58021800 	.word	0x58021800
 8001bd8:	58020800 	.word	0x58020800
 8001bdc:	58020000 	.word	0x58020000

08001be0 <ButtonMatrixUpdate>:
uint16_t ButtonMatrixPin[8] = { GPIO_PIN_12, GPIO_PIN_8, GPIO_PIN_11,
GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_14,
GPIO_PIN_6, GPIO_PIN_7 };

uint8_t ButtonMatrixRow = 0;  //What  R Now
void ButtonMatrixUpdate() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ButtonMatrixTimestamp >= 50) {
 8001be6:	f000 ffb9 	bl	8002b5c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <ButtonMatrixUpdate+0x10c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b31      	cmp	r3, #49	; 0x31
 8001bf4:	d975      	bls.n	8001ce2 <ButtonMatrixUpdate+0x102>
		x = x + 1;
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <ButtonMatrixUpdate+0x110>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <ButtonMatrixUpdate+0x110>)
 8001bfe:	6013      	str	r3, [r2, #0]
		ButtonMatrixTimestamp = HAL_GetTick();
 8001c00:	f000 ffac 	bl	8002b5c <HAL_GetTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a39      	ldr	r2, [pc, #228]	; (8001cec <ButtonMatrixUpdate+0x10c>)
 8001c08:	6013      	str	r3, [r2, #0]
		int i;
		for (i = 0; i < 4; i += 1) { //0-3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	e038      	b.n	8001c82 <ButtonMatrixUpdate+0xa2>
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i],
 8001c10:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <ButtonMatrixUpdate+0x114>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c18:	4937      	ldr	r1, [pc, #220]	; (8001cf8 <ButtonMatrixUpdate+0x118>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f003 fdc6 	bl	80057b4 <HAL_GPIO_ReadPin>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	707b      	strb	r3, [r7, #1]
					ButtonMatrixPin[i]);
			if (PinState == GPIO_PIN_RESET) // Button Press
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d111      	bne.n	8001c56 <ButtonMatrixUpdate+0x76>
					{
				ButtonMatrixState |= (uint16_t) 1 << (i + ButtonMatrixRow * 4);
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009a      	lsls	r2, r3, #2
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <ButtonMatrixUpdate+0x120>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <ButtonMatrixUpdate+0x120>)
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	e012      	b.n	8001c7c <ButtonMatrixUpdate+0x9c>
			} else {
				ButtonMatrixState &=
						~((uint16_t) 1 << (i + ButtonMatrixRow * 4));
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	2201      	movs	r2, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
				ButtonMatrixState &=
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <ButtonMatrixUpdate+0x120>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4013      	ands	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <ButtonMatrixUpdate+0x120>)
 8001c7a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; i += 1) { //0-3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	ddc3      	ble.n	8001c10 <ButtonMatrixUpdate+0x30>
			}
		}
		uint8_t NowOutputPin = ButtonMatrixRow + 4;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	70fb      	strb	r3, [r7, #3]
		//SET Rn
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin],
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <ButtonMatrixUpdate+0x114>)
 8001c94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <ButtonMatrixUpdate+0x118>)
 8001c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f003 fd9e 	bl	80057e4 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
		// update New Row
		ButtonMatrixRow = (ButtonMatrixRow + 1) % 4;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	425a      	negs	r2, r3
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	bf58      	it	pl
 8001cba:	4253      	negpl	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001cc0:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixRow + 4;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <ButtonMatrixUpdate+0x11c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	70bb      	strb	r3, [r7, #2]
		//Reset Rn+1
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin],
 8001cca:	78bb      	ldrb	r3, [r7, #2]
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <ButtonMatrixUpdate+0x114>)
 8001cce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cd2:	78bb      	ldrb	r3, [r7, #2]
 8001cd4:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <ButtonMatrixUpdate+0x118>)
 8001cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f003 fd81 	bl	80057e4 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);

	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	240001b8 	.word	0x240001b8
 8001cf0:	240001f4 	.word	0x240001f4
 8001cf4:	24000070 	.word	0x24000070
 8001cf8:	24000090 	.word	0x24000090
 8001cfc:	240001dc 	.word	0x240001dc
 8001d00:	24000184 	.word	0x24000184

08001d04 <Button>:
int Button( ButtonMatrixState) {
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	int pass = -16;
 8001d0c:	f06f 030f 	mvn.w	r3, #15
 8001d10:	60fb      	str	r3, [r7, #12]
	switch (ButtonMatrixState) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d18:	f000 808d 	beq.w	8001e36 <Button+0x132>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	f300 808b 	bgt.w	8001e3c <Button+0x138>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2c:	f000 8080 	beq.w	8001e30 <Button+0x12c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d36:	f300 8081 	bgt.w	8001e3c <Button+0x138>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d40:	d073      	beq.n	8001e2a <Button+0x126>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d48:	dc78      	bgt.n	8001e3c <Button+0x138>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d069      	beq.n	8001e24 <Button+0x120>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	dc72      	bgt.n	8001e3c <Button+0x138>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	dc49      	bgt.n	8001df0 <Button+0xec>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dd6c      	ble.n	8001e3c <Button+0x138>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	2b1f      	cmp	r3, #31
 8001d68:	d868      	bhi.n	8001e3c <Button+0x138>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <Button+0x6c>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001df9 	.word	0x08001df9
 8001d74:	08001dff 	.word	0x08001dff
 8001d78:	08001e3d 	.word	0x08001e3d
 8001d7c:	08001e05 	.word	0x08001e05
 8001d80:	08001e3d 	.word	0x08001e3d
 8001d84:	08001e3d 	.word	0x08001e3d
 8001d88:	08001e3d 	.word	0x08001e3d
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e3d 	.word	0x08001e3d
 8001d94:	08001e3d 	.word	0x08001e3d
 8001d98:	08001e3d 	.word	0x08001e3d
 8001d9c:	08001e3d 	.word	0x08001e3d
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e3d 	.word	0x08001e3d
 8001da8:	08001e3d 	.word	0x08001e3d
 8001dac:	08001e13 	.word	0x08001e13
 8001db0:	08001e3d 	.word	0x08001e3d
 8001db4:	08001e3d 	.word	0x08001e3d
 8001db8:	08001e3d 	.word	0x08001e3d
 8001dbc:	08001e3d 	.word	0x08001e3d
 8001dc0:	08001e3d 	.word	0x08001e3d
 8001dc4:	08001e3d 	.word	0x08001e3d
 8001dc8:	08001e3d 	.word	0x08001e3d
 8001dcc:	08001e3d 	.word	0x08001e3d
 8001dd0:	08001e3d 	.word	0x08001e3d
 8001dd4:	08001e3d 	.word	0x08001e3d
 8001dd8:	08001e3d 	.word	0x08001e3d
 8001ddc:	08001e3d 	.word	0x08001e3d
 8001de0:	08001e3d 	.word	0x08001e3d
 8001de4:	08001e3d 	.word	0x08001e3d
 8001de8:	08001e3d 	.word	0x08001e3d
 8001dec:	08001e19 	.word	0x08001e19
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d013      	beq.n	8001e1e <Button+0x11a>
		break;
	case 0b10000000000:
		pass = 9;
		break;
	default:
		break;
 8001df6:	e021      	b.n	8001e3c <Button+0x138>
		pass = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
		break;
 8001dfc:	e01f      	b.n	8001e3e <Button+0x13a>
		pass = 4;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
		break;
 8001e02:	e01c      	b.n	8001e3e <Button+0x13a>
		pass = 7;
 8001e04:	2307      	movs	r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]
		break;
 8001e08:	e019      	b.n	8001e3e <Button+0x13a>
		pass = -6;
 8001e0a:	f06f 0305 	mvn.w	r3, #5
 8001e0e:	60fb      	str	r3, [r7, #12]
		break;
 8001e10:	e015      	b.n	8001e3e <Button+0x13a>
		pass = 2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	60fb      	str	r3, [r7, #12]
		break;
 8001e16:	e012      	b.n	8001e3e <Button+0x13a>
		pass = 5;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	60fb      	str	r3, [r7, #12]
		break;
 8001e1c:	e00f      	b.n	8001e3e <Button+0x13a>
		pass = 8;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	60fb      	str	r3, [r7, #12]
		break;
 8001e22:	e00c      	b.n	8001e3e <Button+0x13a>
		pass = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
		break;
 8001e28:	e009      	b.n	8001e3e <Button+0x13a>
		pass = 3;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	60fb      	str	r3, [r7, #12]
		break;
 8001e2e:	e006      	b.n	8001e3e <Button+0x13a>
		pass = 6;
 8001e30:	2306      	movs	r3, #6
 8001e32:	60fb      	str	r3, [r7, #12]
		break;
 8001e34:	e003      	b.n	8001e3e <Button+0x13a>
		pass = 9;
 8001e36:	2309      	movs	r3, #9
 8001e38:	60fb      	str	r3, [r7, #12]
		break;
 8001e3a:	e000      	b.n	8001e3e <Button+0x13a>
		break;
 8001e3c:	bf00      	nop
	}
	return pass;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <Write_MFRC522>:

void Write_MFRC522(char addr, char val) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	460a      	mov	r2, r1
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71bb      	strb	r3, [r7, #6]
	char addr_bits = (((addr << 1) & 0x7E));
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <Write_MFRC522+0x5c>)
 8001e72:	f003 fcb7 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001e76:	f107 010f 	add.w	r1, r7, #15
 8001e7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e7e:	2201      	movs	r2, #1
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <Write_MFRC522+0x60>)
 8001e82:	f006 fac9 	bl	8008418 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001e86:	1db9      	adds	r1, r7, #6
 8001e88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <Write_MFRC522+0x60>)
 8001e90:	f006 fac2 	bl	8008418 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <Write_MFRC522+0x5c>)
 8001e9c:	f003 fca2 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	58020400 	.word	0x58020400
 8001eac:	240001f8 	.word	0x240001f8

08001eb0 <Read_MFRC522>:
char Read_MFRC522(char addr) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
	char rx_bits;
	char addr_bits = (((addr << 1) & 0x7E) | 0x80);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <Read_MFRC522+0x64>)
 8001ed8:	f003 fc84 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001edc:	f107 010e 	add.w	r1, r7, #14
 8001ee0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <Read_MFRC522+0x68>)
 8001ee8:	f006 fa96 	bl	8008418 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001eec:	f107 010f 	add.w	r1, r7, #15
 8001ef0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <Read_MFRC522+0x68>)
 8001ef8:	f006 fc80 	bl	80087fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <Read_MFRC522+0x64>)
 8001f04:	f003 fc6e 	bl	80057e4 <HAL_GPIO_WritePin>
	return (char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58020400 	.word	0x58020400
 8001f18:	240001f8 	.word	0x240001f8

08001f1c <MFRC522_ToCard>:
char MFRC522_ToCard(char command, char *sendData, char sendLen, char *backData,
		int *backLen) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	73bb      	strb	r3, [r7, #14]
	char status = 2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	77fb      	strb	r3, [r7, #31]
	char irqEn = 0x00;
 8001f32:	2300      	movs	r3, #0
 8001f34:	77bb      	strb	r3, [r7, #30]
	char waitIRq = 0x00;
 8001f36:	2300      	movs	r3, #0
 8001f38:	777b      	strb	r3, [r7, #29]
	char lastBits;
	char n;
	int i;

	switch (command) {
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d006      	beq.n	8001f4e <MFRC522_ToCard+0x32>
 8001f40:	2b0e      	cmp	r3, #14
 8001f42:	d109      	bne.n	8001f58 <MFRC522_ToCard+0x3c>
	case 0x0E:     // Certification cards close
	{
		irqEn = 0x12;
 8001f44:	2312      	movs	r3, #18
 8001f46:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	777b      	strb	r3, [r7, #29]
		break;
 8001f4c:	e005      	b.n	8001f5a <MFRC522_ToCard+0x3e>
	}
	case 0x0C:  // Transmit FIFO data
	{
		irqEn = 0x77;
 8001f4e:	2377      	movs	r3, #119	; 0x77
 8001f50:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8001f52:	2330      	movs	r3, #48	; 0x30
 8001f54:	777b      	strb	r3, [r7, #29]
		break;
 8001f56:	e000      	b.n	8001f5a <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8001f58:	bf00      	nop
	}

	Write_MFRC522(0x02, irqEn | 0x80);  // Interrupt request
 8001f5a:	7fbb      	ldrb	r3, [r7, #30]
 8001f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7ff ff71 	bl	8001e4c <Write_MFRC522>
	ClearBitMask(0x04, 0x80);         // Clear all interrupt request bit
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	2004      	movs	r0, #4
 8001f6e:	f000 f8b9 	bl	80020e4 <ClearBitMask>
	SetBitMask(0x0A, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	200a      	movs	r0, #10
 8001f76:	f000 f8d5 	bl	8002124 <SetBitMask>

	Write_MFRC522(0x01, 0x00);    // NO action; Cancel the current command
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff ff65 	bl	8001e4c <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e00a      	b.n	8001f9e <MFRC522_ToCard+0x82>
		Write_MFRC522(0x09, sendData[i]);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2009      	movs	r0, #9
 8001f94:	f7ff ff5a 	bl	8001e4c <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbf0      	blt.n	8001f88 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(0x01, command);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff ff4e 	bl	8001e4c <Write_MFRC522>
	if (command == 0x0C) {
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d103      	bne.n	8001fbe <MFRC522_ToCard+0xa2>
		SetBitMask(0x0D, 0x80);      // StartSend=1,transmission of data starts
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	200d      	movs	r0, #13
 8001fba:	f000 f8b3 	bl	8002124 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000; // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001fbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fc2:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(0x04);
 8001fc4:	2004      	movs	r0, #4
 8001fc6:	f7ff ff73 	bl	8001eb0 <Read_MFRC522>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	773b      	strb	r3, [r7, #28]
		i--;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <MFRC522_ToCard+0xd4>
 8001fda:	7f3b      	ldrb	r3, [r7, #28]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <MFRC522_ToCard+0xd4>
 8001fe4:	7f3a      	ldrb	r2, [r7, #28]
 8001fe6:	7f7b      	ldrb	r3, [r7, #29]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0e9      	beq.n	8001fc4 <MFRC522_ToCard+0xa8>

	ClearBitMask(0x0D, 0x80);      // StartSend=0
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	200d      	movs	r0, #13
 8001ff4:	f000 f876 	bl	80020e4 <ClearBitMask>

	if (i != 0) {
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d050      	beq.n	80020a0 <MFRC522_ToCard+0x184>
		if (!(Read_MFRC522(0x06) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 8001ffe:	2006      	movs	r0, #6
 8002000:	f7ff ff56 	bl	8001eb0 <Read_MFRC522>
 8002004:	4603      	mov	r3, r0
 8002006:	f003 031b 	and.w	r3, r3, #27
 800200a:	2b00      	cmp	r3, #0
 800200c:	d146      	bne.n	800209c <MFRC522_ToCard+0x180>
		{
			status = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8002012:	7f3a      	ldrb	r2, [r7, #28]
 8002014:	7fbb      	ldrb	r3, [r7, #30]
 8002016:	4013      	ands	r3, r2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MFRC522_ToCard+0x10a>
				status = 1;             // ??
 8002022:	2301      	movs	r3, #1
 8002024:	77fb      	strb	r3, [r7, #31]
			}

			if (command == 0x0C) {
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d139      	bne.n	80020a0 <MFRC522_ToCard+0x184>
				n = Read_MFRC522(0x0A);
 800202c:	200a      	movs	r0, #10
 800202e:	f7ff ff3f 	bl	8001eb0 <Read_MFRC522>
 8002032:	4603      	mov	r3, r0
 8002034:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(0x0C) & 0x07;
 8002036:	200c      	movs	r0, #12
 8002038:	f7ff ff3a 	bl	8001eb0 <Read_MFRC522>
 800203c:	4603      	mov	r3, r0
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <MFRC522_ToCard+0x13e>
					*backLen = (n - 1) * 8 + lastBits;
 800204a:	7f3b      	ldrb	r3, [r7, #28]
 800204c:	3b01      	subs	r3, #1
 800204e:	00da      	lsls	r2, r3, #3
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	441a      	add	r2, r3
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e003      	b.n	8002062 <MFRC522_ToCard+0x146>
				} else {
					*backLen = n * 8;
 800205a:	7f3b      	ldrb	r3, [r7, #28]
 800205c:	00da      	lsls	r2, r3, #3
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8002062:	7f3b      	ldrb	r3, [r7, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <MFRC522_ToCard+0x150>
					n = 1;
 8002068:	2301      	movs	r3, #1
 800206a:	773b      	strb	r3, [r7, #28]
				}
				if (n > 16) {
 800206c:	7f3b      	ldrb	r3, [r7, #28]
 800206e:	2b10      	cmp	r3, #16
 8002070:	d901      	bls.n	8002076 <MFRC522_ToCard+0x15a>
					n = 16;
 8002072:	2310      	movs	r3, #16
 8002074:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e00a      	b.n	8002092 <MFRC522_ToCard+0x176>
					backData[i] = Read_MFRC522(0x09);
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	18d4      	adds	r4, r2, r3
 8002082:	2009      	movs	r0, #9
 8002084:	f7ff ff14 	bl	8001eb0 <Read_MFRC522>
 8002088:	4603      	mov	r3, r0
 800208a:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	3301      	adds	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	7f3b      	ldrb	r3, [r7, #28]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf0      	blt.n	800207c <MFRC522_ToCard+0x160>
 800209a:	e001      	b.n	80020a0 <MFRC522_ToCard+0x184>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			status = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	77fb      	strb	r3, [r7, #31]
		}
	} else {
		//printf("~~~ request timed out\r\n");
	}

	return status;
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}

080020aa <MFRC522_Request>:
char MFRC522_Request(char reqMode, char *TagType) {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af02      	add	r7, sp, #8
 80020b0:	4603      	mov	r3, r0
 80020b2:	6039      	str	r1, [r7, #0]
 80020b4:	71fb      	strb	r3, [r7, #7]
	char status;
	int backBits; // The received data bits

	Write_MFRC522(0x0D, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80020b6:	2107      	movs	r1, #7
 80020b8:	200d      	movs	r0, #13
 80020ba:	f7ff fec7 	bl	8001e4c <Write_MFRC522>

	TagType[0] = reqMode;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(0x0C, TagType, 1, TagType, &backBits);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	200c      	movs	r0, #12
 80020d2:	f7ff ff23 	bl	8001f1c <MFRC522_ToCard>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]
//	if ((status != 0) || (backBits != 0x10)) {
//		status = 2;
//	}

	return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <ClearBitMask>:
void ClearBitMask(char reg, char mask) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	460a      	mov	r2, r1
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71bb      	strb	r3, [r7, #6]
	char tmp;
	tmp = Read_MFRC522(reg);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff feda 	bl	8001eb0 <Read_MFRC522>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002100:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002104:	43db      	mvns	r3, r3
 8002106:	b25a      	sxtb	r2, r3
 8002108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210c:	4013      	ands	r3, r2
 800210e:	b25b      	sxtb	r3, r3
 8002110:	b2da      	uxtb	r2, r3
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fe98 	bl	8001e4c <Write_MFRC522>
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <SetBitMask>:
void SetBitMask(char reg, char mask) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	460a      	mov	r2, r1
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	4613      	mov	r3, r2
 8002132:	71bb      	strb	r3, [r7, #6]
	char tmp;
	tmp = Read_MFRC522(reg);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff feba 	bl	8001eb0 <Read_MFRC522>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	4313      	orrs	r3, r2
 8002146:	b2da      	uxtb	r2, r3
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fe7d 	bl	8001e4c <Write_MFRC522>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <MFRC522_Read>:
char MFRC522_Read(char blockAddr, char *recvData) {
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af02      	add	r7, sp, #8
 8002160:	4603      	mov	r3, r0
 8002162:	6039      	str	r1, [r7, #0]
 8002164:	71fb      	strb	r3, [r7, #7]
	char status;
	int unLen;

	recvData[0] = 0x30;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2230      	movs	r2, #48	; 0x30
 800216a:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	79fa      	ldrb	r2, [r7, #7]
 8002172:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3302      	adds	r3, #2
 8002178:	461a      	mov	r2, r3
 800217a:	2102      	movs	r1, #2
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f000 f818 	bl	80021b2 <CalulateCRC>
	status = MFRC522_ToCard(0x0C, recvData, 4, recvData, &unLen);
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2204      	movs	r2, #4
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	200c      	movs	r0, #12
 8002190:	f7ff fec4 	bl	8001f1c <MFRC522_ToCard>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]

	if ((status != 0) || (unLen != 0x90)) {
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <MFRC522_Read+0x4a>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b90      	cmp	r3, #144	; 0x90
 80021a2:	d001      	beq.n	80021a8 <MFRC522_Read+0x4e>
		status = 2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <CalulateCRC>:
		}
	}

	return status;
}
void CalulateCRC(char *pIndata, char len, char *pOutData) {
 80021b2:	b590      	push	{r4, r7, lr}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	460b      	mov	r3, r1
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	72fb      	strb	r3, [r7, #11]
	char i, n;

	ClearBitMask(0x05, 0x04);			//CRCIrq = 0
 80021c0:	2104      	movs	r1, #4
 80021c2:	2005      	movs	r0, #5
 80021c4:	f7ff ff8e 	bl	80020e4 <ClearBitMask>
	SetBitMask(0x0A, 0x80);			//Clear the FIFO pointer
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	200a      	movs	r0, #10
 80021cc:	f7ff ffaa 	bl	8002124 <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]
 80021d4:	e00a      	b.n	80021ec <CalulateCRC+0x3a>
		Write_MFRC522(0x09, *(pIndata + i));
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	2009      	movs	r0, #9
 80021e2:	f7ff fe33 	bl	8001e4c <Write_MFRC522>
	for (i = 0; i < len; i++) {
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	3301      	adds	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]
 80021ec:	7dfa      	ldrb	r2, [r7, #23]
 80021ee:	7afb      	ldrb	r3, [r7, #11]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3f0      	bcc.n	80021d6 <CalulateCRC+0x24>
	}
	Write_MFRC522(0x01, 0x03);
 80021f4:	2103      	movs	r1, #3
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7ff fe28 	bl	8001e4c <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 80021fc:	23ff      	movs	r3, #255	; 0xff
 80021fe:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(0x05);
 8002200:	2005      	movs	r0, #5
 8002202:	f7ff fe55 	bl	8001eb0 <Read_MFRC522>
 8002206:	4603      	mov	r3, r0
 8002208:	75bb      	strb	r3, [r7, #22]
		i--;
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	3b01      	subs	r3, #1
 800220e:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <CalulateCRC+0x6e>
 8002216:	7dbb      	ldrb	r3, [r7, #22]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(0x22);
 8002220:	2022      	movs	r0, #34	; 0x22
 8002222:	f7ff fe45 	bl	8001eb0 <Read_MFRC522>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(0x21);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1c5c      	adds	r4, r3, #1
 8002232:	2021      	movs	r0, #33	; 0x21
 8002234:	f7ff fe3c 	bl	8001eb0 <Read_MFRC522>
 8002238:	4603      	mov	r3, r0
 800223a:	7023      	strb	r3, [r4, #0]
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd90      	pop	{r4, r7, pc}

08002244 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800224c:	e7fe      	b.n	800224c <Error_Handler+0x8>
	...

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_MspInit+0x30>)
 8002258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800225c:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_MspInit+0x30>)
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_MspInit+0x30>)
 8002268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	58024400 	.word	0x58024400

08002284 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a59      	ldr	r2, [pc, #356]	; (8002408 <HAL_ETH_MspInit+0x184>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 80ab 	bne.w	80023fe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ae:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022b8:	4b54      	ldr	r3, [pc, #336]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80022c6:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d6:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ea:	4a48      	ldr	r2, [pc, #288]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <HAL_ETH_MspInit+0x188>)
 80022f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	4a40      	ldr	r2, [pc, #256]	; (800240c <HAL_ETH_MspInit+0x188>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	4a39      	ldr	r2, [pc, #228]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_ETH_MspInit+0x188>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002362:	4a2a      	ldr	r2, [pc, #168]	; (800240c <HAL_ETH_MspInit+0x188>)
 8002364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_ETH_MspInit+0x188>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800237a:	2332      	movs	r3, #50	; 0x32
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800238a:	230b      	movs	r3, #11
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	481e      	ldr	r0, [pc, #120]	; (8002410 <HAL_ETH_MspInit+0x18c>)
 8002396:	f003 f85d 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800239a:	2386      	movs	r3, #134	; 0x86
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023aa:	230b      	movs	r3, #11
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	4619      	mov	r1, r3
 80023b4:	4817      	ldr	r0, [pc, #92]	; (8002414 <HAL_ETH_MspInit+0x190>)
 80023b6:	f003 f84d 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023cc:	230b      	movs	r3, #11
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4810      	ldr	r0, [pc, #64]	; (8002418 <HAL_ETH_MspInit+0x194>)
 80023d8:	f003 f83c 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80023dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023ee:	230b      	movs	r3, #11
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	4619      	mov	r1, r3
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <HAL_ETH_MspInit+0x198>)
 80023fa:	f003 f82b 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3738      	adds	r7, #56	; 0x38
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40028000 	.word	0x40028000
 800240c:	58024400 	.word	0x58024400
 8002410:	58020800 	.word	0x58020800
 8002414:	58020000 	.word	0x58020000
 8002418:	58020400 	.word	0x58020400
 800241c:	58021800 	.word	0x58021800

08002420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0bc      	sub	sp, #240	; 0xf0
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	22bc      	movs	r2, #188	; 0xbc
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f008 fd55 	bl	800aef0 <memset>
  if(hspi->Instance==SPI1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4abb      	ldr	r2, [pc, #748]	; (8002738 <HAL_SPI_MspInit+0x318>)
 800244c:	4293      	cmp	r3, r2
 800244e:	f040 809d 	bne.w	800258c <HAL_SPI_MspInit+0x16c>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002458:	2300      	movs	r3, #0
 800245a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fb71 	bl	8006b48 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800246c:	f7ff feea 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002470:	4bb2      	ldr	r3, [pc, #712]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002476:	4ab1      	ldr	r2, [pc, #708]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002480:	4bae      	ldr	r3, [pc, #696]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	4bab      	ldr	r3, [pc, #684]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002494:	4aa9      	ldr	r2, [pc, #676]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800249e:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80024a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ac:	4ba3      	ldr	r3, [pc, #652]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80024ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b2:	4aa2      	ldr	r2, [pc, #648]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024bc:	4b9f      	ldr	r3, [pc, #636]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ca:	2320      	movs	r3, #32
 80024cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e2:	2305      	movs	r3, #5
 80024e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024ec:	4619      	mov	r1, r3
 80024ee:	4894      	ldr	r0, [pc, #592]	; (8002740 <HAL_SPI_MspInit+0x320>)
 80024f0:	f002 ffb0 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024f4:	2320      	movs	r3, #32
 80024f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800250c:	2305      	movs	r3, #5
 800250e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002516:	4619      	mov	r1, r3
 8002518:	488a      	ldr	r0, [pc, #552]	; (8002744 <HAL_SPI_MspInit+0x324>)
 800251a:	f002 ff9b 	bl	8005454 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800251e:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002520:	4a8a      	ldr	r2, [pc, #552]	; (800274c <HAL_SPI_MspInit+0x32c>)
 8002522:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002524:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002526:	2226      	movs	r2, #38	; 0x26
 8002528:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800252a:	4b87      	ldr	r3, [pc, #540]	; (8002748 <HAL_SPI_MspInit+0x328>)
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002530:	4b85      	ldr	r3, [pc, #532]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002536:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253e:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_SPI_MspInit+0x328>)
 800254c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002550:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002552:	4b7d      	ldr	r3, [pc, #500]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002558:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_SPI_MspInit+0x328>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800255e:	487a      	ldr	r0, [pc, #488]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002560:	f000 fc5c 	bl	8002e1c <HAL_DMA_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800256a:	f7ff fe6b 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002572:	679a      	str	r2, [r3, #120]	; 0x78
 8002574:	4a74      	ldr	r2, [pc, #464]	; (8002748 <HAL_SPI_MspInit+0x328>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2023      	movs	r0, #35	; 0x23
 8002580:	f000 fc17 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002584:	2023      	movs	r0, #35	; 0x23
 8002586:	f000 fc2e 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800258a:	e0d0      	b.n	800272e <HAL_SPI_MspInit+0x30e>
  else if(hspi->Instance==SPI2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6f      	ldr	r2, [pc, #444]	; (8002750 <HAL_SPI_MspInit+0x330>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f040 80cb 	bne.w	800272e <HAL_SPI_MspInit+0x30e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800259e:	2300      	movs	r3, #0
 80025a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 face 	bl	8006b48 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_SPI_MspInit+0x196>
      Error_Handler();
 80025b2:	f7ff fe47 	bl	8002244 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_SPI_MspInit+0x31c>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002602:	4b4e      	ldr	r3, [pc, #312]	; (800273c <HAL_SPI_MspInit+0x31c>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002610:	230c      	movs	r3, #12
 8002612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002628:	2305      	movs	r3, #5
 800262a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002632:	4619      	mov	r1, r3
 8002634:	4847      	ldr	r0, [pc, #284]	; (8002754 <HAL_SPI_MspInit+0x334>)
 8002636:	f002 ff0d 	bl	8005454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800263a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002654:	2305      	movs	r3, #5
 8002656:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800265e:	4619      	mov	r1, r3
 8002660:	4838      	ldr	r0, [pc, #224]	; (8002744 <HAL_SPI_MspInit+0x324>)
 8002662:	f002 fef7 	bl	8005454 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_SPI_MspInit+0x338>)
 8002668:	4a3c      	ldr	r2, [pc, #240]	; (800275c <HAL_SPI_MspInit+0x33c>)
 800266a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_SPI_MspInit+0x338>)
 800266e:	2228      	movs	r2, #40	; 0x28
 8002670:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_SPI_MspInit+0x338>)
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_SPI_MspInit+0x338>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_SPI_MspInit+0x338>)
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_SPI_MspInit+0x338>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_SPI_MspInit+0x338>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_SPI_MspInit+0x338>)
 8002694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002698:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_SPI_MspInit+0x338>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_SPI_MspInit+0x338>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80026a6:	482c      	ldr	r0, [pc, #176]	; (8002758 <HAL_SPI_MspInit+0x338>)
 80026a8:	f000 fbb8 	bl	8002e1c <HAL_DMA_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 80026b2:	f7ff fdc7 	bl	8002244 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_SPI_MspInit+0x338>)
 80026ba:	679a      	str	r2, [r3, #120]	; 0x78
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <HAL_SPI_MspInit+0x338>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_SPI_MspInit+0x344>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026ca:	2227      	movs	r2, #39	; 0x27
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_SPI_MspInit+0x340>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002702:	4817      	ldr	r0, [pc, #92]	; (8002760 <HAL_SPI_MspInit+0x340>)
 8002704:	f000 fb8a 	bl	8002e1c <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_SPI_MspInit+0x2f2>
      Error_Handler();
 800270e:	f7ff fd99 	bl	8002244 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_SPI_MspInit+0x340>)
 8002716:	67da      	str	r2, [r3, #124]	; 0x7c
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_SPI_MspInit+0x340>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	2024      	movs	r0, #36	; 0x24
 8002724:	f000 fb45 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002728:	2024      	movs	r0, #36	; 0x24
 800272a:	f000 fb5c 	bl	8002de6 <HAL_NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	37f0      	adds	r7, #240	; 0xf0
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40013000 	.word	0x40013000
 800273c:	58024400 	.word	0x58024400
 8002740:	58020000 	.word	0x58020000
 8002744:	58020400 	.word	0x58020400
 8002748:	240009e8 	.word	0x240009e8
 800274c:	40020010 	.word	0x40020010
 8002750:	40003800 	.word	0x40003800
 8002754:	58020800 	.word	0x58020800
 8002758:	240008b4 	.word	0x240008b4
 800275c:	40020028 	.word	0x40020028
 8002760:	24000758 	.word	0x24000758
 8002764:	40020040 	.word	0x40020040

08002768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0b8      	sub	sp, #224	; 0xe0
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	22bc      	movs	r2, #188	; 0xbc
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f008 fbb1 	bl	800aef0 <memset>
  if(huart->Instance==USART3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_UART_MspInit+0xc0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d142      	bne.n	800281e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002798:	2302      	movs	r3, #2
 800279a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f9ce 	bl	8006b48 <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027b2:	f7ff fd47 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_UART_MspInit+0xc4>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800280c:	2307      	movs	r3, #7
 800280e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002812:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0xc8>)
 800281a:	f002 fe1b 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	37e0      	adds	r7, #224	; 0xe0
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40004800 	.word	0x40004800
 800282c:	58024400 	.word	0x58024400
 8002830:	58020c00 	.word	0x58020c00

08002834 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0b8      	sub	sp, #224	; 0xe0
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	22bc      	movs	r2, #188	; 0xbc
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f008 fb4b 	bl	800aef0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a36      	ldr	r2, [pc, #216]	; (8002938 <HAL_PCD_MspInit+0x104>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d165      	bne.n	8002930 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002868:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800286e:	2318      	movs	r3, #24
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002872:	2302      	movs	r3, #2
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002876:	2304      	movs	r3, #4
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800287a:	2302      	movs	r3, #2
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800287e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800288c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f004 f957 	bl	8006b48 <HAL_RCCEx_PeriphCLKConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80028a0:	f7ff fcd0 	bl	8002244 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80028a4:	f003 f988 	bl	8005bb8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_PCD_MspInit+0x108>)
 80028aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ae:	4a23      	ldr	r2, [pc, #140]	; (800293c <HAL_PCD_MspInit+0x108>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_PCD_MspInit+0x108>)
 80028ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028de:	4619      	mov	r1, r3
 80028e0:	4817      	ldr	r0, [pc, #92]	; (8002940 <HAL_PCD_MspInit+0x10c>)
 80028e2:	f002 fdb7 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002900:	230a      	movs	r3, #10
 8002902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <HAL_PCD_MspInit+0x10c>)
 800290e:	f002 fda1 	bl	8005454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_PCD_MspInit+0x108>)
 8002914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_PCD_MspInit+0x108>)
 800291a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800291e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_PCD_MspInit+0x108>)
 8002924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	37e0      	adds	r7, #224	; 0xe0
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40080000 	.word	0x40080000
 800293c:	58024400 	.word	0x58024400
 8002940:	58020000 	.word	0x58020000

08002944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <NMI_Handler+0x4>

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002990:	f000 f8d0 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DMA1_Stream0_IRQHandler+0x10>)
 800299e:	f000 ffdd 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	240009e8 	.word	0x240009e8

080029ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <DMA1_Stream1_IRQHandler+0x10>)
 80029b2:	f000 ffd3 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	240008b4 	.word	0x240008b4

080029c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <DMA1_Stream2_IRQHandler+0x10>)
 80029c6:	f000 ffc9 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	24000758 	.word	0x24000758

080029d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <SPI1_IRQHandler+0x10>)
 80029da:	f006 fbed 	bl	80091b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	240007e8 	.word	0x240007e8

080029e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <SPI2_IRQHandler+0x10>)
 80029ee:	f006 fbe3 	bl	80091b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	240001f8 	.word	0x240001f8

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a00:	f7fd fde6 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a06:	490d      	ldr	r1, [pc, #52]	; (8002a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a0c:	e002      	b.n	8002a14 <LoopCopyDataInit>

08002a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a12:	3304      	adds	r3, #4

08002a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a18:	d3f9      	bcc.n	8002a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a20:	e001      	b.n	8002a26 <LoopFillZerobss>

08002a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a24:	3204      	adds	r2, #4

08002a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a28:	d3fb      	bcc.n	8002a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f008 fa3d 	bl	800aea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe f997 	bl	8000d60 <main>
  bx  lr
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a3c:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8002a40:	0800cb34 	.word	0x0800cb34
  ldr r2, =_sbss
 8002a44:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8002a48:	24000aa4 	.word	0x24000aa4

08002a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC3_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a56:	2003      	movs	r0, #3
 8002a58:	f000 f9a0 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a5c:	f003 fe9e 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_Init+0x68>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	4913      	ldr	r1, [pc, #76]	; (8002abc <HAL_Init+0x6c>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_Init+0x68>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_Init+0x6c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <HAL_Init+0x70>)
 8002a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_Init+0x74>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f814 	bl	8002ac8 <HAL_InitTick>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e002      	b.n	8002ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aaa:	f7ff fbd1 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	0800afb8 	.word	0x0800afb8
 8002ac0:	24000004 	.word	0x24000004
 8002ac4:	24000000 	.word	0x24000000

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_InitTick+0x60>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e021      	b.n	8002b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_InitTick+0x64>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_InitTick+0x60>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f985 	bl	8002e02 <HAL_SYSTICK_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00e      	b.n	8002b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d80a      	bhi.n	8002b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f000 f94f 	bl	8002db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <HAL_InitTick+0x68>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	240000a4 	.word	0x240000a4
 8002b2c:	24000000 	.word	0x24000000
 8002b30:	240000a0 	.word	0x240000a0

08002b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x20>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_IncTick+0x24>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_IncTick+0x24>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	240000a4 	.word	0x240000a4
 8002b58:	24000aa0 	.word	0x24000aa0

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_GetTick+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	24000aa0 	.word	0x24000aa0

08002b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff ffee 	bl	8002b5c <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d005      	beq.n	8002b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_Delay+0x44>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9a:	bf00      	nop
 8002b9c:	f7ff ffde 	bl	8002b5c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d8f7      	bhi.n	8002b9c <HAL_Delay+0x28>
  {
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	240000a4 	.word	0x240000a4

08002bbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetREVID+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	5c001000 	.word	0x5c001000

08002bd4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002be4:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	58000400 	.word	0x58000400

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <__NVIC_SetPriorityGrouping+0x40>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x40>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00
 8002c40:	05fa0000 	.word	0x05fa0000

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff29 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff40 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff90 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5f 	bl	8002c9c <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff33 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa4 	bl	8002d58 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff fe9a 	bl	8002b5c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e316      	b.n	8003462 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a66      	ldr	r2, [pc, #408]	; (8002fd4 <HAL_DMA_Init+0x1b8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d04a      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_DMA_Init+0x1bc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d045      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_DMA_Init+0x1c0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d040      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a62      	ldr	r2, [pc, #392]	; (8002fe0 <HAL_DMA_Init+0x1c4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d03b      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <HAL_DMA_Init+0x1c8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_DMA_Init+0x1cc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5d      	ldr	r2, [pc, #372]	; (8002fec <HAL_DMA_Init+0x1d0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02c      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_DMA_Init+0x1d4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d027      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a5a      	ldr	r2, [pc, #360]	; (8002ff4 <HAL_DMA_Init+0x1d8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a59      	ldr	r2, [pc, #356]	; (8002ff8 <HAL_DMA_Init+0x1dc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01d      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_DMA_Init+0x1e0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d018      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_DMA_Init+0x1e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_DMA_Init+0x1e8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a53      	ldr	r2, [pc, #332]	; (8003008 <HAL_DMA_Init+0x1ec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_DMA_Init+0x1f0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Init+0xb8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a50      	ldr	r2, [pc, #320]	; (8003010 <HAL_DMA_Init+0x1f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_DMA_Init+0xbc>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_DMA_Init+0xbe>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 813b 	beq.w	8003156 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <HAL_DMA_Init+0x1b8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <HAL_DMA_Init+0x1bc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d045      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_DMA_Init+0x1c0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d040      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_DMA_Init+0x1c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d03b      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_DMA_Init+0x1c8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d036      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_DMA_Init+0x1cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d031      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_DMA_Init+0x1d0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02c      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_DMA_Init+0x1d4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d027      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <HAL_DMA_Init+0x1d8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <HAL_DMA_Init+0x1dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01d      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_DMA_Init+0x1e0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_DMA_Init+0x1e4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <HAL_DMA_Init+0x1e8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_DMA_Init+0x1ec>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_DMA_Init+0x1f0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_Init+0x174>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_DMA_Init+0x1f4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <HAL_DMA_Init+0x186>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e007      	b.n	8002fb2 <HAL_DMA_Init+0x196>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fb2:	e02f      	b.n	8003014 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb4:	f7ff fdd2 	bl	8002b5c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d928      	bls.n	8003014 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e246      	b.n	8003462 <HAL_DMA_Init+0x646>
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1c8      	bne.n	8002fb4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4b83      	ldr	r3, [pc, #524]	; (800323c <HAL_DMA_Init+0x420>)
 800302e:	4013      	ands	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800303a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	4313      	orrs	r3, r2
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <HAL_DMA_Init+0x424>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b71      	ldr	r3, [pc, #452]	; (8003244 <HAL_DMA_Init+0x428>)
 800307e:	4013      	ands	r3, r2
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d328      	bcc.n	80030d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b28      	cmp	r3, #40	; 0x28
 800308c:	d903      	bls.n	8003096 <HAL_DMA_Init+0x27a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b2e      	cmp	r3, #46	; 0x2e
 8003094:	d917      	bls.n	80030c6 <HAL_DMA_Init+0x2aa>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b3e      	cmp	r3, #62	; 0x3e
 800309c:	d903      	bls.n	80030a6 <HAL_DMA_Init+0x28a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b42      	cmp	r3, #66	; 0x42
 80030a4:	d90f      	bls.n	80030c6 <HAL_DMA_Init+0x2aa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b46      	cmp	r3, #70	; 0x46
 80030ac:	d903      	bls.n	80030b6 <HAL_DMA_Init+0x29a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b48      	cmp	r3, #72	; 0x48
 80030b4:	d907      	bls.n	80030c6 <HAL_DMA_Init+0x2aa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b4e      	cmp	r3, #78	; 0x4e
 80030bc:	d905      	bls.n	80030ca <HAL_DMA_Init+0x2ae>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b52      	cmp	r3, #82	; 0x52
 80030c4:	d801      	bhi.n	80030ca <HAL_DMA_Init+0x2ae>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_DMA_Init+0x2b0>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0307 	bic.w	r3, r3, #7
 80030ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d117      	bne.n	8003132 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f001 fbfd 	bl	8004914 <DMA_CheckFifoParam>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2240      	movs	r2, #64	; 0x40
 8003124:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e197      	b.n	8003462 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f001 fb38 	bl	80047b0 <DMA_CalcBaseAndBitshift>
 8003140:	4603      	mov	r3, r0
 8003142:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	223f      	movs	r2, #63	; 0x3f
 800314e:	409a      	lsls	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e0cd      	b.n	80032f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <HAL_DMA_Init+0x42c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d022      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_DMA_Init+0x430>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a38      	ldr	r2, [pc, #224]	; (8003250 <HAL_DMA_Init+0x434>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_DMA_Init+0x438>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_DMA_Init+0x43c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a33      	ldr	r2, [pc, #204]	; (800325c <HAL_DMA_Init+0x440>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_DMA_Init+0x444>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_DMA_Init+0x38a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_DMA_Init+0x448>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Init+0x38e>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_DMA_Init+0x390>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8097 	beq.w	80032e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_DMA_Init+0x42c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d021      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_DMA_Init+0x430>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01c      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_DMA_Init+0x434>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d017      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_DMA_Init+0x438>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d012      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_DMA_Init+0x43c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00d      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_DMA_Init+0x440>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d008      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_DMA_Init+0x444>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <HAL_DMA_Init+0x3e4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_DMA_Init+0x448>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_DMA_Init+0x44c>)
 800321e:	4013      	ands	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d020      	beq.n	800326c <HAL_DMA_Init+0x450>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d102      	bne.n	8003238 <HAL_DMA_Init+0x41c>
 8003232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003236:	e01a      	b.n	800326e <HAL_DMA_Init+0x452>
 8003238:	2300      	movs	r3, #0
 800323a:	e018      	b.n	800326e <HAL_DMA_Init+0x452>
 800323c:	fe10803f 	.word	0xfe10803f
 8003240:	5c001000 	.word	0x5c001000
 8003244:	ffff0000 	.word	0xffff0000
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494
 8003268:	fffe000f 	.word	0xfffe000f
 800326c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003274:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800327c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003284:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800328c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003294:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800329c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b6e      	ldr	r3, [pc, #440]	; (800346c <HAL_DMA_Init+0x650>)
 80032b4:	4413      	add	r3, r2
 80032b6:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_DMA_Init+0x654>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f001 fa73 	bl	80047b0 <DMA_CalcBaseAndBitshift>
 80032ca:	4603      	mov	r3, r0
 80032cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e008      	b.n	80032f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0b7      	b.n	8003462 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_DMA_Init+0x658>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d072      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a5d      	ldr	r2, [pc, #372]	; (8003478 <HAL_DMA_Init+0x65c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d06d      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5c      	ldr	r2, [pc, #368]	; (800347c <HAL_DMA_Init+0x660>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d068      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_DMA_Init+0x664>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d063      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a59      	ldr	r2, [pc, #356]	; (8003484 <HAL_DMA_Init+0x668>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d05e      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_DMA_Init+0x66c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d059      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a56      	ldr	r2, [pc, #344]	; (800348c <HAL_DMA_Init+0x670>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d054      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a54      	ldr	r2, [pc, #336]	; (8003490 <HAL_DMA_Init+0x674>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d04f      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a53      	ldr	r2, [pc, #332]	; (8003494 <HAL_DMA_Init+0x678>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_DMA_Init+0x67c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a50      	ldr	r2, [pc, #320]	; (800349c <HAL_DMA_Init+0x680>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4e      	ldr	r2, [pc, #312]	; (80034a0 <HAL_DMA_Init+0x684>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4d      	ldr	r2, [pc, #308]	; (80034a4 <HAL_DMA_Init+0x688>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <HAL_DMA_Init+0x68c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_DMA_Init+0x690>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_DMA_Init+0x694>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a47      	ldr	r2, [pc, #284]	; (80034b4 <HAL_DMA_Init+0x698>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a45      	ldr	r2, [pc, #276]	; (80034b8 <HAL_DMA_Init+0x69c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a44      	ldr	r2, [pc, #272]	; (80034bc <HAL_DMA_Init+0x6a0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_DMA_Init+0x6a4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a41      	ldr	r2, [pc, #260]	; (80034c4 <HAL_DMA_Init+0x6a8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <HAL_DMA_Init+0x6ac>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3e      	ldr	r2, [pc, #248]	; (80034cc <HAL_DMA_Init+0x6b0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_Init+0x5c6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <HAL_DMA_Init+0x6b4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA_Init+0x5ca>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_DMA_Init+0x5cc>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d032      	beq.n	8003452 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 fb0d 	bl	8004a0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d102      	bne.n	8003400 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003414:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_DMA_Init+0x624>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d80c      	bhi.n	8003440 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f001 fb8a 	bl	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	e008      	b.n	8003452 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	a7fdabf8 	.word	0xa7fdabf8
 8003470:	cccccccd 	.word	0xcccccccd
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
 80034b4:	58025408 	.word	0x58025408
 80034b8:	5802541c 	.word	0x5802541c
 80034bc:	58025430 	.word	0x58025430
 80034c0:	58025444 	.word	0x58025444
 80034c4:	58025458 	.word	0x58025458
 80034c8:	5802546c 	.word	0x5802546c
 80034cc:	58025480 	.word	0x58025480
 80034d0:	58025494 	.word	0x58025494

080034d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e205      	b.n	80038f2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e1fa      	b.n	80038f2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a8c      	ldr	r2, [pc, #560]	; (8003734 <HAL_DMA_Abort_IT+0x260>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04a      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a8b      	ldr	r2, [pc, #556]	; (8003738 <HAL_DMA_Abort_IT+0x264>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d045      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a89      	ldr	r2, [pc, #548]	; (800373c <HAL_DMA_Abort_IT+0x268>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d040      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a88      	ldr	r2, [pc, #544]	; (8003740 <HAL_DMA_Abort_IT+0x26c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d03b      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a86      	ldr	r2, [pc, #536]	; (8003744 <HAL_DMA_Abort_IT+0x270>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d036      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_DMA_Abort_IT+0x274>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d031      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a83      	ldr	r2, [pc, #524]	; (800374c <HAL_DMA_Abort_IT+0x278>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02c      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a82      	ldr	r2, [pc, #520]	; (8003750 <HAL_DMA_Abort_IT+0x27c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d027      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_DMA_Abort_IT+0x280>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7f      	ldr	r2, [pc, #508]	; (8003758 <HAL_DMA_Abort_IT+0x284>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01d      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_DMA_Abort_IT+0x288>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7c      	ldr	r2, [pc, #496]	; (8003760 <HAL_DMA_Abort_IT+0x28c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7a      	ldr	r2, [pc, #488]	; (8003764 <HAL_DMA_Abort_IT+0x290>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00e      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a79      	ldr	r2, [pc, #484]	; (8003768 <HAL_DMA_Abort_IT+0x294>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_DMA_Abort_IT+0x298>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_DMA_Abort_IT+0xc8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a76      	ldr	r2, [pc, #472]	; (8003770 <HAL_DMA_Abort_IT+0x29c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Abort_IT+0xcc>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_DMA_Abort_IT+0xce>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d065      	beq.n	8003672 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2204      	movs	r2, #4
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_DMA_Abort_IT+0x260>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5e      	ldr	r2, [pc, #376]	; (8003738 <HAL_DMA_Abort_IT+0x264>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_DMA_Abort_IT+0x268>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5b      	ldr	r2, [pc, #364]	; (8003740 <HAL_DMA_Abort_IT+0x26c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5a      	ldr	r2, [pc, #360]	; (8003744 <HAL_DMA_Abort_IT+0x270>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_DMA_Abort_IT+0x274>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a57      	ldr	r2, [pc, #348]	; (800374c <HAL_DMA_Abort_IT+0x278>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a55      	ldr	r2, [pc, #340]	; (8003750 <HAL_DMA_Abort_IT+0x27c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a54      	ldr	r2, [pc, #336]	; (8003754 <HAL_DMA_Abort_IT+0x280>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_DMA_Abort_IT+0x284>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a51      	ldr	r2, [pc, #324]	; (800375c <HAL_DMA_Abort_IT+0x288>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4f      	ldr	r2, [pc, #316]	; (8003760 <HAL_DMA_Abort_IT+0x28c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4e      	ldr	r2, [pc, #312]	; (8003764 <HAL_DMA_Abort_IT+0x290>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <HAL_DMA_Abort_IT+0x294>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_DMA_Abort_IT+0x298>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Abort_IT+0x17a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a49      	ldr	r2, [pc, #292]	; (8003770 <HAL_DMA_Abort_IT+0x29c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <HAL_DMA_Abort_IT+0x18c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e147      	b.n	80038f0 <HAL_DMA_Abort_IT+0x41c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e13e      	b.n	80038f0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 020e 	bic.w	r2, r2, #14
 8003680:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_DMA_Abort_IT+0x260>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <HAL_DMA_Abort_IT+0x264>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_DMA_Abort_IT+0x268>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_DMA_Abort_IT+0x26c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a25      	ldr	r2, [pc, #148]	; (8003744 <HAL_DMA_Abort_IT+0x270>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_DMA_Abort_IT+0x274>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_DMA_Abort_IT+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_DMA_Abort_IT+0x27c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_DMA_Abort_IT+0x280>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_DMA_Abort_IT+0x284>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_DMA_Abort_IT+0x288>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_DMA_Abort_IT+0x28c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_DMA_Abort_IT+0x290>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_DMA_Abort_IT+0x294>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_DMA_Abort_IT+0x298>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort_IT+0x24e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_DMA_Abort_IT+0x29c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d128      	bne.n	8003774 <HAL_DMA_Abort_IT+0x2a0>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e027      	b.n	8003784 <HAL_DMA_Abort_IT+0x2b0>
 8003734:	40020010 	.word	0x40020010
 8003738:	40020028 	.word	0x40020028
 800373c:	40020040 	.word	0x40020040
 8003740:	40020058 	.word	0x40020058
 8003744:	40020070 	.word	0x40020070
 8003748:	40020088 	.word	0x40020088
 800374c:	400200a0 	.word	0x400200a0
 8003750:	400200b8 	.word	0x400200b8
 8003754:	40020410 	.word	0x40020410
 8003758:	40020428 	.word	0x40020428
 800375c:	40020440 	.word	0x40020440
 8003760:	40020458 	.word	0x40020458
 8003764:	40020470 	.word	0x40020470
 8003768:	40020488 	.word	0x40020488
 800376c:	400204a0 	.word	0x400204a0
 8003770:	400204b8 	.word	0x400204b8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a5c      	ldr	r2, [pc, #368]	; (80038fc <HAL_DMA_Abort_IT+0x428>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d072      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5b      	ldr	r2, [pc, #364]	; (8003900 <HAL_DMA_Abort_IT+0x42c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d06d      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a59      	ldr	r2, [pc, #356]	; (8003904 <HAL_DMA_Abort_IT+0x430>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d068      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_DMA_Abort_IT+0x434>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d063      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a56      	ldr	r2, [pc, #344]	; (800390c <HAL_DMA_Abort_IT+0x438>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d05e      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_DMA_Abort_IT+0x43c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d059      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a53      	ldr	r2, [pc, #332]	; (8003914 <HAL_DMA_Abort_IT+0x440>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d054      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_DMA_Abort_IT+0x444>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04f      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a50      	ldr	r2, [pc, #320]	; (800391c <HAL_DMA_Abort_IT+0x448>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4f      	ldr	r2, [pc, #316]	; (8003920 <HAL_DMA_Abort_IT+0x44c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a4d      	ldr	r2, [pc, #308]	; (8003924 <HAL_DMA_Abort_IT+0x450>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4c      	ldr	r2, [pc, #304]	; (8003928 <HAL_DMA_Abort_IT+0x454>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a4a      	ldr	r2, [pc, #296]	; (800392c <HAL_DMA_Abort_IT+0x458>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_DMA_Abort_IT+0x45c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a47      	ldr	r2, [pc, #284]	; (8003934 <HAL_DMA_Abort_IT+0x460>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a46      	ldr	r2, [pc, #280]	; (8003938 <HAL_DMA_Abort_IT+0x464>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a44      	ldr	r2, [pc, #272]	; (800393c <HAL_DMA_Abort_IT+0x468>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a43      	ldr	r2, [pc, #268]	; (8003940 <HAL_DMA_Abort_IT+0x46c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <HAL_DMA_Abort_IT+0x470>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <HAL_DMA_Abort_IT+0x474>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a3e      	ldr	r2, [pc, #248]	; (800394c <HAL_DMA_Abort_IT+0x478>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <HAL_DMA_Abort_IT+0x47c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <HAL_DMA_Abort_IT+0x480>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_Abort_IT+0x3a0>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <HAL_DMA_Abort_IT+0x484>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_DMA_Abort_IT+0x3a4>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_DMA_Abort_IT+0x3a6>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d028      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40020010 	.word	0x40020010
 8003900:	40020028 	.word	0x40020028
 8003904:	40020040 	.word	0x40020040
 8003908:	40020058 	.word	0x40020058
 800390c:	40020070 	.word	0x40020070
 8003910:	40020088 	.word	0x40020088
 8003914:	400200a0 	.word	0x400200a0
 8003918:	400200b8 	.word	0x400200b8
 800391c:	40020410 	.word	0x40020410
 8003920:	40020428 	.word	0x40020428
 8003924:	40020440 	.word	0x40020440
 8003928:	40020458 	.word	0x40020458
 800392c:	40020470 	.word	0x40020470
 8003930:	40020488 	.word	0x40020488
 8003934:	400204a0 	.word	0x400204a0
 8003938:	400204b8 	.word	0x400204b8
 800393c:	58025408 	.word	0x58025408
 8003940:	5802541c 	.word	0x5802541c
 8003944:	58025430 	.word	0x58025430
 8003948:	58025444 	.word	0x58025444
 800394c:	58025458 	.word	0x58025458
 8003950:	5802546c 	.word	0x5802546c
 8003954:	58025480 	.word	0x58025480
 8003958:	58025494 	.word	0x58025494

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003968:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_DMA_IRQHandler+0x1ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_DMA_IRQHandler+0x1b0>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5f      	ldr	r2, [pc, #380]	; (8003b10 <HAL_DMA_IRQHandler+0x1b4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d04a      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_DMA_IRQHandler+0x1b8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d045      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_DMA_IRQHandler+0x1bc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d040      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5a      	ldr	r2, [pc, #360]	; (8003b1c <HAL_DMA_IRQHandler+0x1c0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d03b      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a59      	ldr	r2, [pc, #356]	; (8003b20 <HAL_DMA_IRQHandler+0x1c4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d036      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a57      	ldr	r2, [pc, #348]	; (8003b24 <HAL_DMA_IRQHandler+0x1c8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_DMA_IRQHandler+0x1cc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d02c      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a54      	ldr	r2, [pc, #336]	; (8003b2c <HAL_DMA_IRQHandler+0x1d0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d027      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a53      	ldr	r2, [pc, #332]	; (8003b30 <HAL_DMA_IRQHandler+0x1d4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a51      	ldr	r2, [pc, #324]	; (8003b34 <HAL_DMA_IRQHandler+0x1d8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a50      	ldr	r2, [pc, #320]	; (8003b38 <HAL_DMA_IRQHandler+0x1dc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4e      	ldr	r2, [pc, #312]	; (8003b3c <HAL_DMA_IRQHandler+0x1e0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4d      	ldr	r2, [pc, #308]	; (8003b40 <HAL_DMA_IRQHandler+0x1e4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	; (8003b44 <HAL_DMA_IRQHandler+0x1e8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a4a      	ldr	r2, [pc, #296]	; (8003b48 <HAL_DMA_IRQHandler+0x1ec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a48      	ldr	r2, [pc, #288]	; (8003b4c <HAL_DMA_IRQHandler+0x1f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_DMA_IRQHandler+0xd6>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_DMA_IRQHandler+0xd8>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 842b 	beq.w	8004290 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2208      	movs	r2, #8
 8003a44:	409a      	lsls	r2, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80a2 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_DMA_IRQHandler+0x1b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04a      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	; (8003b14 <HAL_DMA_IRQHandler+0x1b8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d045      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <HAL_DMA_IRQHandler+0x1bc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HAL_DMA_IRQHandler+0x1c0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d03b      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_DMA_IRQHandler+0x1c4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d036      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <HAL_DMA_IRQHandler+0x1c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <HAL_DMA_IRQHandler+0x1cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d02c      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_DMA_IRQHandler+0x1d0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d027      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <HAL_DMA_IRQHandler+0x1d4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_DMA_IRQHandler+0x1d8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d01d      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <HAL_DMA_IRQHandler+0x1dc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_DMA_IRQHandler+0x1e0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <HAL_DMA_IRQHandler+0x1e4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_DMA_IRQHandler+0x1e8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <HAL_DMA_IRQHandler+0x1ec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_DMA_IRQHandler+0x1f0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d12f      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e02e      	b.n	8003b64 <HAL_DMA_IRQHandler+0x208>
 8003b06:	bf00      	nop
 8003b08:	24000000 	.word	0x24000000
 8003b0c:	1b4e81b5 	.word	0x1b4e81b5
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06e      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a69      	ldr	r2, [pc, #420]	; (8003d54 <HAL_DMA_IRQHandler+0x3f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04a      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_DMA_IRQHandler+0x3fc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d045      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a66      	ldr	r2, [pc, #408]	; (8003d5c <HAL_DMA_IRQHandler+0x400>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d040      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a64      	ldr	r2, [pc, #400]	; (8003d60 <HAL_DMA_IRQHandler+0x404>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d03b      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_DMA_IRQHandler+0x408>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d036      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a61      	ldr	r2, [pc, #388]	; (8003d68 <HAL_DMA_IRQHandler+0x40c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d031      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a60      	ldr	r2, [pc, #384]	; (8003d6c <HAL_DMA_IRQHandler+0x410>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d02c      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a5e      	ldr	r2, [pc, #376]	; (8003d70 <HAL_DMA_IRQHandler+0x414>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d027      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <HAL_DMA_IRQHandler+0x418>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5b      	ldr	r2, [pc, #364]	; (8003d78 <HAL_DMA_IRQHandler+0x41c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5a      	ldr	r2, [pc, #360]	; (8003d7c <HAL_DMA_IRQHandler+0x420>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_DMA_IRQHandler+0x424>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <HAL_DMA_IRQHandler+0x428>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a55      	ldr	r2, [pc, #340]	; (8003d88 <HAL_DMA_IRQHandler+0x42c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_DMA_IRQHandler+0x430>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_DMA_IRQHandler+0x434>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10a      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x304>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e003      	b.n	8003c68 <HAL_DMA_IRQHandler+0x30c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f043 0202 	orr.w	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2204      	movs	r2, #4
 8003c92:	409a      	lsls	r2, r3
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 808f 	beq.w	8003dbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_DMA_IRQHandler+0x3f8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04a      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_DMA_IRQHandler+0x3fc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <HAL_DMA_IRQHandler+0x400>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d040      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <HAL_DMA_IRQHandler+0x404>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d03b      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <HAL_DMA_IRQHandler+0x408>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d036      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <HAL_DMA_IRQHandler+0x40c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d031      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <HAL_DMA_IRQHandler+0x410>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02c      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_DMA_IRQHandler+0x414>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d027      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_DMA_IRQHandler+0x418>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_DMA_IRQHandler+0x41c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_DMA_IRQHandler+0x420>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_DMA_IRQHandler+0x424>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_DMA_IRQHandler+0x428>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_DMA_IRQHandler+0x42c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <HAL_DMA_IRQHandler+0x430>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <HAL_DMA_IRQHandler+0x434>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12a      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x438>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e023      	b.n	8003d9c <HAL_DMA_IRQHandler+0x440>
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2204      	movs	r2, #4
 8003daa:	409a      	lsls	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a6 	beq.w	8003f1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a85      	ldr	r2, [pc, #532]	; (8003fec <HAL_DMA_IRQHandler+0x690>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a83      	ldr	r2, [pc, #524]	; (8003ff0 <HAL_DMA_IRQHandler+0x694>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a82      	ldr	r2, [pc, #520]	; (8003ff4 <HAL_DMA_IRQHandler+0x698>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a80      	ldr	r2, [pc, #512]	; (8003ff8 <HAL_DMA_IRQHandler+0x69c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7f      	ldr	r2, [pc, #508]	; (8003ffc <HAL_DMA_IRQHandler+0x6a0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7d      	ldr	r2, [pc, #500]	; (8004000 <HAL_DMA_IRQHandler+0x6a4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_DMA_IRQHandler+0x6a8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7a      	ldr	r2, [pc, #488]	; (8004008 <HAL_DMA_IRQHandler+0x6ac>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	; (800400c <HAL_DMA_IRQHandler+0x6b0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a77      	ldr	r2, [pc, #476]	; (8004010 <HAL_DMA_IRQHandler+0x6b4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a76      	ldr	r2, [pc, #472]	; (8004014 <HAL_DMA_IRQHandler+0x6b8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a74      	ldr	r2, [pc, #464]	; (8004018 <HAL_DMA_IRQHandler+0x6bc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a73      	ldr	r2, [pc, #460]	; (800401c <HAL_DMA_IRQHandler+0x6c0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a71      	ldr	r2, [pc, #452]	; (8004020 <HAL_DMA_IRQHandler+0x6c4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a70      	ldr	r2, [pc, #448]	; (8004024 <HAL_DMA_IRQHandler+0x6c8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_DMA_IRQHandler+0x6cc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10a      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x52c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e009      	b.n	8003e9c <HAL_DMA_IRQHandler+0x540>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d108      	bne.n	8003ede <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d024      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e01f      	b.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
 8003eee:	e016      	b.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2220      	movs	r2, #32
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8110 	beq.w	8004154 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_DMA_IRQHandler+0x690>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d04a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <HAL_DMA_IRQHandler+0x694>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d045      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_DMA_IRQHandler+0x698>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d040      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <HAL_DMA_IRQHandler+0x69c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d03b      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_DMA_IRQHandler+0x6a0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d036      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a25      	ldr	r2, [pc, #148]	; (8004000 <HAL_DMA_IRQHandler+0x6a4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d031      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_DMA_IRQHandler+0x6a8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02c      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <HAL_DMA_IRQHandler+0x6ac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d027      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a20      	ldr	r2, [pc, #128]	; (800400c <HAL_DMA_IRQHandler+0x6b0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <HAL_DMA_IRQHandler+0x6b4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d01d      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_DMA_IRQHandler+0x6b8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_DMA_IRQHandler+0x6bc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_DMA_IRQHandler+0x6c0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_DMA_IRQHandler+0x6c4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_DMA_IRQHandler+0x6c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a16      	ldr	r2, [pc, #88]	; (8004028 <HAL_DMA_IRQHandler+0x6cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d12b      	bne.n	800402c <HAL_DMA_IRQHandler+0x6d0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e02a      	b.n	8004040 <HAL_DMA_IRQHandler+0x6e4>
 8003fea:	bf00      	nop
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8087 	beq.w	8004154 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2220      	movs	r2, #32
 8004050:	409a      	lsls	r2, r3
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b04      	cmp	r3, #4
 8004060:	d139      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0216 	bic.w	r2, r2, #22
 8004070:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004080:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_DMA_IRQHandler+0x736>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0208 	bic.w	r2, r2, #8
 80040a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	223f      	movs	r2, #63	; 0x3f
 80040ac:	409a      	lsls	r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 834a 	beq.w	8004760 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
          }
          return;
 80040d4:	e344      	b.n	8004760 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02c      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
 8004102:	e027      	b.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d023      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e01e      	b.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0210 	bic.w	r2, r2, #16
 8004132:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8306 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8088 	beq.w	800427c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7a      	ldr	r2, [pc, #488]	; (8004364 <HAL_DMA_IRQHandler+0xa08>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04a      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a79      	ldr	r2, [pc, #484]	; (8004368 <HAL_DMA_IRQHandler+0xa0c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d045      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a77      	ldr	r2, [pc, #476]	; (800436c <HAL_DMA_IRQHandler+0xa10>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d040      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a76      	ldr	r2, [pc, #472]	; (8004370 <HAL_DMA_IRQHandler+0xa14>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d03b      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a74      	ldr	r2, [pc, #464]	; (8004374 <HAL_DMA_IRQHandler+0xa18>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	; (8004378 <HAL_DMA_IRQHandler+0xa1c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d031      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a71      	ldr	r2, [pc, #452]	; (800437c <HAL_DMA_IRQHandler+0xa20>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02c      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a70      	ldr	r2, [pc, #448]	; (8004380 <HAL_DMA_IRQHandler+0xa24>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d027      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6e      	ldr	r2, [pc, #440]	; (8004384 <HAL_DMA_IRQHandler+0xa28>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6d      	ldr	r2, [pc, #436]	; (8004388 <HAL_DMA_IRQHandler+0xa2c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6b      	ldr	r2, [pc, #428]	; (800438c <HAL_DMA_IRQHandler+0xa30>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6a      	ldr	r2, [pc, #424]	; (8004390 <HAL_DMA_IRQHandler+0xa34>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a68      	ldr	r2, [pc, #416]	; (8004394 <HAL_DMA_IRQHandler+0xa38>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a67      	ldr	r2, [pc, #412]	; (8004398 <HAL_DMA_IRQHandler+0xa3c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <HAL_DMA_IRQHandler+0xa40>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a64      	ldr	r2, [pc, #400]	; (80043a0 <HAL_DMA_IRQHandler+0xa44>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <HAL_DMA_IRQHandler+0x8ca>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <HAL_DMA_IRQHandler+0x8da>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	429a      	cmp	r2, r3
 8004240:	d307      	bcc.n	8004252 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f2      	bne.n	8004236 <HAL_DMA_IRQHandler+0x8da>
 8004250:	e000      	b.n	8004254 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004252:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2203      	movs	r2, #3
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800426a:	e003      	b.n	8004274 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8272 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
 800428e:	e26c      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a43      	ldr	r2, [pc, #268]	; (80043a4 <HAL_DMA_IRQHandler+0xa48>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a42      	ldr	r2, [pc, #264]	; (80043a8 <HAL_DMA_IRQHandler+0xa4c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01d      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a40      	ldr	r2, [pc, #256]	; (80043ac <HAL_DMA_IRQHandler+0xa50>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <HAL_DMA_IRQHandler+0xa54>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a3d      	ldr	r2, [pc, #244]	; (80043b4 <HAL_DMA_IRQHandler+0xa58>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3c      	ldr	r2, [pc, #240]	; (80043b8 <HAL_DMA_IRQHandler+0xa5c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <HAL_DMA_IRQHandler+0xa60>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a39      	ldr	r2, [pc, #228]	; (80043c0 <HAL_DMA_IRQHandler+0xa64>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x988>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x98a>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 823f 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	2204      	movs	r2, #4
 80042fe:	409a      	lsls	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80cd 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xb48>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80c7 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2204      	movs	r2, #4
 8004320:	409a      	lsls	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d049      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8210 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800434c:	e20a      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8206 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004360:	e200      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
 8004362:	bf00      	nop
 8004364:	40020010 	.word	0x40020010
 8004368:	40020028 	.word	0x40020028
 800436c:	40020040 	.word	0x40020040
 8004370:	40020058 	.word	0x40020058
 8004374:	40020070 	.word	0x40020070
 8004378:	40020088 	.word	0x40020088
 800437c:	400200a0 	.word	0x400200a0
 8004380:	400200b8 	.word	0x400200b8
 8004384:	40020410 	.word	0x40020410
 8004388:	40020428 	.word	0x40020428
 800438c:	40020440 	.word	0x40020440
 8004390:	40020458 	.word	0x40020458
 8004394:	40020470 	.word	0x40020470
 8004398:	40020488 	.word	0x40020488
 800439c:	400204a0 	.word	0x400204a0
 80043a0:	400204b8 	.word	0x400204b8
 80043a4:	58025408 	.word	0x58025408
 80043a8:	5802541c 	.word	0x5802541c
 80043ac:	58025430 	.word	0x58025430
 80043b0:	58025444 	.word	0x58025444
 80043b4:	58025458 	.word	0x58025458
 80043b8:	5802546c 	.word	0x5802546c
 80043bc:	58025480 	.word	0x58025480
 80043c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d160      	bne.n	8004490 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a8c      	ldr	r2, [pc, #560]	; (8004604 <HAL_DMA_IRQHandler+0xca8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d04a      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a8a      	ldr	r2, [pc, #552]	; (8004608 <HAL_DMA_IRQHandler+0xcac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d045      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a89      	ldr	r2, [pc, #548]	; (800460c <HAL_DMA_IRQHandler+0xcb0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d040      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a87      	ldr	r2, [pc, #540]	; (8004610 <HAL_DMA_IRQHandler+0xcb4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d03b      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a86      	ldr	r2, [pc, #536]	; (8004614 <HAL_DMA_IRQHandler+0xcb8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d036      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a84      	ldr	r2, [pc, #528]	; (8004618 <HAL_DMA_IRQHandler+0xcbc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d031      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a83      	ldr	r2, [pc, #524]	; (800461c <HAL_DMA_IRQHandler+0xcc0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d02c      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a81      	ldr	r2, [pc, #516]	; (8004620 <HAL_DMA_IRQHandler+0xcc4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d027      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a80      	ldr	r2, [pc, #512]	; (8004624 <HAL_DMA_IRQHandler+0xcc8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d022      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7e      	ldr	r2, [pc, #504]	; (8004628 <HAL_DMA_IRQHandler+0xccc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01d      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7d      	ldr	r2, [pc, #500]	; (800462c <HAL_DMA_IRQHandler+0xcd0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7b      	ldr	r2, [pc, #492]	; (8004630 <HAL_DMA_IRQHandler+0xcd4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7a      	ldr	r2, [pc, #488]	; (8004634 <HAL_DMA_IRQHandler+0xcd8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a78      	ldr	r2, [pc, #480]	; (8004638 <HAL_DMA_IRQHandler+0xcdc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a77      	ldr	r2, [pc, #476]	; (800463c <HAL_DMA_IRQHandler+0xce0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a75      	ldr	r2, [pc, #468]	; (8004640 <HAL_DMA_IRQHandler+0xce4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <HAL_DMA_IRQHandler+0xb24>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <HAL_DMA_IRQHandler+0xb34>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8165 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a2:	e15f      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2202      	movs	r2, #2
 80044ae:	409a      	lsls	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80c5 	beq.w	8004644 <HAL_DMA_IRQHandler+0xce8>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80bf 	beq.w	8004644 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2202      	movs	r2, #2
 80044d0:	409a      	lsls	r2, r3
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d018      	beq.n	8004512 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 813a 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	e134      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8130 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004510:	e12a      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d168      	bne.n	80045ee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a38      	ldr	r2, [pc, #224]	; (8004604 <HAL_DMA_IRQHandler+0xca8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <HAL_DMA_IRQHandler+0xcac>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a35      	ldr	r2, [pc, #212]	; (800460c <HAL_DMA_IRQHandler+0xcb0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a34      	ldr	r2, [pc, #208]	; (8004610 <HAL_DMA_IRQHandler+0xcb4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_DMA_IRQHandler+0xcb8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a31      	ldr	r2, [pc, #196]	; (8004618 <HAL_DMA_IRQHandler+0xcbc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_DMA_IRQHandler+0xcc0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2e      	ldr	r2, [pc, #184]	; (8004620 <HAL_DMA_IRQHandler+0xcc4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <HAL_DMA_IRQHandler+0xcc8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <HAL_DMA_IRQHandler+0xccc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_DMA_IRQHandler+0xcd0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a28      	ldr	r2, [pc, #160]	; (8004630 <HAL_DMA_IRQHandler+0xcd4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_DMA_IRQHandler+0xcd8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a25      	ldr	r2, [pc, #148]	; (8004638 <HAL_DMA_IRQHandler+0xcdc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_DMA_IRQHandler+0xce0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_DMA_IRQHandler+0xc60>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a22      	ldr	r2, [pc, #136]	; (8004640 <HAL_DMA_IRQHandler+0xce4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d108      	bne.n	80045ce <HAL_DMA_IRQHandler+0xc72>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0214 	bic.w	r2, r2, #20
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e007      	b.n	80045de <HAL_DMA_IRQHandler+0xc82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 020a 	bic.w	r2, r2, #10
 80045dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80b8 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004600:	e0b2      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
 8004602:	bf00      	nop
 8004604:	40020010 	.word	0x40020010
 8004608:	40020028 	.word	0x40020028
 800460c:	40020040 	.word	0x40020040
 8004610:	40020058 	.word	0x40020058
 8004614:	40020070 	.word	0x40020070
 8004618:	40020088 	.word	0x40020088
 800461c:	400200a0 	.word	0x400200a0
 8004620:	400200b8 	.word	0x400200b8
 8004624:	40020410 	.word	0x40020410
 8004628:	40020428 	.word	0x40020428
 800462c:	40020440 	.word	0x40020440
 8004630:	40020458 	.word	0x40020458
 8004634:	40020470 	.word	0x40020470
 8004638:	40020488 	.word	0x40020488
 800463c:	400204a0 	.word	0x400204a0
 8004640:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2208      	movs	r2, #8
 800464e:	409a      	lsls	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8088 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8082 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a41      	ldr	r2, [pc, #260]	; (8004770 <HAL_DMA_IRQHandler+0xe14>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <HAL_DMA_IRQHandler+0xe18>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3e      	ldr	r2, [pc, #248]	; (8004778 <HAL_DMA_IRQHandler+0xe1c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3c      	ldr	r2, [pc, #240]	; (800477c <HAL_DMA_IRQHandler+0xe20>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <HAL_DMA_IRQHandler+0xe24>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a39      	ldr	r2, [pc, #228]	; (8004784 <HAL_DMA_IRQHandler+0xe28>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a38      	ldr	r2, [pc, #224]	; (8004788 <HAL_DMA_IRQHandler+0xe2c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a36      	ldr	r2, [pc, #216]	; (800478c <HAL_DMA_IRQHandler+0xe30>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a35      	ldr	r2, [pc, #212]	; (8004790 <HAL_DMA_IRQHandler+0xe34>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a33      	ldr	r2, [pc, #204]	; (8004794 <HAL_DMA_IRQHandler+0xe38>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a32      	ldr	r2, [pc, #200]	; (8004798 <HAL_DMA_IRQHandler+0xe3c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a30      	ldr	r2, [pc, #192]	; (800479c <HAL_DMA_IRQHandler+0xe40>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_DMA_IRQHandler+0xe44>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <HAL_DMA_IRQHandler+0xe48>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_DMA_IRQHandler+0xe4c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <HAL_DMA_IRQHandler+0xe50>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <HAL_DMA_IRQHandler+0xdbc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 021c 	bic.w	r2, r2, #28
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <HAL_DMA_IRQHandler+0xdcc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020e 	bic.w	r2, r2, #14
 8004726:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	4798      	blx	r3
 800475e:	e004      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004760:	bf00      	nop
 8004762:	e002      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004768:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40020010 	.word	0x40020010
 8004774:	40020028 	.word	0x40020028
 8004778:	40020040 	.word	0x40020040
 800477c:	40020058 	.word	0x40020058
 8004780:	40020070 	.word	0x40020070
 8004784:	40020088 	.word	0x40020088
 8004788:	400200a0 	.word	0x400200a0
 800478c:	400200b8 	.word	0x400200b8
 8004790:	40020410 	.word	0x40020410
 8004794:	40020428 	.word	0x40020428
 8004798:	40020440 	.word	0x40020440
 800479c:	40020458 	.word	0x40020458
 80047a0:	40020470 	.word	0x40020470
 80047a4:	40020488 	.word	0x40020488
 80047a8:	400204a0 	.word	0x400204a0
 80047ac:	400204b8 	.word	0x400204b8

080047b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <DMA_CalcBaseAndBitshift+0x118>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04a      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a41      	ldr	r2, [pc, #260]	; (80048cc <DMA_CalcBaseAndBitshift+0x11c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d045      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3f      	ldr	r2, [pc, #252]	; (80048d0 <DMA_CalcBaseAndBitshift+0x120>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3e      	ldr	r2, [pc, #248]	; (80048d4 <DMA_CalcBaseAndBitshift+0x124>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d03b      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3c      	ldr	r2, [pc, #240]	; (80048d8 <DMA_CalcBaseAndBitshift+0x128>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d036      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a3b      	ldr	r2, [pc, #236]	; (80048dc <DMA_CalcBaseAndBitshift+0x12c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d031      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a39      	ldr	r2, [pc, #228]	; (80048e0 <DMA_CalcBaseAndBitshift+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02c      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a38      	ldr	r2, [pc, #224]	; (80048e4 <DMA_CalcBaseAndBitshift+0x134>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d027      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a36      	ldr	r2, [pc, #216]	; (80048e8 <DMA_CalcBaseAndBitshift+0x138>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a35      	ldr	r2, [pc, #212]	; (80048ec <DMA_CalcBaseAndBitshift+0x13c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d01d      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a33      	ldr	r2, [pc, #204]	; (80048f0 <DMA_CalcBaseAndBitshift+0x140>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <DMA_CalcBaseAndBitshift+0x144>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a30      	ldr	r2, [pc, #192]	; (80048f8 <DMA_CalcBaseAndBitshift+0x148>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <DMA_CalcBaseAndBitshift+0x14c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <DMA_CalcBaseAndBitshift+0x150>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xa8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <DMA_CalcBaseAndBitshift+0x154>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <DMA_CalcBaseAndBitshift+0xac>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <DMA_CalcBaseAndBitshift+0xae>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d024      	beq.n	80048ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3b10      	subs	r3, #16
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <DMA_CalcBaseAndBitshift+0x158>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	4a24      	ldr	r2, [pc, #144]	; (800490c <DMA_CalcBaseAndBitshift+0x15c>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d908      	bls.n	800489c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <DMA_CalcBaseAndBitshift+0x160>)
 8004892:	4013      	ands	r3, r2
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	659a      	str	r2, [r3, #88]	; 0x58
 800489a:	e00d      	b.n	80048b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <DMA_CalcBaseAndBitshift+0x160>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
 80048aa:	e005      	b.n	80048b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40020010 	.word	0x40020010
 80048cc:	40020028 	.word	0x40020028
 80048d0:	40020040 	.word	0x40020040
 80048d4:	40020058 	.word	0x40020058
 80048d8:	40020070 	.word	0x40020070
 80048dc:	40020088 	.word	0x40020088
 80048e0:	400200a0 	.word	0x400200a0
 80048e4:	400200b8 	.word	0x400200b8
 80048e8:	40020410 	.word	0x40020410
 80048ec:	40020428 	.word	0x40020428
 80048f0:	40020440 	.word	0x40020440
 80048f4:	40020458 	.word	0x40020458
 80048f8:	40020470 	.word	0x40020470
 80048fc:	40020488 	.word	0x40020488
 8004900:	400204a0 	.word	0x400204a0
 8004904:	400204b8 	.word	0x400204b8
 8004908:	aaaaaaab 	.word	0xaaaaaaab
 800490c:	0800caf4 	.word	0x0800caf4
 8004910:	fffffc00 	.word	0xfffffc00

08004914 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d120      	bne.n	800496a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b03      	cmp	r3, #3
 800492e:	d858      	bhi.n	80049e2 <DMA_CheckFifoParam+0xce>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <DMA_CheckFifoParam+0x24>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004949 	.word	0x08004949
 800493c:	0800495b 	.word	0x0800495b
 8004940:	08004949 	.word	0x08004949
 8004944:	080049e3 	.word	0x080049e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d048      	beq.n	80049e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004958:	e045      	b.n	80049e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004962:	d142      	bne.n	80049ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004968:	e03f      	b.n	80049ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004972:	d123      	bne.n	80049bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	2b03      	cmp	r3, #3
 800497a:	d838      	bhi.n	80049ee <DMA_CheckFifoParam+0xda>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <DMA_CheckFifoParam+0x70>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	08004995 	.word	0x08004995
 8004988:	0800499b 	.word	0x0800499b
 800498c:	08004995 	.word	0x08004995
 8004990:	080049ad 	.word	0x080049ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
        break;
 8004998:	e030      	b.n	80049fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d025      	beq.n	80049f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049aa:	e022      	b.n	80049f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b4:	d11f      	bne.n	80049f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049ba:	e01c      	b.n	80049f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d902      	bls.n	80049ca <DMA_CheckFifoParam+0xb6>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d003      	beq.n	80049d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80049c8:	e018      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
        break;
 80049ce:	e015      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00e      	beq.n	80049fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
    break;
 80049e0:	e00b      	b.n	80049fa <DMA_CheckFifoParam+0xe6>
        break;
 80049e2:	bf00      	nop
 80049e4:	e00a      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        break;
 80049e6:	bf00      	nop
 80049e8:	e008      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        break;
 80049ea:	bf00      	nop
 80049ec:	e006      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        break;
 80049ee:	bf00      	nop
 80049f0:	e004      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
        break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <DMA_CheckFifoParam+0xe8>
    break;
 80049fa:	bf00      	nop
    }
  }

  return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop

08004a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a36      	ldr	r2, [pc, #216]	; (8004b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a32      	ldr	r2, [pc, #200]	; (8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	3b08      	subs	r3, #8
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004aa8:	e024      	b.n	8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b10      	subs	r3, #16
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d806      	bhi.n	8004ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d902      	bls.n	8004ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ae4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2201      	movs	r2, #1
 8004aee:	409a      	lsls	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	58025408 	.word	0x58025408
 8004b04:	5802541c 	.word	0x5802541c
 8004b08:	58025430 	.word	0x58025430
 8004b0c:	58025444 	.word	0x58025444
 8004b10:	58025458 	.word	0x58025458
 8004b14:	5802546c 	.word	0x5802546c
 8004b18:	58025480 	.word	0x58025480
 8004b1c:	58025494 	.word	0x58025494
 8004b20:	cccccccd 	.word	0xcccccccd
 8004b24:	16009600 	.word	0x16009600
 8004b28:	58025880 	.word	0x58025880
 8004b2c:	aaaaaaab 	.word	0xaaaaaaab
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	4002040f 	.word	0x4002040f
 8004b38:	10008200 	.word	0x10008200
 8004b3c:	40020880 	.word	0x40020880

08004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d04a      	beq.n	8004bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d847      	bhi.n	8004bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d101      	bne.n	8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004bc8:	671a      	str	r2, [r3, #112]	; 0x70
 8004bca:	e009      	b.n	8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004bde:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	2201      	movs	r2, #1
 8004be6:	409a      	lsls	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	58025408 	.word	0x58025408
 8004bfc:	5802541c 	.word	0x5802541c
 8004c00:	58025430 	.word	0x58025430
 8004c04:	58025444 	.word	0x58025444
 8004c08:	58025458 	.word	0x58025458
 8004c0c:	5802546c 	.word	0x5802546c
 8004c10:	58025480 	.word	0x58025480
 8004c14:	58025494 	.word	0x58025494
 8004c18:	1600963f 	.word	0x1600963f
 8004c1c:	58025940 	.word	0x58025940
 8004c20:	1000823f 	.word	0x1000823f
 8004c24:	40020940 	.word	0x40020940

08004c28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0c6      	b.n	8004dc8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fd fb1e 	bl	8002284 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2223      	movs	r2, #35	; 0x23
 8004c4c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4e:	4b60      	ldr	r3, [pc, #384]	; (8004dd0 <HAL_ETH_Init+0x1a8>)
 8004c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c54:	4a5e      	ldr	r2, [pc, #376]	; (8004dd0 <HAL_ETH_Init+0x1a8>)
 8004c56:	f043 0302 	orr.w	r3, r3, #2
 8004c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c5e:	4b5c      	ldr	r3, [pc, #368]	; (8004dd0 <HAL_ETH_Init+0x1a8>)
 8004c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7a1b      	ldrb	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7fd ffad 	bl	8002bd4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004c7a:	e003      	b.n	8004c84 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004c7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c80:	f7fd ffa8 	bl	8002bd4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9c:	f7fd ff5e 	bl	8002b5c <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004ca2:	e00f      	b.n	8004cc4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004ca4:	f7fd ff5a 	bl	8002b5c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cb2:	d907      	bls.n	8004cc4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	22e0      	movs	r2, #224	; 0xe0
 8004cbe:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e081      	b.n	8004dc8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fac0 	bl	800525c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004cdc:	f001 fed8 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a3c      	ldr	r2, [pc, #240]	; (8004dd4 <HAL_ETH_Init+0x1ac>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	0c9a      	lsrs	r2, r3, #18
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa13 	bl	8005120 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d14:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	22e0      	movs	r2, #224	; 0xe0
 8004d2c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e04a      	b.n	8004dc8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d3a:	4413      	add	r3, r2
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <HAL_ETH_Init+0x1b0>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6952      	ldr	r2, [r2, #20]
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6809      	ldr	r1, [r1, #0]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d52:	440b      	add	r3, r1
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fad8 	bl	800530c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fb1c 	bl	800539a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	3305      	adds	r3, #5
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4619      	mov	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	3303      	adds	r3, #3
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	061a      	lsls	r2, r3, #24
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	3302      	adds	r3, #2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004da0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004dae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004db0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	431bde83 	.word	0x431bde83
 8004dd8:	ffff8001 	.word	0xffff8001

08004ddc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004dee:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004df6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	7b1b      	ldrb	r3, [r3, #12]
 8004dfc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004dfe:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	7b5b      	ldrb	r3, [r3, #13]
 8004e04:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e06:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	7b9b      	ldrb	r3, [r3, #14]
 8004e0c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	7bdb      	ldrb	r3, [r3, #15]
 8004e14:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e16:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	7c12      	ldrb	r2, [r2, #16]
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d102      	bne.n	8004e26 <ETH_SetMACConfig+0x4a>
 8004e20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e24:	e000      	b.n	8004e28 <ETH_SetMACConfig+0x4c>
 8004e26:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e28:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7c52      	ldrb	r2, [r2, #17]
 8004e2e:	2a00      	cmp	r2, #0
 8004e30:	d102      	bne.n	8004e38 <ETH_SetMACConfig+0x5c>
 8004e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e36:	e000      	b.n	8004e3a <ETH_SetMACConfig+0x5e>
 8004e38:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e3a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	7c9b      	ldrb	r3, [r3, #18]
 8004e40:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e42:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e48:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004e4e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	7f1b      	ldrb	r3, [r3, #28]
 8004e54:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004e56:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	7f5b      	ldrb	r3, [r3, #29]
 8004e5c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004e5e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	7f92      	ldrb	r2, [r2, #30]
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d102      	bne.n	8004e6e <ETH_SetMACConfig+0x92>
 8004e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e6c:	e000      	b.n	8004e70 <ETH_SetMACConfig+0x94>
 8004e6e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e70:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	7fdb      	ldrb	r3, [r3, #31]
 8004e76:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e78:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d102      	bne.n	8004e8a <ETH_SetMACConfig+0xae>
 8004e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e88:	e000      	b.n	8004e8c <ETH_SetMACConfig+0xb0>
 8004e8a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e8c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e92:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004e9c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b56      	ldr	r3, [pc, #344]	; (8005008 <ETH_SetMACConfig+0x22c>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	68f9      	ldr	r1, [r7, #12]
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ec8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004ed2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004eda:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004edc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	d102      	bne.n	8004eee <ETH_SetMACConfig+0x112>
 8004ee8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004eec:	e000      	b.n	8004ef0 <ETH_SetMACConfig+0x114>
 8004eee:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004ef0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4b42      	ldr	r3, [pc, #264]	; (800500c <ETH_SetMACConfig+0x230>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f14:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <ETH_SetMACConfig+0x234>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f38:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f3e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d101      	bne.n	8004f4e <ETH_SetMACConfig+0x172>
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	e000      	b.n	8004f50 <ETH_SetMACConfig+0x174>
 8004f4e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004f50:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f62:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	68f9      	ldr	r1, [r7, #12]
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004f78:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004f80:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f023 0103 	bic.w	r1, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004fa6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	d101      	bne.n	8004fca <ETH_SetMACConfig+0x1ee>
 8004fc6:	2240      	movs	r2, #64	; 0x40
 8004fc8:	e000      	b.n	8004fcc <ETH_SetMACConfig+0x1f0>
 8004fca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004fcc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004fd4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004fd6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004fde:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004fec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	00048083 	.word	0x00048083
 800500c:	c0f88000 	.word	0xc0f88000
 8005010:	fffffef0 	.word	0xfffffef0

08005014 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b38      	ldr	r3, [pc, #224]	; (800510c <ETH_SetDMAConfig+0xf8>)
 800502a:	4013      	ands	r3, r2
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	6809      	ldr	r1, [r1, #0]
 8005034:	431a      	orrs	r2, r3
 8005036:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800503a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	791b      	ldrb	r3, [r3, #4]
 8005040:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005046:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f241 0304 	movw	r3, #4100	; 0x1004
 800505a:	4413      	add	r3, r2
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <ETH_SetDMAConfig+0xfc>)
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	431a      	orrs	r2, r3
 800506a:	f241 0304 	movw	r3, #4100	; 0x1004
 800506e:	440b      	add	r3, r1
 8005070:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	7b5b      	ldrb	r3, [r3, #13]
 8005076:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b22      	ldr	r3, [pc, #136]	; (8005114 <ETH_SetDMAConfig+0x100>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	431a      	orrs	r2, r3
 8005096:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800509a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	7d1b      	ldrb	r3, [r3, #20]
 80050a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80050a6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	7f5b      	ldrb	r3, [r3, #29]
 80050ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f241 1304 	movw	r3, #4356	; 0x1104
 80050ba:	4413      	add	r3, r2
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <ETH_SetDMAConfig+0x104>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80050ce:	440b      	add	r3, r1
 80050d0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7f1b      	ldrb	r3, [r3, #28]
 80050d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f241 1308 	movw	r3, #4360	; 0x1108
 80050e8:	4413      	add	r3, r2
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <ETH_SetDMAConfig+0x108>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6811      	ldr	r1, [r2, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	f241 1308 	movw	r3, #4360	; 0x1108
 80050fc:	440b      	add	r3, r1
 80050fe:	601a      	str	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	ffff87fd 	.word	0xffff87fd
 8005110:	ffff2ffe 	.word	0xffff2ffe
 8005114:	fffec000 	.word	0xfffec000
 8005118:	ffc0efef 	.word	0xffc0efef
 800511c:	7fc0ffff 	.word	0x7fc0ffff

08005120 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0a4      	sub	sp, #144	; 0x90
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800512e:	2300      	movs	r3, #0
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800515c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005160:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005168:	2300      	movs	r3, #0
 800516a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005178:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005184:	2300      	movs	r3, #0
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800519a:	2300      	movs	r3, #0
 800519c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800519e:	2300      	movs	r3, #0
 80051a0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051a2:	2300      	movs	r3, #0
 80051a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80051b8:	2320      	movs	r3, #32
 80051ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80051ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80051dc:	2302      	movs	r3, #2
 80051de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80051fa:	2300      	movs	r3, #0
 80051fc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fde6 	bl	8004ddc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005210:	2301      	movs	r3, #1
 8005212:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005214:	2301      	movs	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005222:	2300      	movs	r3, #0
 8005224:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800522a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800522e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005230:	2300      	movs	r3, #0
 8005232:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005238:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005240:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fee1 	bl	8005014 <ETH_SetDMAConfig>
}
 8005252:	bf00      	nop
 8005254:	3790      	adds	r7, #144	; 0x90
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800526c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005274:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005276:	f001 fc0b 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 800527a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d908      	bls.n	8005296 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d804      	bhi.n	8005296 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e027      	b.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d908      	bls.n	80052b0 <ETH_MAC_MDIO_ClkConfig+0x54>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d204      	bcs.n	80052b0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e01a      	b.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a13      	ldr	r2, [pc, #76]	; (8005300 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d303      	bcc.n	80052c0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d911      	bls.n	80052e4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d908      	bls.n	80052da <ETH_MAC_MDIO_ClkConfig+0x7e>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d804      	bhi.n	80052da <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e005      	b.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e000      	b.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80052e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	01312cff 	.word	0x01312cff
 80052fc:	02160ebf 	.word	0x02160ebf
 8005300:	03938700 	.word	0x03938700
 8005304:	05f5e0ff 	.word	0x05f5e0ff
 8005308:	08f0d17f 	.word	0x08f0d17f

0800530c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e01d      	b.n	8005356 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2200      	movs	r2, #0
 8005342:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	3206      	adds	r2, #6
 800534c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d9de      	bls.n	800531a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	f241 132c 	movw	r3, #4396	; 0x112c
 800536a:	4413      	add	r3, r2
 800536c:	2203      	movs	r2, #3
 800536e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68d9      	ldr	r1, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	f241 1314 	movw	r3, #4372	; 0x1114
 800537c:	4413      	add	r3, r2
 800537e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e024      	b.n	80053f2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6919      	ldr	r1, [r3, #16]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	440b      	add	r3, r1
 80053b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3310      	adds	r3, #16
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d9d7      	bls.n	80053a8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f241 1330 	movw	r3, #4400	; 0x1130
 800541e:	4413      	add	r3, r2
 8005420:	2203      	movs	r2, #3
 8005422:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6919      	ldr	r1, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f241 131c 	movw	r3, #4380	; 0x111c
 8005430:	4413      	add	r3, r2
 8005432:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	f241 1328 	movw	r3, #4392	; 0x1128
 8005444:	4413      	add	r3, r2
 8005446:	6019      	str	r1, [r3, #0]
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005462:	4b89      	ldr	r3, [pc, #548]	; (8005688 <HAL_GPIO_Init+0x234>)
 8005464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005466:	e194      	b.n	8005792 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2101      	movs	r1, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8186 	beq.w	800578c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d005      	beq.n	8005498 <HAL_GPIO_Init+0x44>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d130      	bne.n	80054fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	2203      	movs	r2, #3
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4313      	orrs	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ce:	2201      	movs	r2, #1
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f003 0201 	and.w	r2, r3, #1
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b03      	cmp	r3, #3
 8005504:	d017      	beq.n	8005536 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d123      	bne.n	800558a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	08da      	lsrs	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3208      	adds	r2, #8
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	08da      	lsrs	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3208      	adds	r2, #8
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	2203      	movs	r2, #3
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f003 0203 	and.w	r2, r3, #3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80e0 	beq.w	800578c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055cc:	4b2f      	ldr	r3, [pc, #188]	; (800568c <HAL_GPIO_Init+0x238>)
 80055ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055d2:	4a2e      	ldr	r2, [pc, #184]	; (800568c <HAL_GPIO_Init+0x238>)
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80055dc:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_GPIO_Init+0x238>)
 80055de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ea:	4a29      	ldr	r2, [pc, #164]	; (8005690 <HAL_GPIO_Init+0x23c>)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	3302      	adds	r3, #2
 80055f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	220f      	movs	r2, #15
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a20      	ldr	r2, [pc, #128]	; (8005694 <HAL_GPIO_Init+0x240>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d052      	beq.n	80056bc <HAL_GPIO_Init+0x268>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_GPIO_Init+0x244>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d031      	beq.n	8005682 <HAL_GPIO_Init+0x22e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1e      	ldr	r2, [pc, #120]	; (800569c <HAL_GPIO_Init+0x248>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02b      	beq.n	800567e <HAL_GPIO_Init+0x22a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <HAL_GPIO_Init+0x24c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d025      	beq.n	800567a <HAL_GPIO_Init+0x226>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <HAL_GPIO_Init+0x250>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01f      	beq.n	8005676 <HAL_GPIO_Init+0x222>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_GPIO_Init+0x254>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d019      	beq.n	8005672 <HAL_GPIO_Init+0x21e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <HAL_GPIO_Init+0x258>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_GPIO_Init+0x21a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <HAL_GPIO_Init+0x25c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00d      	beq.n	800566a <HAL_GPIO_Init+0x216>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <HAL_GPIO_Init+0x260>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <HAL_GPIO_Init+0x212>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_GPIO_Init+0x264>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <HAL_GPIO_Init+0x20e>
 800565e:	2309      	movs	r3, #9
 8005660:	e02d      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005662:	230a      	movs	r3, #10
 8005664:	e02b      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005666:	2308      	movs	r3, #8
 8005668:	e029      	b.n	80056be <HAL_GPIO_Init+0x26a>
 800566a:	2307      	movs	r3, #7
 800566c:	e027      	b.n	80056be <HAL_GPIO_Init+0x26a>
 800566e:	2306      	movs	r3, #6
 8005670:	e025      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005672:	2305      	movs	r3, #5
 8005674:	e023      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005676:	2304      	movs	r3, #4
 8005678:	e021      	b.n	80056be <HAL_GPIO_Init+0x26a>
 800567a:	2303      	movs	r3, #3
 800567c:	e01f      	b.n	80056be <HAL_GPIO_Init+0x26a>
 800567e:	2302      	movs	r3, #2
 8005680:	e01d      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005682:	2301      	movs	r3, #1
 8005684:	e01b      	b.n	80056be <HAL_GPIO_Init+0x26a>
 8005686:	bf00      	nop
 8005688:	58000080 	.word	0x58000080
 800568c:	58024400 	.word	0x58024400
 8005690:	58000400 	.word	0x58000400
 8005694:	58020000 	.word	0x58020000
 8005698:	58020400 	.word	0x58020400
 800569c:	58020800 	.word	0x58020800
 80056a0:	58020c00 	.word	0x58020c00
 80056a4:	58021000 	.word	0x58021000
 80056a8:	58021400 	.word	0x58021400
 80056ac:	58021800 	.word	0x58021800
 80056b0:	58021c00 	.word	0x58021c00
 80056b4:	58022000 	.word	0x58022000
 80056b8:	58022400 	.word	0x58022400
 80056bc:	2300      	movs	r3, #0
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	f002 0203 	and.w	r2, r2, #3
 80056c4:	0092      	lsls	r2, r2, #2
 80056c6:	4093      	lsls	r3, r2
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ce:	4938      	ldr	r1, [pc, #224]	; (80057b0 <HAL_GPIO_Init+0x35c>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4013      	ands	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	43db      	mvns	r3, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4013      	ands	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f ae63 	bne.w	8005468 <HAL_GPIO_Init+0x14>
  }
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	3724      	adds	r7, #36	; 0x24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	58000400 	.word	0x58000400

080057b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e001      	b.n	80057d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
 80057f0:	4613      	mov	r3, r2
 80057f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057f4:	787b      	ldrb	r3, [r7, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005800:	e003      	b.n	800580a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005802:	887b      	ldrh	r3, [r7, #2]
 8005804:	041a      	lsls	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	619a      	str	r2, [r3, #24]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <HAL_HSEM_FastTake+0x2c>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3320      	adds	r3, #32
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	4a07      	ldr	r2, [pc, #28]	; (8005848 <HAL_HSEM_FastTake+0x30>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d101      	bne.n	8005834 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e000      	b.n	8005836 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	58026400 	.word	0x58026400
 8005848:	80000300 	.word	0x80000300

0800584c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005856:	4906      	ldr	r1, [pc, #24]	; (8005870 <HAL_HSEM_Release+0x24>)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	58026400 	.word	0x58026400

08005874 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b08f      	sub	sp, #60	; 0x3c
 8005878:	af0a      	add	r7, sp, #40	; 0x28
 800587a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e116      	b.n	8005ab4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fc ffc7 	bl	8002834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f005 f859 	bl	800a97c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	687e      	ldr	r6, [r7, #4]
 80058d2:	466d      	mov	r5, sp
 80058d4:	f106 0410 	add.w	r4, r6, #16
 80058d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80058e8:	1d33      	adds	r3, r6, #4
 80058ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ec:	6838      	ldr	r0, [r7, #0]
 80058ee:	f004 ffd7 	bl	800a8a0 <USB_CoreInit>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0d7      	b.n	8005ab4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f005 f847 	bl	800a99e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e04a      	b.n	80059ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	333d      	adds	r3, #61	; 0x3d
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	333c      	adds	r3, #60	; 0x3c
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	b298      	uxth	r0, r3
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	3342      	adds	r3, #66	; 0x42
 8005952:	4602      	mov	r2, r0
 8005954:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005956:	7bfa      	ldrb	r2, [r7, #15]
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	333f      	adds	r3, #63	; 0x3f
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3344      	adds	r3, #68	; 0x44
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3348      	adds	r3, #72	; 0x48
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3350      	adds	r3, #80	; 0x50
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3af      	bcc.n	8005916 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e044      	b.n	8005a46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	3301      	adds	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3b5      	bcc.n	80059bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	687e      	ldr	r6, [r7, #4]
 8005a58:	466d      	mov	r5, sp
 8005a5a:	f106 0410 	add.w	r4, r6, #16
 8005a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a6e:	1d33      	adds	r3, r6, #4
 8005a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f004 ffe0 	bl	800aa38 <USB_DevInit>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e014      	b.n	8005ab4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d102      	bne.n	8005aa8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f80a 	bl	8005abc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f005 f99a 	bl	800ade6 <USB_DevDisconnect>

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005abc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_PCDEx_ActivateLPM+0x44>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	10000003 	.word	0x10000003

08005b04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d00a      	beq.n	8005b2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b18:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d001      	beq.n	8005b2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e040      	b.n	8005bac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e03e      	b.n	8005bac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b2e:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b36:	491f      	ldr	r1, [pc, #124]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b3e:	f7fd f80d 	bl	8002b5c <HAL_GetTick>
 8005b42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b44:	e009      	b.n	8005b5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b46:	f7fd f809 	bl	8002b5c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b54:	d901      	bls.n	8005b5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e028      	b.n	8005bac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b66:	d1ee      	bne.n	8005b46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b1e      	cmp	r3, #30
 8005b6c:	d008      	beq.n	8005b80 <HAL_PWREx_ConfigSupply+0x7c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b2e      	cmp	r3, #46	; 0x2e
 8005b72:	d005      	beq.n	8005b80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b1d      	cmp	r3, #29
 8005b78:	d002      	beq.n	8005b80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b2d      	cmp	r3, #45	; 0x2d
 8005b7e:	d114      	bne.n	8005baa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b80:	f7fc ffec 	bl	8002b5c <HAL_GetTick>
 8005b84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b86:	e009      	b.n	8005b9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b88:	f7fc ffe8 	bl	8002b5c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b96:	d901      	bls.n	8005b9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58024800 	.word	0x58024800

08005bb8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	60d3      	str	r3, [r2, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	58024800 	.word	0x58024800

08005bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08c      	sub	sp, #48	; 0x30
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f000 bc1c 	b.w	8006424 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8087 	beq.w	8005d08 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bfa:	4b9e      	ldr	r3, [pc, #632]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c04:	4b9b      	ldr	r3, [pc, #620]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d007      	beq.n	8005c20 <HAL_RCC_OscConfig+0x48>
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	2b18      	cmp	r3, #24
 8005c14:	d110      	bne.n	8005c38 <HAL_RCC_OscConfig+0x60>
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d10b      	bne.n	8005c38 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c20:	4b94      	ldr	r3, [pc, #592]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d06c      	beq.n	8005d06 <HAL_RCC_OscConfig+0x12e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d168      	bne.n	8005d06 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e3f5      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x78>
 8005c42:	4b8c      	ldr	r3, [pc, #560]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a8b      	ldr	r2, [pc, #556]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e02e      	b.n	8005cae <HAL_RCC_OscConfig+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10c      	bne.n	8005c72 <HAL_RCC_OscConfig+0x9a>
 8005c58:	4b86      	ldr	r3, [pc, #536]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a85      	ldr	r2, [pc, #532]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4b83      	ldr	r3, [pc, #524]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a82      	ldr	r2, [pc, #520]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	e01d      	b.n	8005cae <HAL_RCC_OscConfig+0xd6>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c7a:	d10c      	bne.n	8005c96 <HAL_RCC_OscConfig+0xbe>
 8005c7c:	4b7d      	ldr	r3, [pc, #500]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a7c      	ldr	r2, [pc, #496]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b7a      	ldr	r3, [pc, #488]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a79      	ldr	r2, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e00b      	b.n	8005cae <HAL_RCC_OscConfig+0xd6>
 8005c96:	4b77      	ldr	r3, [pc, #476]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a76      	ldr	r2, [pc, #472]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b74      	ldr	r3, [pc, #464]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a73      	ldr	r2, [pc, #460]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d013      	beq.n	8005cde <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fc ff51 	bl	8002b5c <HAL_GetTick>
 8005cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cbe:	f7fc ff4d 	bl	8002b5c <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b64      	cmp	r3, #100	; 0x64
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e3a9      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd0:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCC_OscConfig+0xe6>
 8005cdc:	e014      	b.n	8005d08 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fc ff3d 	bl	8002b5c <HAL_GetTick>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce6:	f7fc ff39 	bl	8002b5c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b64      	cmp	r3, #100	; 0x64
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e395      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cf8:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x10e>
 8005d04:	e000      	b.n	8005d08 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80ca 	beq.w	8005eaa <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d16:	4b57      	ldr	r3, [pc, #348]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d1e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d20:	4b54      	ldr	r3, [pc, #336]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <HAL_RCC_OscConfig+0x164>
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b18      	cmp	r3, #24
 8005d30:	d156      	bne.n	8005de0 <HAL_RCC_OscConfig+0x208>
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d151      	bne.n	8005de0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d3c:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_OscConfig+0x17c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e367      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 0219 	bic.w	r2, r3, #25
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4944      	ldr	r1, [pc, #272]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d66:	f7fc fef9 	bl	8002b5c <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fc fef5 	bl	8002b5c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e351      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d80:	4b3c      	ldr	r3, [pc, #240]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8c:	f7fc ff16 	bl	8002bbc <HAL_GetREVID>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d817      	bhi.n	8005dca <HAL_RCC_OscConfig+0x1f2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d108      	bne.n	8005db4 <HAL_RCC_OscConfig+0x1dc>
 8005da2:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005daa:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db2:	e07a      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db4:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	031b      	lsls	r3, r3, #12
 8005dc2:	492c      	ldr	r1, [pc, #176]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc8:	e06f      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	4926      	ldr	r1, [pc, #152]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dde:	e064      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d047      	beq.n	8005e78 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005de8:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f023 0219 	bic.w	r2, r3, #25
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	491f      	ldr	r1, [pc, #124]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fc feaf 	bl	8002b5c <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e02:	f7fc feab 	bl	8002b5c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e307      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e14:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	f7fc fecc 	bl	8002bbc <HAL_GetREVID>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d817      	bhi.n	8005e5e <HAL_RCC_OscConfig+0x286>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d108      	bne.n	8005e48 <HAL_RCC_OscConfig+0x270>
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e3e:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e44:	6053      	str	r3, [r2, #4]
 8005e46:	e030      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	031b      	lsls	r3, r3, #12
 8005e56:	4907      	ldr	r1, [pc, #28]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
 8005e5c:	e025      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	061b      	lsls	r3, r3, #24
 8005e6c:	4901      	ldr	r1, [pc, #4]	; (8005e74 <HAL_RCC_OscConfig+0x29c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	604b      	str	r3, [r1, #4]
 8005e72:	e01a      	b.n	8005eaa <HAL_RCC_OscConfig+0x2d2>
 8005e74:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e78:	4b9e      	ldr	r3, [pc, #632]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a9d      	ldr	r2, [pc, #628]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc fe6a 	bl	8002b5c <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8c:	f7fc fe66 	bl	8002b5c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e2c2      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e9e:	4b95      	ldr	r3, [pc, #596]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80a9 	beq.w	800600a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb8:	4b8e      	ldr	r3, [pc, #568]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec2:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d007      	beq.n	8005ede <HAL_RCC_OscConfig+0x306>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b18      	cmp	r3, #24
 8005ed2:	d13a      	bne.n	8005f4a <HAL_RCC_OscConfig+0x372>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d135      	bne.n	8005f4a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ede:	4b85      	ldr	r3, [pc, #532]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x31e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e296      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ef6:	f7fc fe61 	bl	8002bbc <HAL_GetREVID>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d817      	bhi.n	8005f34 <HAL_RCC_OscConfig+0x35c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d108      	bne.n	8005f1e <HAL_RCC_OscConfig+0x346>
 8005f0c:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f14:	4a77      	ldr	r2, [pc, #476]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f1a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f1c:	e075      	b.n	800600a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f1e:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	069b      	lsls	r3, r3, #26
 8005f2c:	4971      	ldr	r1, [pc, #452]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f32:	e06a      	b.n	800600a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f34:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	496c      	ldr	r1, [pc, #432]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f48:	e05f      	b.n	800600a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d042      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f52:	4b68      	ldr	r3, [pc, #416]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a67      	ldr	r2, [pc, #412]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fc fdfd 	bl	8002b5c <HAL_GetTick>
 8005f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f66:	f7fc fdf9 	bl	8002b5c <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e255      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f78:	4b5e      	ldr	r3, [pc, #376]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f84:	f7fc fe1a 	bl	8002bbc <HAL_GetREVID>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d817      	bhi.n	8005fc2 <HAL_RCC_OscConfig+0x3ea>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d108      	bne.n	8005fac <HAL_RCC_OscConfig+0x3d4>
 8005f9a:	4b56      	ldr	r3, [pc, #344]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fa2:	4a54      	ldr	r2, [pc, #336]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	e02e      	b.n	800600a <HAL_RCC_OscConfig+0x432>
 8005fac:	4b51      	ldr	r3, [pc, #324]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	069b      	lsls	r3, r3, #26
 8005fba:	494e      	ldr	r1, [pc, #312]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
 8005fc0:	e023      	b.n	800600a <HAL_RCC_OscConfig+0x432>
 8005fc2:	4b4c      	ldr	r3, [pc, #304]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	4948      	ldr	r1, [pc, #288]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60cb      	str	r3, [r1, #12]
 8005fd6:	e018      	b.n	800600a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005fd8:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a45      	ldr	r2, [pc, #276]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8005fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fc fdba 	bl	8002b5c <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fec:	f7fc fdb6 	bl	8002b5c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e212      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ffe:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d019      	beq.n	8006052 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601e:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	4a34      	ldr	r2, [pc, #208]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7fc fd97 	bl	8002b5c <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006032:	f7fc fd93 	bl	8002b5c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e1ef      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x45a>
 8006050:	e018      	b.n	8006084 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006052:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605e:	f7fc fd7d 	bl	8002b5c <HAL_GetTick>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006066:	f7fc fd79 	bl	8002b5c <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e1d5      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006078:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d039      	beq.n	8006104 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d019      	beq.n	80060cc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 800609e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060a4:	f7fc fd5a 	bl	8002b5c <HAL_GetTick>
 80060a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060ac:	f7fc fd56 	bl	8002b5c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e1b2      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x4d4>
 80060ca:	e01b      	b.n	8006104 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <HAL_RCC_OscConfig+0x51c>)
 80060d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060d8:	f7fc fd40 	bl	8002b5c <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060de:	e00b      	b.n	80060f8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060e0:	f7fc fd3c 	bl	8002b5c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d904      	bls.n	80060f8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e198      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
 80060f2:	bf00      	nop
 80060f4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060f8:	4ba3      	ldr	r3, [pc, #652]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ed      	bne.n	80060e0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8081 	beq.w	8006214 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006112:	4b9e      	ldr	r3, [pc, #632]	; (800638c <HAL_RCC_OscConfig+0x7b4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a9d      	ldr	r2, [pc, #628]	; (800638c <HAL_RCC_OscConfig+0x7b4>)
 8006118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800611c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800611e:	f7fc fd1d 	bl	8002b5c <HAL_GetTick>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006126:	f7fc fd19 	bl	8002b5c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b64      	cmp	r3, #100	; 0x64
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e175      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006138:	4b94      	ldr	r3, [pc, #592]	; (800638c <HAL_RCC_OscConfig+0x7b4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f0      	beq.n	8006126 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d106      	bne.n	800615a <HAL_RCC_OscConfig+0x582>
 800614c:	4b8e      	ldr	r3, [pc, #568]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	4a8d      	ldr	r2, [pc, #564]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6713      	str	r3, [r2, #112]	; 0x70
 8006158:	e02d      	b.n	80061b6 <HAL_RCC_OscConfig+0x5de>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <HAL_RCC_OscConfig+0x5a4>
 8006162:	4b89      	ldr	r3, [pc, #548]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	4a88      	ldr	r2, [pc, #544]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	6713      	str	r3, [r2, #112]	; 0x70
 800616e:	4b86      	ldr	r3, [pc, #536]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	4a85      	ldr	r2, [pc, #532]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	6713      	str	r3, [r2, #112]	; 0x70
 800617a:	e01c      	b.n	80061b6 <HAL_RCC_OscConfig+0x5de>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b05      	cmp	r3, #5
 8006182:	d10c      	bne.n	800619e <HAL_RCC_OscConfig+0x5c6>
 8006184:	4b80      	ldr	r3, [pc, #512]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	4a7f      	ldr	r2, [pc, #508]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800618a:	f043 0304 	orr.w	r3, r3, #4
 800618e:	6713      	str	r3, [r2, #112]	; 0x70
 8006190:	4b7d      	ldr	r3, [pc, #500]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a7c      	ldr	r2, [pc, #496]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
 800619c:	e00b      	b.n	80061b6 <HAL_RCC_OscConfig+0x5de>
 800619e:	4b7a      	ldr	r3, [pc, #488]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a79      	ldr	r2, [pc, #484]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
 80061aa:	4b77      	ldr	r3, [pc, #476]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ae:	4a76      	ldr	r2, [pc, #472]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80061b0:	f023 0304 	bic.w	r3, r3, #4
 80061b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d015      	beq.n	80061ea <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061be:	f7fc fccd 	bl	8002b5c <HAL_GetTick>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c4:	e00a      	b.n	80061dc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fc fcc9 	bl	8002b5c <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e123      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061dc:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0ee      	beq.n	80061c6 <HAL_RCC_OscConfig+0x5ee>
 80061e8:	e014      	b.n	8006214 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ea:	f7fc fcb7 	bl	8002b5c <HAL_GetTick>
 80061ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061f0:	e00a      	b.n	8006208 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fc fcb3 	bl	8002b5c <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e10d      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006208:	4b5f      	ldr	r3, [pc, #380]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ee      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8102 	beq.w	8006422 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800621e:	4b5a      	ldr	r3, [pc, #360]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006226:	2b18      	cmp	r3, #24
 8006228:	f000 80bd 	beq.w	80063a6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b02      	cmp	r3, #2
 8006232:	f040 8095 	bne.w	8006360 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006236:	4b54      	ldr	r3, [pc, #336]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a53      	ldr	r2, [pc, #332]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800623c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fc fc8b 	bl	8002b5c <HAL_GetTick>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624a:	f7fc fc87 	bl	8002b5c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e0e3      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800625c:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f0      	bne.n	800624a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006268:	4b47      	ldr	r3, [pc, #284]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800626a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800626c:	4b48      	ldr	r3, [pc, #288]	; (8006390 <HAL_RCC_OscConfig+0x7b8>)
 800626e:	4013      	ands	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006278:	0112      	lsls	r2, r2, #4
 800627a:	430a      	orrs	r2, r1
 800627c:	4942      	ldr	r1, [pc, #264]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800627e:	4313      	orrs	r3, r2
 8006280:	628b      	str	r3, [r1, #40]	; 0x28
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	3b01      	subs	r3, #1
 8006288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006290:	3b01      	subs	r3, #1
 8006292:	025b      	lsls	r3, r3, #9
 8006294:	b29b      	uxth	r3, r3
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	3b01      	subs	r3, #1
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	3b01      	subs	r3, #1
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062b2:	4935      	ldr	r1, [pc, #212]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062b8:	4b33      	ldr	r3, [pc, #204]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4a32      	ldr	r2, [pc, #200]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062c4:	4b30      	ldr	r3, [pc, #192]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c8:	4b32      	ldr	r3, [pc, #200]	; (8006394 <HAL_RCC_OscConfig+0x7bc>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062d0:	00d2      	lsls	r2, r2, #3
 80062d2:	492d      	ldr	r1, [pc, #180]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062d8:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	f023 020c 	bic.w	r2, r3, #12
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	4928      	ldr	r1, [pc, #160]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062ea:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	f023 0202 	bic.w	r2, r3, #2
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	4924      	ldr	r1, [pc, #144]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a21      	ldr	r2, [pc, #132]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006314:	4b1c      	ldr	r3, [pc, #112]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800631a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800631e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006320:	4b19      	ldr	r3, [pc, #100]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a18      	ldr	r2, [pc, #96]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a15      	ldr	r2, [pc, #84]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fc fc10 	bl	8002b5c <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006340:	f7fc fc0c 	bl	8002b5c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e068      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0x768>
 800635e:	e060      	b.n	8006422 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006360:	4b09      	ldr	r3, [pc, #36]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a08      	ldr	r2, [pc, #32]	; (8006388 <HAL_RCC_OscConfig+0x7b0>)
 8006366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fc fbf6 	bl	8002b5c <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006372:	e011      	b.n	8006398 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006374:	f7fc fbf2 	bl	8002b5c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d90a      	bls.n	8006398 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e04e      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400
 800638c:	58024800 	.word	0x58024800
 8006390:	fffffc0c 	.word	0xfffffc0c
 8006394:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <HAL_RCC_OscConfig+0x854>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e7      	bne.n	8006374 <HAL_RCC_OscConfig+0x79c>
 80063a4:	e03d      	b.n	8006422 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063a6:	4b21      	ldr	r3, [pc, #132]	; (800642c <HAL_RCC_OscConfig+0x854>)
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063ac:	4b1f      	ldr	r3, [pc, #124]	; (800642c <HAL_RCC_OscConfig+0x854>)
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d031      	beq.n	800641e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f003 0203 	and.w	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d12a      	bne.n	800641e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d122      	bne.n	800641e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d11a      	bne.n	800641e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d111      	bne.n	800641e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d108      	bne.n	800641e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	0e1b      	lsrs	r3, r3, #24
 8006410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d001      	beq.n	8006422 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3730      	adds	r7, #48	; 0x30
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	58024400 	.word	0x58024400

08006430 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e19c      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006444:	4b8a      	ldr	r3, [pc, #552]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d910      	bls.n	8006474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b87      	ldr	r3, [pc, #540]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 020f 	bic.w	r2, r3, #15
 800645a:	4985      	ldr	r1, [pc, #532]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006462:	4b83      	ldr	r3, [pc, #524]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d001      	beq.n	8006474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e184      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d010      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	4b7b      	ldr	r3, [pc, #492]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800648c:	429a      	cmp	r2, r3
 800648e:	d908      	bls.n	80064a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006490:	4b78      	ldr	r3, [pc, #480]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	4975      	ldr	r1, [pc, #468]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d010      	beq.n	80064d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	4b70      	ldr	r3, [pc, #448]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d908      	bls.n	80064d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064be:	4b6d      	ldr	r3, [pc, #436]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	496a      	ldr	r1, [pc, #424]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d010      	beq.n	80064fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	4b64      	ldr	r3, [pc, #400]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d908      	bls.n	80064fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064ec:	4b61      	ldr	r3, [pc, #388]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	495e      	ldr	r1, [pc, #376]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d010      	beq.n	800652c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	4b59      	ldr	r3, [pc, #356]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006516:	429a      	cmp	r2, r3
 8006518:	d908      	bls.n	800652c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800651a:	4b56      	ldr	r3, [pc, #344]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	4953      	ldr	r1, [pc, #332]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006528:	4313      	orrs	r3, r2
 800652a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	429a      	cmp	r2, r3
 8006546:	d908      	bls.n	800655a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	4b4a      	ldr	r3, [pc, #296]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f023 020f 	bic.w	r2, r3, #15
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4947      	ldr	r1, [pc, #284]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006556:	4313      	orrs	r3, r2
 8006558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d055      	beq.n	8006612 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006566:	4b43      	ldr	r3, [pc, #268]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4940      	ldr	r1, [pc, #256]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006574:	4313      	orrs	r3, r2
 8006576:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d107      	bne.n	8006590 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006580:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d121      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0f6      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b03      	cmp	r3, #3
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d115      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0ea      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065b0:	4b30      	ldr	r3, [pc, #192]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0de      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c0:	4b2c      	ldr	r3, [pc, #176]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0d6      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065d0:	4b28      	ldr	r3, [pc, #160]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f023 0207 	bic.w	r2, r3, #7
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4925      	ldr	r1, [pc, #148]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e2:	f7fc fabb 	bl	8002b5c <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e8:	e00a      	b.n	8006600 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ea:	f7fc fab7 	bl	8002b5c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0be      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	429a      	cmp	r2, r3
 8006610:	d1eb      	bne.n	80065ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d010      	beq.n	8006640 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	429a      	cmp	r2, r3
 800662c:	d208      	bcs.n	8006640 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f023 020f 	bic.w	r2, r3, #15
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	490e      	ldr	r1, [pc, #56]	; (8006674 <HAL_RCC_ClockConfig+0x244>)
 800663c:	4313      	orrs	r3, r2
 800663e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d214      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b08      	ldr	r3, [pc, #32]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 020f 	bic.w	r2, r3, #15
 8006656:	4906      	ldr	r1, [pc, #24]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <HAL_RCC_ClockConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d005      	beq.n	8006678 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e086      	b.n	800677e <HAL_RCC_ClockConfig+0x34e>
 8006670:	52002000 	.word	0x52002000
 8006674:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	4b3f      	ldr	r3, [pc, #252]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006690:	429a      	cmp	r2, r3
 8006692:	d208      	bcs.n	80066a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006694:	4b3c      	ldr	r3, [pc, #240]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	4939      	ldr	r1, [pc, #228]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	4b34      	ldr	r3, [pc, #208]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066be:	429a      	cmp	r2, r3
 80066c0:	d208      	bcs.n	80066d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066c2:	4b31      	ldr	r3, [pc, #196]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	492e      	ldr	r1, [pc, #184]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	4b28      	ldr	r3, [pc, #160]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d208      	bcs.n	8006702 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066f0:	4b25      	ldr	r3, [pc, #148]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4922      	ldr	r1, [pc, #136]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d010      	beq.n	8006730 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800671a:	429a      	cmp	r2, r3
 800671c:	d208      	bcs.n	8006730 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800671e:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	4917      	ldr	r1, [pc, #92]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 800672c:	4313      	orrs	r3, r2
 800672e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006730:	f000 f834 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	4912      	ldr	r1, [pc, #72]	; (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <HAL_RCC_ClockConfig+0x358>)
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	4a0d      	ldr	r2, [pc, #52]	; (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006758:	5cd3      	ldrb	r3, [r2, r3]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
 8006764:	4a0a      	ldr	r2, [pc, #40]	; (8006790 <HAL_RCC_ClockConfig+0x360>)
 8006766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x364>)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <HAL_RCC_ClockConfig+0x368>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f7fc f9a8 	bl	8002ac8 <HAL_InitTick>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	0800afb8 	.word	0x0800afb8
 8006790:	24000004 	.word	0x24000004
 8006794:	24000000 	.word	0x24000000
 8006798:	240000a0 	.word	0x240000a0

0800679c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067a2:	4bb3      	ldr	r3, [pc, #716]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067aa:	2b18      	cmp	r3, #24
 80067ac:	f200 8155 	bhi.w	8006a5a <HAL_RCC_GetSysClockFreq+0x2be>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	0800681d 	.word	0x0800681d
 80067bc:	08006a5b 	.word	0x08006a5b
 80067c0:	08006a5b 	.word	0x08006a5b
 80067c4:	08006a5b 	.word	0x08006a5b
 80067c8:	08006a5b 	.word	0x08006a5b
 80067cc:	08006a5b 	.word	0x08006a5b
 80067d0:	08006a5b 	.word	0x08006a5b
 80067d4:	08006a5b 	.word	0x08006a5b
 80067d8:	08006843 	.word	0x08006843
 80067dc:	08006a5b 	.word	0x08006a5b
 80067e0:	08006a5b 	.word	0x08006a5b
 80067e4:	08006a5b 	.word	0x08006a5b
 80067e8:	08006a5b 	.word	0x08006a5b
 80067ec:	08006a5b 	.word	0x08006a5b
 80067f0:	08006a5b 	.word	0x08006a5b
 80067f4:	08006a5b 	.word	0x08006a5b
 80067f8:	08006849 	.word	0x08006849
 80067fc:	08006a5b 	.word	0x08006a5b
 8006800:	08006a5b 	.word	0x08006a5b
 8006804:	08006a5b 	.word	0x08006a5b
 8006808:	08006a5b 	.word	0x08006a5b
 800680c:	08006a5b 	.word	0x08006a5b
 8006810:	08006a5b 	.word	0x08006a5b
 8006814:	08006a5b 	.word	0x08006a5b
 8006818:	0800684f 	.word	0x0800684f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800681c:	4b94      	ldr	r3, [pc, #592]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006828:	4b91      	ldr	r3, [pc, #580]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	08db      	lsrs	r3, r3, #3
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	4a90      	ldr	r2, [pc, #576]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800683a:	e111      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800683c:	4b8d      	ldr	r3, [pc, #564]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800683e:	61bb      	str	r3, [r7, #24]
    break;
 8006840:	e10e      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006842:	4b8d      	ldr	r3, [pc, #564]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006844:	61bb      	str	r3, [r7, #24]
    break;
 8006846:	e10b      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006848:	4b8c      	ldr	r3, [pc, #560]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800684a:	61bb      	str	r3, [r7, #24]
    break;
 800684c:	e108      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800684e:	4b88      	ldr	r3, [pc, #544]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006858:	4b85      	ldr	r3, [pc, #532]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006862:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006864:	4b82      	ldr	r3, [pc, #520]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800686e:	4b80      	ldr	r3, [pc, #512]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006872:	08db      	lsrs	r3, r3, #3
 8006874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80e1 	beq.w	8006a54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b02      	cmp	r3, #2
 8006896:	f000 8083 	beq.w	80069a0 <HAL_RCC_GetSysClockFreq+0x204>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b02      	cmp	r3, #2
 800689e:	f200 80a1 	bhi.w	80069e4 <HAL_RCC_GetSysClockFreq+0x248>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x114>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d056      	beq.n	800695c <HAL_RCC_GetSysClockFreq+0x1c0>
 80068ae:	e099      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b0:	4b6f      	ldr	r3, [pc, #444]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02d      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068bc:	4b6c      	ldr	r3, [pc, #432]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	4a6b      	ldr	r2, [pc, #428]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006916:	e087      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692a:	4b51      	ldr	r3, [pc, #324]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693a:	ed97 6a02 	vldr	s12, [r7, #8]
 800693e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800694e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800695a:	e065      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006966:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800696a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696e:	4b40      	ldr	r3, [pc, #256]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006982:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800699e:	e043      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a8c <HAL_RCC_GetSysClockFreq+0x2f0>
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069e2:	e021      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a28:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	0a5b      	lsrs	r3, r3, #9
 8006a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a32:	3301      	adds	r3, #1
 8006a34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a4c:	ee17 3a90 	vmov	r3, s15
 8006a50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a52:	e005      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61bb      	str	r3, [r7, #24]
    break;
 8006a58:	e002      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a5c:	61bb      	str	r3, [r7, #24]
    break;
 8006a5e:	bf00      	nop
  }

  return sysclockfreq;
 8006a60:	69bb      	ldr	r3, [r7, #24]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3724      	adds	r7, #36	; 0x24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	58024400 	.word	0x58024400
 8006a74:	03d09000 	.word	0x03d09000
 8006a78:	003d0900 	.word	0x003d0900
 8006a7c:	007a1200 	.word	0x007a1200
 8006a80:	46000000 	.word	0x46000000
 8006a84:	4c742400 	.word	0x4c742400
 8006a88:	4a742400 	.word	0x4a742400
 8006a8c:	4af42400 	.word	0x4af42400

08006a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a96:	f7ff fe81 	bl	800679c <HAL_RCC_GetSysClockFreq>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	490f      	ldr	r1, [pc, #60]	; (8006ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006aa8:	5ccb      	ldrb	r3, [r1, r3]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006abe:	5cd3      	ldrb	r3, [r2, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aca:	4a07      	ldr	r2, [pc, #28]	; (8006ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006acc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ace:	4a07      	ldr	r2, [pc, #28]	; (8006aec <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ad4:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	0800afb8 	.word	0x0800afb8
 8006ae8:	24000004 	.word	0x24000004
 8006aec:	24000000 	.word	0x24000000

08006af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006af4:	f7ff ffcc 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	4904      	ldr	r1, [pc, #16]	; (8006b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b06:	5ccb      	ldrb	r3, [r1, r3]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	58024400 	.word	0x58024400
 8006b18:	0800afb8 	.word	0x0800afb8

08006b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b20:	f7ff ffb6 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006b24:	4602      	mov	r2, r0
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	4904      	ldr	r1, [pc, #16]	; (8006b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b32:	5ccb      	ldrb	r3, [r1, r3]
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	58024400 	.word	0x58024400
 8006b44:	0800afb8 	.word	0x0800afb8

08006b48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b50:	2300      	movs	r3, #0
 8006b52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b54:	2300      	movs	r3, #0
 8006b56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03f      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b6c:	d02a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b72:	d824      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b78:	d018      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b7e:	d81e      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b88:	d007      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b8a:	e018      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4bab      	ldr	r3, [pc, #684]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4aaa      	ldr	r2, [pc, #680]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b98:	e015      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2102      	movs	r1, #2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f9cf 	bl	8007f44 <RCCEx_PLL2_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006baa:	e00c      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3324      	adds	r3, #36	; 0x24
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fa78 	bl	80080a8 <RCCEx_PLL3_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bbc:	e003      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bcc:	4b9b      	ldr	r3, [pc, #620]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd8:	4998      	ldr	r1, [pc, #608]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8006bde:	e001      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d03d      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d826      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c15 	.word	0x08006c15
 8006c04:	08006c23 	.word	0x08006c23
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	08006c4d 	.word	0x08006c4d
 8006c10:	08006c4d 	.word	0x08006c4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b89      	ldr	r3, [pc, #548]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a88      	ldr	r2, [pc, #544]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c20:	e015      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f98b 	bl	8007f44 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c32:	e00c      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3324      	adds	r3, #36	; 0x24
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 fa34 	bl	80080a8 <RCCEx_PLL3_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c44:	e003      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	e000      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c54:	4b79      	ldr	r3, [pc, #484]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c58:	f023 0207 	bic.w	r2, r3, #7
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	4976      	ldr	r1, [pc, #472]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	650b      	str	r3, [r1, #80]	; 0x50
 8006c66:	e001      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d042      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c80:	d02b      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d825      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c88:	2bc0      	cmp	r3, #192	; 0xc0
 8006c8a:	d028      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c8c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c8e:	d821      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d016      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d81d      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d007      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ca0:	e018      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca2:	4b66      	ldr	r3, [pc, #408]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	4a65      	ldr	r2, [pc, #404]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cae:	e017      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 f944 	bl	8007f44 <RCCEx_PLL2_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cc0:	e00e      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3324      	adds	r3, #36	; 0x24
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 f9ed 	bl	80080a8 <RCCEx_PLL3_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cd2:	e005      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ce6:	4b55      	ldr	r3, [pc, #340]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf2:	4952      	ldr	r1, [pc, #328]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	650b      	str	r3, [r1, #80]	; 0x50
 8006cf8:	e001      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d049      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d14:	d030      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d1a:	d82a      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d20:	d02c      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d26:	d824      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d2c:	d018      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d32:	d81e      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d3c:	d007      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d3e:	e018      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d40:	4b3e      	ldr	r3, [pc, #248]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4a3d      	ldr	r2, [pc, #244]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d4c:	e017      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f8f5 	bl	8007f44 <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d5e:	e00e      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	2100      	movs	r1, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 f99e 	bl	80080a8 <RCCEx_PLL3_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d70:	e005      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
      break;
 8006d76:	e002      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d92:	492a      	ldr	r1, [pc, #168]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	658b      	str	r3, [r1, #88]	; 0x58
 8006d98:	e001      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04c      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db4:	d030      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dba:	d82a      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006dbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dc0:	d02c      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006dc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dc6:	d824      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dcc:	d018      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dd2:	d81e      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ddc:	d007      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006dde:	e018      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de0:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dec:	e017      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 f8a5 	bl	8007f44 <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dfe:	e00e      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 f94e 	bl	80080a8 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
      break;
 8006e16:	e002      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10d      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e32:	4902      	ldr	r1, [pc, #8]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	658b      	str	r3, [r1, #88]	; 0x58
 8006e38:	e004      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d032      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e54:	2b30      	cmp	r3, #48	; 0x30
 8006e56:	d01c      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e58:	2b30      	cmp	r3, #48	; 0x30
 8006e5a:	d817      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d00c      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d813      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d016      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d10f      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6c:	4baf      	ldr	r3, [pc, #700]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4aae      	ldr	r2, [pc, #696]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e78:	e00e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2102      	movs	r1, #2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f85f 	bl	8007f44 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e8a:	e005      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e9e:	4ba3      	ldr	r3, [pc, #652]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	49a0      	ldr	r1, [pc, #640]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eb0:	e001      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d047      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d030      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed0:	d82a      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ed6:	d02c      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006ed8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006edc:	d824      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee2:	d018      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee8:	d81e      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d007      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006ef4:	e018      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef6:	4b8d      	ldr	r3, [pc, #564]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	4a8c      	ldr	r2, [pc, #560]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f02:	e017      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f81a 	bl	8007f44 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f14:	e00e      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3324      	adds	r3, #36	; 0x24
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f8c3 	bl	80080a8 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f26:	e005      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2c:	e002      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f3a:	4b7c      	ldr	r3, [pc, #496]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	4979      	ldr	r1, [pc, #484]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	650b      	str	r3, [r1, #80]	; 0x50
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d049      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f66:	d02e      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f6c:	d828      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f72:	d02a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f78:	d822      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f7e:	d026      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f84:	d81c      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8a:	d010      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f90:	d816      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01d      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9a:	d111      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 ffce 	bl	8007f44 <RCCEx_PLL2_Config>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fac:	e012      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3324      	adds	r3, #36	; 0x24
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f877 	bl	80080a8 <RCCEx_PLL3_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fbe:	e009      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc4:	e006      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fc6:	bf00      	nop
 8006fc8:	e004      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fda:	4b54      	ldr	r3, [pc, #336]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe6:	4951      	ldr	r1, [pc, #324]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	650b      	str	r3, [r1, #80]	; 0x50
 8006fec:	e001      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d04b      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007008:	d02e      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800700a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700e:	d828      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d02a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701a:	d822      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800701c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007020:	d026      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007026:	d81c      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702c:	d010      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007032:	d816      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01d      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800703c:	d111      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3304      	adds	r3, #4
 8007042:	2101      	movs	r1, #1
 8007044:	4618      	mov	r0, r3
 8007046:	f000 ff7d 	bl	8007f44 <RCCEx_PLL2_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800704e:	e012      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f001 f826 	bl	80080a8 <RCCEx_PLL3_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007060:	e009      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	e006      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007068:	bf00      	nop
 800706a:	e004      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800707c:	4b2b      	ldr	r3, [pc, #172]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800708a:	4928      	ldr	r1, [pc, #160]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800708c:	4313      	orrs	r3, r2
 800708e:	658b      	str	r3, [r1, #88]	; 0x58
 8007090:	e001      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d02f      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070aa:	d00e      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 80070ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b0:	d814      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d015      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80070b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ba:	d10f      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070bc:	4b1b      	ldr	r3, [pc, #108]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070c8:	e00c      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2101      	movs	r1, #1
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 ff37 	bl	8007f44 <RCCEx_PLL2_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070da:	e003      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      break;
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80070e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070ea:	4b10      	ldr	r3, [pc, #64]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f6:	490d      	ldr	r1, [pc, #52]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	650b      	str	r3, [r1, #80]	; 0x50
 80070fc:	e001      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d033      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	2b03      	cmp	r3, #3
 8007114:	d81c      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007157 	.word	0x08007157
 8007120:	08007131 	.word	0x08007131
 8007124:	0800713f 	.word	0x0800713f
 8007128:	08007157 	.word	0x08007157
 800712c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007130:	4bb8      	ldr	r3, [pc, #736]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4ab7      	ldr	r2, [pc, #732]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800713c:	e00c      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	2102      	movs	r1, #2
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fefd 	bl	8007f44 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	75fb      	strb	r3, [r7, #23]
      break;
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800715e:	4bad      	ldr	r3, [pc, #692]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	f023 0203 	bic.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	49aa      	ldr	r1, [pc, #680]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800716c:	4313      	orrs	r3, r2
 800716e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007170:	e001      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8086 	beq.w	8007290 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007184:	4ba4      	ldr	r3, [pc, #656]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4aa3      	ldr	r2, [pc, #652]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800718a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007190:	f7fb fce4 	bl	8002b5c <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007196:	e009      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007198:	f7fb fce0 	bl	8002b5c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d902      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	75fb      	strb	r3, [r7, #23]
        break;
 80071aa:	e005      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ac:	4b9a      	ldr	r3, [pc, #616]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ef      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d166      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071be:	4b95      	ldr	r3, [pc, #596]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c8:	4053      	eors	r3, r2
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d013      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071d2:	4b90      	ldr	r3, [pc, #576]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071dc:	4b8d      	ldr	r3, [pc, #564]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a8c      	ldr	r2, [pc, #560]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071e8:	4b8a      	ldr	r3, [pc, #552]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a89      	ldr	r2, [pc, #548]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071f4:	4a87      	ldr	r2, [pc, #540]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007204:	d115      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007206:	f7fb fca9 	bl	8002b5c <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800720c:	e00b      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fb fca5 	bl	8002b5c <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d902      	bls.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	75fb      	strb	r3, [r7, #23]
            break;
 8007224:	e005      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007226:	4b7b      	ldr	r3, [pc, #492]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0ed      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d126      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800723e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007246:	d10d      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007248:	4b72      	ldr	r3, [pc, #456]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007256:	0919      	lsrs	r1, r3, #4
 8007258:	4b70      	ldr	r3, [pc, #448]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800725a:	400b      	ands	r3, r1
 800725c:	496d      	ldr	r1, [pc, #436]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800725e:	4313      	orrs	r3, r2
 8007260:	610b      	str	r3, [r1, #16]
 8007262:	e005      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007264:	4b6b      	ldr	r3, [pc, #428]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4a6a      	ldr	r2, [pc, #424]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800726a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800726e:	6113      	str	r3, [r2, #16]
 8007270:	4b68      	ldr	r3, [pc, #416]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800727a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800727e:	4965      	ldr	r1, [pc, #404]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007280:	4313      	orrs	r3, r2
 8007282:	670b      	str	r3, [r1, #112]	; 0x70
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	75bb      	strb	r3, [r7, #22]
 800728a:	e001      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d07e      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a0:	2b28      	cmp	r3, #40	; 0x28
 80072a2:	d867      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	0800737b 	.word	0x0800737b
 80072b0:	08007375 	.word	0x08007375
 80072b4:	08007375 	.word	0x08007375
 80072b8:	08007375 	.word	0x08007375
 80072bc:	08007375 	.word	0x08007375
 80072c0:	08007375 	.word	0x08007375
 80072c4:	08007375 	.word	0x08007375
 80072c8:	08007375 	.word	0x08007375
 80072cc:	08007351 	.word	0x08007351
 80072d0:	08007375 	.word	0x08007375
 80072d4:	08007375 	.word	0x08007375
 80072d8:	08007375 	.word	0x08007375
 80072dc:	08007375 	.word	0x08007375
 80072e0:	08007375 	.word	0x08007375
 80072e4:	08007375 	.word	0x08007375
 80072e8:	08007375 	.word	0x08007375
 80072ec:	08007363 	.word	0x08007363
 80072f0:	08007375 	.word	0x08007375
 80072f4:	08007375 	.word	0x08007375
 80072f8:	08007375 	.word	0x08007375
 80072fc:	08007375 	.word	0x08007375
 8007300:	08007375 	.word	0x08007375
 8007304:	08007375 	.word	0x08007375
 8007308:	08007375 	.word	0x08007375
 800730c:	0800737b 	.word	0x0800737b
 8007310:	08007375 	.word	0x08007375
 8007314:	08007375 	.word	0x08007375
 8007318:	08007375 	.word	0x08007375
 800731c:	08007375 	.word	0x08007375
 8007320:	08007375 	.word	0x08007375
 8007324:	08007375 	.word	0x08007375
 8007328:	08007375 	.word	0x08007375
 800732c:	0800737b 	.word	0x0800737b
 8007330:	08007375 	.word	0x08007375
 8007334:	08007375 	.word	0x08007375
 8007338:	08007375 	.word	0x08007375
 800733c:	08007375 	.word	0x08007375
 8007340:	08007375 	.word	0x08007375
 8007344:	08007375 	.word	0x08007375
 8007348:	08007375 	.word	0x08007375
 800734c:	0800737b 	.word	0x0800737b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fdf4 	bl	8007f44 <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007360:	e00c      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3324      	adds	r3, #36	; 0x24
 8007366:	2101      	movs	r1, #1
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fe9d 	bl	80080a8 <RCCEx_PLL3_Config>
 800736e:	4603      	mov	r3, r0
 8007370:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007372:	e003      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
      break;
 8007378:	e000      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800737a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800738e:	4921      	ldr	r1, [pc, #132]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007390:	4313      	orrs	r3, r2
 8007392:	654b      	str	r3, [r1, #84]	; 0x54
 8007394:	e001      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d03e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d820      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073f7 	.word	0x080073f7
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073df 	.word	0x080073df
 80073c0:	080073f7 	.word	0x080073f7
 80073c4:	080073f7 	.word	0x080073f7
 80073c8:	080073f7 	.word	0x080073f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3304      	adds	r3, #4
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fdb6 	bl	8007f44 <RCCEx_PLL2_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073dc:	e00c      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3324      	adds	r3, #36	; 0x24
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fe5f 	bl	80080a8 <RCCEx_PLL3_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
      break;
 80073f4:	e000      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80073f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d110      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	f023 0207 	bic.w	r2, r3, #7
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	4902      	ldr	r1, [pc, #8]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800740c:	4313      	orrs	r3, r2
 800740e:	654b      	str	r3, [r1, #84]	; 0x54
 8007410:	e008      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
 8007418:	58024800 	.word	0x58024800
 800741c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d039      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007436:	2b05      	cmp	r3, #5
 8007438:	d820      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007483 	.word	0x08007483
 8007444:	08007459 	.word	0x08007459
 8007448:	0800746b 	.word	0x0800746b
 800744c:	08007483 	.word	0x08007483
 8007450:	08007483 	.word	0x08007483
 8007454:	08007483 	.word	0x08007483
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fd70 	bl	8007f44 <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007468:	e00c      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	2101      	movs	r1, #1
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fe19 	bl	80080a8 <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800747a:	e003      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	e000      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800748a:	4bb7      	ldr	r3, [pc, #732]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	f023 0207 	bic.w	r2, r3, #7
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007498:	49b3      	ldr	r1, [pc, #716]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800749a:	4313      	orrs	r3, r2
 800749c:	658b      	str	r3, [r1, #88]	; 0x58
 800749e:	e001      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d04b      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ba:	d02e      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80074bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074c0:	d828      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c6:	d02a      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d822      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074d2:	d026      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80074d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074d8:	d81c      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074de:	d010      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d816      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01d      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80074ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ee:	d111      	bne.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fd24 	bl	8007f44 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007500:	e012      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3324      	adds	r3, #36	; 0x24
 8007506:	2102      	movs	r1, #2
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fdcd 	bl	80080a8 <RCCEx_PLL3_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007512:	e009      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	75fb      	strb	r3, [r7, #23]
      break;
 8007518:	e006      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800751a:	bf00      	nop
 800751c:	e004      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800752e:	4b8e      	ldr	r3, [pc, #568]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800753c:	498a      	ldr	r1, [pc, #552]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800753e:	4313      	orrs	r3, r2
 8007540:	654b      	str	r3, [r1, #84]	; 0x54
 8007542:	e001      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d04b      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800755a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800755e:	d02e      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007560:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007564:	d828      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d02a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d822      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007576:	d026      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800757c:	d81c      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800757e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007582:	d010      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007588:	d816      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01d      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800758e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007592:	d111      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fcd2 	bl	8007f44 <RCCEx_PLL2_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075a4:	e012      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3324      	adds	r3, #36	; 0x24
 80075aa:	2102      	movs	r1, #2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fd7b 	bl	80080a8 <RCCEx_PLL3_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075b6:	e009      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
      break;
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075be:	bf00      	nop
 80075c0:	e004      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075d2:	4b65      	ldr	r3, [pc, #404]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075e0:	4961      	ldr	r1, [pc, #388]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	658b      	str	r3, [r1, #88]	; 0x58
 80075e6:	e001      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d04b      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007602:	d02e      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007604:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007608:	d828      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800760a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760e:	d02a      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007614:	d822      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007616:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800761a:	d026      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800761c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007620:	d81c      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007626:	d010      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762c:	d816      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01d      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007636:	d111      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fc80 	bl	8007f44 <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007648:	e012      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3324      	adds	r3, #36	; 0x24
 800764e:	2102      	movs	r1, #2
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fd29 	bl	80080a8 <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800765a:	e009      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	e006      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007662:	bf00      	nop
 8007664:	e004      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007666:	bf00      	nop
 8007668:	e002      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800766e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007676:	4b3c      	ldr	r3, [pc, #240]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007684:	4938      	ldr	r1, [pc, #224]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007686:	4313      	orrs	r3, r2
 8007688:	658b      	str	r3, [r1, #88]	; 0x58
 800768a:	e001      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d10a      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	2102      	movs	r1, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fcfa 	bl	80080a8 <RCCEx_PLL3_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076be:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076cc:	4926      	ldr	r1, [pc, #152]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e8:	d10a      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fcd9 	bl	80080a8 <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007700:	4b19      	ldr	r3, [pc, #100]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770e:	4916      	ldr	r1, [pc, #88]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007710:	4313      	orrs	r3, r2
 8007712:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d036      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800772a:	d01f      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800772c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007730:	d817      	bhi.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773a:	d009      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800773c:	e011      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3304      	adds	r3, #4
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fbfd 	bl	8007f44 <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800774e:	e00e      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	2102      	movs	r1, #2
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fca6 	bl	80080a8 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007760:	e005      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
      break;
 8007766:	e002      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007768:	58024400 	.word	0x58024400
      break;
 800776c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007774:	4b93      	ldr	r3, [pc, #588]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007782:	4990      	ldr	r1, [pc, #576]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	658b      	str	r3, [r1, #88]	; 0x58
 8007788:	e001      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d033      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077a4:	d01c      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80077a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077aa:	d816      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80077ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b0:	d003      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80077b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077b6:	d007      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80077b8:	e00f      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ba:	4b82      	ldr	r3, [pc, #520]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	4a81      	ldr	r2, [pc, #516]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80077c6:	e00c      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3324      	adds	r3, #36	; 0x24
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fc6a 	bl	80080a8 <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	75fb      	strb	r3, [r7, #23]
      break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80077e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077e8:	4b76      	ldr	r3, [pc, #472]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f6:	4973      	ldr	r1, [pc, #460]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	654b      	str	r3, [r1, #84]	; 0x54
 80077fc:	e001      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d029      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781a:	d007      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800781c:	e00f      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781e:	4b69      	ldr	r3, [pc, #420]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	4a68      	ldr	r2, [pc, #416]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800782a:	e00b      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	2102      	movs	r1, #2
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fb86 	bl	8007f44 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800783c:	e002      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
      break;
 8007842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800784a:	4b5e      	ldr	r3, [pc, #376]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	495b      	ldr	r1, [pc, #364]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800785c:	e001      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3324      	adds	r3, #36	; 0x24
 8007872:	2102      	movs	r1, #2
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fc17 	bl	80080a8 <RCCEx_PLL3_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d030      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007898:	d017      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800789a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789e:	d811      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a4:	d013      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80078a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078aa:	d80b      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80078b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b4:	d106      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b6:	4b43      	ldr	r3, [pc, #268]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a42      	ldr	r2, [pc, #264]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80078c2:	e007      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
      break;
 80078c8:	e004      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078ca:	bf00      	nop
 80078cc:	e002      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078da:	4b3a      	ldr	r3, [pc, #232]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e6:	4937      	ldr	r1, [pc, #220]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	654b      	str	r3, [r1, #84]	; 0x54
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078fe:	4b31      	ldr	r3, [pc, #196]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	492e      	ldr	r1, [pc, #184]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800791c:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800792a:	4926      	ldr	r1, [pc, #152]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800793c:	4b21      	ldr	r3, [pc, #132]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007948:	491e      	ldr	r1, [pc, #120]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800794a:	4313      	orrs	r3, r2
 800794c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800795a:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007964:	6113      	str	r3, [r2, #16]
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007970:	4914      	ldr	r1, [pc, #80]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007972:	4313      	orrs	r3, r2
 8007974:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	da08      	bge.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798a:	490e      	ldr	r1, [pc, #56]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800798c:	4313      	orrs	r3, r2
 800798e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079aa:	4906      	ldr	r1, [pc, #24]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80079b0:	7dbb      	ldrb	r3, [r7, #22]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e000      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	58024400 	.word	0x58024400

080079c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079cc:	f7ff f860 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 80079d0:	4602      	mov	r2, r0
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	4904      	ldr	r1, [pc, #16]	; (80079f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079de:	5ccb      	ldrb	r3, [r1, r3]
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	58024400 	.word	0x58024400
 80079f0:	0800afb8 	.word	0x0800afb8

080079f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079fc:	4ba1      	ldr	r3, [pc, #644]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a06:	4b9f      	ldr	r3, [pc, #636]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	0b1b      	lsrs	r3, r3, #12
 8007a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a12:	4b9c      	ldr	r3, [pc, #624]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a1e:	4b99      	ldr	r3, [pc, #612]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	08db      	lsrs	r3, r3, #3
 8007a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8111 	beq.w	8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	f000 8083 	beq.w	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	f200 80a1 	bhi.w	8007b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d056      	beq.n	8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a5e:	e099      	b.n	8007b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a60:	4b88      	ldr	r3, [pc, #544]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d02d      	beq.n	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a6c:	4b85      	ldr	r3, [pc, #532]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	08db      	lsrs	r3, r3, #3
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	4a84      	ldr	r2, [pc, #528]	; (8007c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b7b      	ldr	r3, [pc, #492]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ac6:	e087      	b.n	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ada:	4b6a      	ldr	r3, [pc, #424]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b0a:	e065      	b.n	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1e:	4b59      	ldr	r3, [pc, #356]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b4e:	e043      	b.n	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b48      	ldr	r3, [pc, #288]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b92:	e021      	b.n	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bd8:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	0a5b      	lsrs	r3, r3, #9
 8007bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bfe:	ee17 2a90 	vmov	r2, s15
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c06:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	0c1b      	lsrs	r3, r3, #16
 8007c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2c:	ee17 2a90 	vmov	r2, s15
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c34:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5a:	ee17 2a90 	vmov	r2, s15
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c62:	e008      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	609a      	str	r2, [r3, #8]
}
 8007c76:	bf00      	nop
 8007c78:	3724      	adds	r7, #36	; 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	46000000 	.word	0x46000000
 8007c90:	4c742400 	.word	0x4c742400
 8007c94:	4a742400 	.word	0x4a742400
 8007c98:	4af42400 	.word	0x4af42400

08007c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	; 0x24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ca4:	4ba1      	ldr	r3, [pc, #644]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	f003 0303 	and.w	r3, r3, #3
 8007cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007cae:	4b9f      	ldr	r3, [pc, #636]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	0d1b      	lsrs	r3, r3, #20
 8007cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007cba:	4b9c      	ldr	r3, [pc, #624]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cc6:	4b99      	ldr	r3, [pc, #612]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8111 	beq.w	8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	f000 8083 	beq.w	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	f200 80a1 	bhi.w	8007e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d056      	beq.n	8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d06:	e099      	b.n	8007e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d08:	4b88      	ldr	r3, [pc, #544]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02d      	beq.n	8007d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d14:	4b85      	ldr	r3, [pc, #532]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	08db      	lsrs	r3, r3, #3
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	4a84      	ldr	r2, [pc, #528]	; (8007f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
 8007d24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b7b      	ldr	r3, [pc, #492]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d6e:	e087      	b.n	8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d82:	4b6a      	ldr	r3, [pc, #424]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db2:	e065      	b.n	8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc6:	4b59      	ldr	r3, [pc, #356]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007df6:	e043      	b.n	8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0a:	4b48      	ldr	r3, [pc, #288]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e3a:	e021      	b.n	8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4e:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e80:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	0a5b      	lsrs	r3, r3, #9
 8007e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea6:	ee17 2a90 	vmov	r2, s15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007eae:	4b1f      	ldr	r3, [pc, #124]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed4:	ee17 2a90 	vmov	r2, s15
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007edc:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	0e1b      	lsrs	r3, r3, #24
 8007ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f02:	ee17 2a90 	vmov	r2, s15
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f0a:	e008      	b.n	8007f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
}
 8007f1e:	bf00      	nop
 8007f20:	3724      	adds	r7, #36	; 0x24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	03d09000 	.word	0x03d09000
 8007f34:	46000000 	.word	0x46000000
 8007f38:	4c742400 	.word	0x4c742400
 8007f3c:	4a742400 	.word	0x4a742400
 8007f40:	4af42400 	.word	0x4af42400

08007f44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f52:	4b53      	ldr	r3, [pc, #332]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d101      	bne.n	8007f62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e099      	b.n	8008096 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f62:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a4e      	ldr	r2, [pc, #312]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f6e:	f7fa fdf5 	bl	8002b5c <HAL_GetTick>
 8007f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f74:	e008      	b.n	8007f88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f76:	f7fa fdf1 	bl	8002b5c <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e086      	b.n	8008096 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f88:	4b45      	ldr	r3, [pc, #276]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1f0      	bne.n	8007f76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f94:	4b42      	ldr	r3, [pc, #264]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	031b      	lsls	r3, r3, #12
 8007fa2:	493f      	ldr	r1, [pc, #252]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	025b      	lsls	r3, r3, #9
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fd8:	4931      	ldr	r1, [pc, #196]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fde:	4b30      	ldr	r3, [pc, #192]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	492d      	ldr	r1, [pc, #180]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	f023 0220 	bic.w	r2, r3, #32
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	4928      	ldr	r1, [pc, #160]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008002:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008008:	f023 0310 	bic.w	r3, r3, #16
 800800c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800800e:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008012:	4b24      	ldr	r3, [pc, #144]	; (80080a4 <RCCEx_PLL2_Config+0x160>)
 8008014:	4013      	ands	r3, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	69d2      	ldr	r2, [r2, #28]
 800801a:	00d2      	lsls	r2, r2, #3
 800801c:	4920      	ldr	r1, [pc, #128]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800801e:	4313      	orrs	r3, r2
 8008020:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008022:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	4a1e      	ldr	r2, [pc, #120]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008028:	f043 0310 	orr.w	r3, r3, #16
 800802c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d106      	bne.n	8008042 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a19      	ldr	r2, [pc, #100]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800803a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800803e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008040:	e00f      	b.n	8008062 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d106      	bne.n	8008056 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008048:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800804e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008054:	e005      	b.n	8008062 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008056:	4b12      	ldr	r3, [pc, #72]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	4a11      	ldr	r2, [pc, #68]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800805c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a0e      	ldr	r2, [pc, #56]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 8008068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800806c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806e:	f7fa fd75 	bl	8002b5c <HAL_GetTick>
 8008072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008074:	e008      	b.n	8008088 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008076:	f7fa fd71 	bl	8002b5c <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e006      	b.n	8008096 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <RCCEx_PLL2_Config+0x15c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f0      	beq.n	8008076 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	58024400 	.word	0x58024400
 80080a4:	ffff0007 	.word	0xffff0007

080080a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080b6:	4b53      	ldr	r3, [pc, #332]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d101      	bne.n	80080c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e099      	b.n	80081fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080c6:	4b4f      	ldr	r3, [pc, #316]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a4e      	ldr	r2, [pc, #312]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80080cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d2:	f7fa fd43 	bl	8002b5c <HAL_GetTick>
 80080d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080d8:	e008      	b.n	80080ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080da:	f7fa fd3f 	bl	8002b5c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e086      	b.n	80081fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080ec:	4b45      	ldr	r3, [pc, #276]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1f0      	bne.n	80080da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080f8:	4b42      	ldr	r3, [pc, #264]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	051b      	lsls	r3, r3, #20
 8008106:	493f      	ldr	r1, [pc, #252]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008108:	4313      	orrs	r3, r2
 800810a:	628b      	str	r3, [r1, #40]	; 0x28
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	3b01      	subs	r3, #1
 8008112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	3b01      	subs	r3, #1
 800811c:	025b      	lsls	r3, r3, #9
 800811e:	b29b      	uxth	r3, r3
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	3b01      	subs	r3, #1
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	3b01      	subs	r3, #1
 8008136:	061b      	lsls	r3, r3, #24
 8008138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800813c:	4931      	ldr	r1, [pc, #196]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 800813e:	4313      	orrs	r3, r2
 8008140:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008142:	4b30      	ldr	r3, [pc, #192]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	492d      	ldr	r1, [pc, #180]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008150:	4313      	orrs	r3, r2
 8008152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008154:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	4928      	ldr	r1, [pc, #160]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008166:	4b27      	ldr	r3, [pc, #156]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	4a26      	ldr	r2, [pc, #152]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 800816c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <RCCEx_PLL3_Config+0x160>)
 8008178:	4013      	ands	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	69d2      	ldr	r2, [r2, #28]
 800817e:	00d2      	lsls	r2, r2, #3
 8008180:	4920      	ldr	r1, [pc, #128]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008182:	4313      	orrs	r3, r2
 8008184:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008186:	4b1f      	ldr	r3, [pc, #124]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 800818c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008198:	4b1a      	ldr	r3, [pc, #104]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	4a19      	ldr	r2, [pc, #100]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 800819e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081a4:	e00f      	b.n	80081c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d106      	bne.n	80081ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081ac:	4b15      	ldr	r3, [pc, #84]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	4a14      	ldr	r2, [pc, #80]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081b8:	e005      	b.n	80081c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	4a11      	ldr	r2, [pc, #68]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081c6:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a0e      	ldr	r2, [pc, #56]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081d2:	f7fa fcc3 	bl	8002b5c <HAL_GetTick>
 80081d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081d8:	e008      	b.n	80081ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081da:	f7fa fcbf 	bl	8002b5c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e006      	b.n	80081fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <RCCEx_PLL3_Config+0x15c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f0      	beq.n	80081da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	58024400 	.word	0x58024400
 8008208:	ffff0007 	.word	0xffff0007

0800820c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e0f1      	b.n	8008402 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a78      	ldr	r2, [pc, #480]	; (800840c <HAL_SPI_Init+0x200>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00f      	beq.n	800824e <HAL_SPI_Init+0x42>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a77      	ldr	r2, [pc, #476]	; (8008410 <HAL_SPI_Init+0x204>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00a      	beq.n	800824e <HAL_SPI_Init+0x42>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a75      	ldr	r2, [pc, #468]	; (8008414 <HAL_SPI_Init+0x208>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d005      	beq.n	800824e <HAL_SPI_Init+0x42>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d901      	bls.n	800824e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0d9      	b.n	8008402 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 faa2 	bl	8009798 <SPI_GetPacketSize>
 8008254:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a6c      	ldr	r2, [pc, #432]	; (800840c <HAL_SPI_Init+0x200>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00c      	beq.n	800827a <HAL_SPI_Init+0x6e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6a      	ldr	r2, [pc, #424]	; (8008410 <HAL_SPI_Init+0x204>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <HAL_SPI_Init+0x6e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a69      	ldr	r2, [pc, #420]	; (8008414 <HAL_SPI_Init+0x208>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d002      	beq.n	800827a <HAL_SPI_Init+0x6e>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d811      	bhi.n	800829e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800827e:	4a63      	ldr	r2, [pc, #396]	; (800840c <HAL_SPI_Init+0x200>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a61      	ldr	r2, [pc, #388]	; (8008410 <HAL_SPI_Init+0x204>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d004      	beq.n	8008298 <HAL_SPI_Init+0x8c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a60      	ldr	r2, [pc, #384]	; (8008414 <HAL_SPI_Init+0x208>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d104      	bne.n	80082a2 <HAL_SPI_Init+0x96>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b10      	cmp	r3, #16
 800829c:	d901      	bls.n	80082a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e0af      	b.n	8008402 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fa f8b2 	bl	8002420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80082de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082e8:	d119      	bne.n	800831e <HAL_SPI_Init+0x112>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f2:	d103      	bne.n	80082fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830c:	d107      	bne.n	800831e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800831c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	431a      	orrs	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	ea42 0103 	orr.w	r1, r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837e:	ea42 0103 	orr.w	r1, r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d113      	bne.n	80083be <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40013000 	.word	0x40013000
 8008410:	40003800 	.word	0x40003800
 8008414:	40003c00 	.word	0x40003c00

08008418 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3320      	adds	r3, #32
 800842e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_SPI_Transmit+0x2a>
 800843e:	2302      	movs	r3, #2
 8008440:	e1d7      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800844a:	f7fa fb87 	bl	8002b5c <HAL_GetTick>
 800844e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	d007      	beq.n	800846c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800845c:	2302      	movs	r3, #2
 800845e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008468:	7efb      	ldrb	r3, [r7, #27]
 800846a:	e1c2      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <HAL_SPI_Transmit+0x60>
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008484:	7efb      	ldrb	r3, [r7, #27]
 8008486:	e1b4      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2203      	movs	r2, #3
 800848c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	88fa      	ldrh	r2, [r7, #6]
 80084aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80084d8:	d107      	bne.n	80084ea <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	4b96      	ldr	r3, [pc, #600]	; (800874c <HAL_SPI_Transmit+0x334>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	88f9      	ldrh	r1, [r7, #6]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	430b      	orrs	r3, r1
 80084fc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0201 	orr.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008516:	d107      	bne.n	8008528 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b0f      	cmp	r3, #15
 800852e:	d947      	bls.n	80085c0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008530:	e03f      	b.n	80085b2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b02      	cmp	r3, #2
 800853e:	d114      	bne.n	800856a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800855c:	b29b      	uxth	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008568:	e023      	b.n	80085b2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800856a:	f7fa faf7 	bl	8002b5c <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d803      	bhi.n	8008582 <HAL_SPI_Transmit+0x16a>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d102      	bne.n	8008588 <HAL_SPI_Transmit+0x170>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d114      	bne.n	80085b2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f001 f837 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e11f      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1b9      	bne.n	8008532 <HAL_SPI_Transmit+0x11a>
 80085be:	e0f2      	b.n	80087a6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	2b07      	cmp	r3, #7
 80085c6:	f240 80e7 	bls.w	8008798 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085ca:	e05d      	b.n	8008688 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d132      	bne.n	8008640 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d918      	bls.n	8008618 <HAL_SPI_Transmit+0x200>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d014      	beq.n	8008618 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800860a:	b29b      	uxth	r3, r3
 800860c:	3b02      	subs	r3, #2
 800860e:	b29a      	uxth	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008616:	e037      	b.n	8008688 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861c:	881a      	ldrh	r2, [r3, #0]
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008626:	1c9a      	adds	r2, r3, #2
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b29a      	uxth	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800863e:	e023      	b.n	8008688 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008640:	f7fa fa8c 	bl	8002b5c <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d803      	bhi.n	8008658 <HAL_SPI_Transmit+0x240>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d102      	bne.n	800865e <HAL_SPI_Transmit+0x246>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d114      	bne.n	8008688 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 ffcc 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e0b4      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d19b      	bne.n	80085cc <HAL_SPI_Transmit+0x1b4>
 8008694:	e087      	b.n	80087a6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d155      	bne.n	8008750 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d918      	bls.n	80086e2 <HAL_SPI_Transmit+0x2ca>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d914      	bls.n	80086e2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b04      	subs	r3, #4
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086e0:	e05a      	b.n	8008798 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d917      	bls.n	800871e <HAL_SPI_Transmit+0x306>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d013      	beq.n	800871e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fa:	881a      	ldrh	r2, [r3, #0]
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b02      	subs	r3, #2
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800871c:	e03c      	b.n	8008798 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3320      	adds	r3, #32
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008748:	e026      	b.n	8008798 <HAL_SPI_Transmit+0x380>
 800874a:	bf00      	nop
 800874c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008750:	f7fa fa04 	bl	8002b5c <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d803      	bhi.n	8008768 <HAL_SPI_Transmit+0x350>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d102      	bne.n	800876e <HAL_SPI_Transmit+0x356>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d114      	bne.n	8008798 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 ff44 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008782:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e02c      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f47f af78 	bne.w	8008696 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2108      	movs	r1, #8
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 ffc3 	bl	800973c <SPI_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 ff15 	bl	80095fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80087f0:	7efb      	ldrb	r3, [r7, #27]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop

080087fc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	; 0x28
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3330      	adds	r3, #48	; 0x30
 8008816:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008820:	d112      	bne.n	8008848 <HAL_SPI_Receive+0x4c>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10e      	bne.n	8008848 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2204      	movs	r2, #4
 800882e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f9ce 	bl	8008be0 <HAL_SPI_TransmitReceive>
 8008844:	4603      	mov	r3, r0
 8008846:	e1c7      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <HAL_SPI_Receive+0x5a>
 8008852:	2302      	movs	r3, #2
 8008854:	e1c0      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800885e:	f7fa f97d 	bl	8002b5c <HAL_GetTick>
 8008862:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d007      	beq.n	8008880 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008870:	2302      	movs	r3, #2
 8008872:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800887c:	7ffb      	ldrb	r3, [r7, #31]
 800887e:	e1ab      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_SPI_Receive+0x90>
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d107      	bne.n	800889c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008898:	7ffb      	ldrb	r3, [r7, #31]
 800889a:	e19d      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2204      	movs	r2, #4
 80088a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	88fa      	ldrh	r2, [r7, #6]
 80088b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	88fa      	ldrh	r2, [r7, #6]
 80088be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80088ec:	d107      	bne.n	80088fe <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	4b94      	ldr	r3, [pc, #592]	; (8008b58 <HAL_SPI_Receive+0x35c>)
 8008906:	4013      	ands	r3, r2
 8008908:	88f9      	ldrh	r1, [r7, #6]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	6812      	ldr	r2, [r2, #0]
 800890e:	430b      	orrs	r3, r1
 8008910:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800892a:	d107      	bne.n	800893c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b0f      	cmp	r3, #15
 8008942:	d948      	bls.n	80089d6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008944:	e040      	b.n	80089c8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695a      	ldr	r2, [r3, #20]
 800894c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008950:	4013      	ands	r3, r2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d014      	beq.n	8008980 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008960:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800897e:	e023      	b.n	80089c8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008980:	f7fa f8ec 	bl	8002b5c <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d803      	bhi.n	8008998 <HAL_SPI_Receive+0x19c>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d102      	bne.n	800899e <HAL_SPI_Receive+0x1a2>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d114      	bne.n	80089c8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fe2c 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e107      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1b8      	bne.n	8008946 <HAL_SPI_Receive+0x14a>
 80089d4:	e0ed      	b.n	8008bb2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	2b07      	cmp	r3, #7
 80089dc:	f240 80e2 	bls.w	8008ba4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80089e0:	e05b      	b.n	8008a9a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d030      	beq.n	8008a52 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d014      	beq.n	8008a28 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a08:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0e:	1d1a      	adds	r2, r3, #4
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b02      	subs	r3, #2
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a26:	e038      	b.n	8008a9a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	8812      	ldrh	r2, [r2, #0]
 8008a30:	b292      	uxth	r2, r2
 8008a32:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a38:	1c9a      	adds	r2, r3, #2
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a50:	e023      	b.n	8008a9a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a52:	f7fa f883 	bl	8002b5c <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d803      	bhi.n	8008a6a <HAL_SPI_Receive+0x26e>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a68:	d102      	bne.n	8008a70 <HAL_SPI_Receive+0x274>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d114      	bne.n	8008a9a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fdc3 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e09e      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d19d      	bne.n	80089e2 <HAL_SPI_Receive+0x1e6>
 8008aa6:	e084      	b.n	8008bb2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d052      	beq.n	8008b5c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d014      	beq.n	8008aee <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008acc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ace:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad4:	1d1a      	adds	r2, r3, #4
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b04      	subs	r3, #4
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008aec:	e05a      	b.n	8008ba4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008afc:	d914      	bls.n	8008b28 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	8812      	ldrh	r2, [r2, #0]
 8008b06:	b292      	uxth	r2, r2
 8008b08:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0e:	1c9a      	adds	r2, r3, #2
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b02      	subs	r3, #2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b26:	e03d      	b.n	8008ba4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b56:	e025      	b.n	8008ba4 <HAL_SPI_Receive+0x3a8>
 8008b58:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b5c:	f7f9 fffe 	bl	8002b5c <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d803      	bhi.n	8008b74 <HAL_SPI_Receive+0x378>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d102      	bne.n	8008b7a <HAL_SPI_Receive+0x37e>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d114      	bne.n	8008ba4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fd3e 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e019      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f47f af7b 	bne.w	8008aa8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fd22 	bl	80095fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8008bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	; 0x38
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3320      	adds	r3, #32
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3330      	adds	r3, #48	; 0x30
 8008c02:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x32>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e2ce      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c1a:	f7f9 ff9f 	bl	8002b5c <HAL_GetTick>
 8008c1e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008c20:	887b      	ldrh	r3, [r7, #2]
 8008c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008c24:	887b      	ldrh	r3, [r7, #2]
 8008c26:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c36:	7efb      	ldrb	r3, [r7, #27]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d014      	beq.n	8008c66 <HAL_SPI_TransmitReceive+0x86>
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c42:	d106      	bne.n	8008c52 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c4c:	7efb      	ldrb	r3, [r7, #27]
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d009      	beq.n	8008c66 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008c52:	2302      	movs	r3, #2
 8008c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c64:	e2a4      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <HAL_SPI_TransmitReceive+0x98>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_SPI_TransmitReceive+0x98>
 8008c72:	887b      	ldrh	r3, [r7, #2]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	e291      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d003      	beq.n	8008ca0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	887a      	ldrh	r2, [r7, #2]
 8008cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	887a      	ldrh	r2, [r7, #2]
 8008cba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	887a      	ldrh	r2, [r7, #2]
 8008cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	887a      	ldrh	r2, [r7, #2]
 8008cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4b9f      	ldr	r3, [pc, #636]	; (8008f64 <HAL_SPI_TransmitReceive+0x384>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	8879      	ldrh	r1, [r7, #2]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d0c:	d107      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d970      	bls.n	8008e08 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d26:	e068      	b.n	8008dfa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d11a      	bne.n	8008d6c <HAL_SPI_TransmitReceive+0x18c>
 8008d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d017      	beq.n	8008d6c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4c:	1d1a      	adds	r2, r3, #4
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	f248 0308 	movw	r3, #32776	; 0x8008
 8008d76:	4013      	ands	r3, r2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01a      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x1d2>
 8008d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d017      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d8c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d92:	1d1a      	adds	r2, r3, #4
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008db0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008db2:	f7f9 fed3 	bl	8002b5c <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d803      	bhi.n	8008dca <HAL_SPI_TransmitReceive+0x1ea>
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d102      	bne.n	8008dd0 <HAL_SPI_TransmitReceive+0x1f0>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d114      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fc13 	bl	80095fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e1da      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d193      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x148>
 8008e00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d190      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x148>
 8008e06:	e1ac      	b.n	8009162 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	2b07      	cmp	r3, #7
 8008e0e:	f240 81a0 	bls.w	8009152 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e12:	e0a9      	b.n	8008f68 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d139      	bne.n	8008e96 <HAL_SPI_TransmitReceive+0x2b6>
 8008e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d036      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d91c      	bls.n	8008e68 <HAL_SPI_TransmitReceive+0x288>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d018      	beq.n	8008e68 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6812      	ldr	r2, [r2, #0]
 8008e40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b02      	subs	r3, #2
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008e66:	e016      	b.n	8008e96 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e6c:	881a      	ldrh	r2, [r3, #0]
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e76:	1c9a      	adds	r2, r3, #2
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e94:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d03a      	beq.n	8008f1a <HAL_SPI_TransmitReceive+0x33a>
 8008ea4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d037      	beq.n	8008f1a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ec2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec8:	1d1a      	adds	r2, r3, #4
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b02      	subs	r3, #2
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008ee8:	e017      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efa:	1c9a      	adds	r2, r3, #2
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f18:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f1a:	f7f9 fe1f 	bl	8002b5c <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d803      	bhi.n	8008f32 <HAL_SPI_TransmitReceive+0x352>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d102      	bne.n	8008f38 <HAL_SPI_TransmitReceive+0x358>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d117      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fb5f 	bl	80095fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e126      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
 8008f62:	bf00      	nop
 8008f64:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f47f af52 	bne.w	8008e14 <HAL_SPI_TransmitReceive+0x234>
 8008f70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f47f af4e 	bne.w	8008e14 <HAL_SPI_TransmitReceive+0x234>
 8008f78:	e0f3      	b.n	8009162 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d15a      	bne.n	800903e <HAL_SPI_TransmitReceive+0x45e>
 8008f88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d057      	beq.n	800903e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d91c      	bls.n	8008fce <HAL_SPI_TransmitReceive+0x3ee>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d918      	bls.n	8008fce <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b04      	subs	r3, #4
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008fcc:	e037      	b.n	800903e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d91b      	bls.n	800900c <HAL_SPI_TransmitReceive+0x42c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d017      	beq.n	800900c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe0:	881a      	ldrh	r2, [r3, #0]
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	1c9a      	adds	r2, r3, #2
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b02      	subs	r3, #2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009008:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800900a:	e018      	b.n	800903e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3320      	adds	r3, #32
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800902a:	b29b      	uxth	r3, r3
 800902c:	3b01      	subs	r3, #1
 800902e:	b29a      	uxth	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800903c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d05e      	beq.n	800910a <HAL_SPI_TransmitReceive+0x52a>
 800904c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d05b      	beq.n	800910a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d018      	beq.n	8009092 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009068:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800906a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009070:	1d1a      	adds	r2, r3, #4
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b04      	subs	r3, #4
 8009080:	b29a      	uxth	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800908e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009090:	e03b      	b.n	800910a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800909c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a0:	d918      	bls.n	80090d4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	8812      	ldrh	r2, [r2, #0]
 80090aa:	b292      	uxth	r2, r2
 80090ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b2:	1c9a      	adds	r2, r3, #2
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b02      	subs	r3, #2
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80090d2:	e01a      	b.n	800910a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009108:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800910a:	f7f9 fd27 	bl	8002b5c <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009116:	429a      	cmp	r2, r3
 8009118:	d803      	bhi.n	8009122 <HAL_SPI_TransmitReceive+0x542>
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d102      	bne.n	8009128 <HAL_SPI_TransmitReceive+0x548>
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d114      	bne.n	8009152 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fa67 	bl	80095fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800913c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e02e      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009154:	2b00      	cmp	r3, #0
 8009156:	f47f af10 	bne.w	8008f7a <HAL_SPI_TransmitReceive+0x39a>
 800915a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	f47f af0c 	bne.w	8008f7a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	2200      	movs	r2, #0
 800916a:	2108      	movs	r1, #8
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fae5 	bl	800973c <SPI_WaitOnFlagUntilTimeout>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800917e:	f043 0220 	orr.w	r2, r3, #32
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 fa37 	bl	80095fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e001      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80091ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3730      	adds	r7, #48	; 0x30
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80091d0:	6a3a      	ldr	r2, [r7, #32]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4013      	ands	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091ea:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3330      	adds	r3, #48	; 0x30
 80091f2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d113      	bne.n	8009226 <HAL_SPI_IRQHandler+0x6e>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10e      	bne.n	8009226 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
    hspi->RxISR(hspi);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
    handled = 1UL;
 8009222:	2301      	movs	r3, #1
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10f      	bne.n	8009250 <HAL_SPI_IRQHandler+0x98>
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
    handled = 1UL;
 800924c:	2301      	movs	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10f      	bne.n	800927a <HAL_SPI_IRQHandler+0xc2>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
    handled = 1UL;
 8009276:	2301      	movs	r3, #1
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 816f 	bne.w	8009560 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f003 0308 	and.w	r3, r3, #8
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80a0 	beq.w	80093ce <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0208 	orr.w	r2, r2, #8
 800929c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0210 	orr.w	r2, r2, #16
 80092ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092bc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0208 	bic.w	r2, r2, #8
 80092cc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00f      	beq.n	80092f8 <HAL_SPI_IRQHandler+0x140>
 80092d8:	7cfb      	ldrb	r3, [r7, #19]
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d004      	beq.n	80092e8 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d007      	beq.n	80092f8 <HAL_SPI_IRQHandler+0x140>
 80092e8:	7cfb      	ldrb	r3, [r7, #19]
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d059      	beq.n	80093a2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d154      	bne.n	80093a2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d13d      	bne.n	8009382 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009306:	e036      	b.n	8009376 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b0f      	cmp	r3, #15
 800930e:	d90b      	bls.n	8009328 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009318:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800931a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009320:	1d1a      	adds	r2, r3, #4
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	665a      	str	r2, [r3, #100]	; 0x64
 8009326:	e01d      	b.n	8009364 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b07      	cmp	r3, #7
 800932e:	d90b      	bls.n	8009348 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	8812      	ldrh	r2, [r2, #0]
 8009338:	b292      	uxth	r2, r2
 800933a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	1c9a      	adds	r2, r3, #2
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	665a      	str	r2, [r3, #100]	; 0x64
 8009346:	e00d      	b.n	8009364 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1c2      	bne.n	8009308 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f93a 	bl	80095fc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f90a 	bl	80095b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80093a0:	e0e3      	b.n	800956a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80093a2:	7cfb      	ldrb	r3, [r7, #19]
 80093a4:	2b05      	cmp	r3, #5
 80093a6:	d103      	bne.n	80093b0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8f9 	bl	80095a0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80093ae:	e0d9      	b.n	8009564 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80093b0:	7cfb      	ldrb	r3, [r7, #19]
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d103      	bne.n	80093be <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8e8 	bl	800958c <HAL_SPI_RxCpltCallback>
    return;
 80093bc:	e0d2      	b.n	8009564 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80093be:	7cfb      	ldrb	r3, [r7, #19]
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	f040 80cf 	bne.w	8009564 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8d6 	bl	8009578 <HAL_SPI_TxCpltCallback>
    return;
 80093cc:	e0ca      	b.n	8009564 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00d      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x23c>
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d008      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093f0:	619a      	str	r2, [r3, #24]

    return;
 80093f2:	e0ba      	b.n	800956a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 80b5 	beq.w	800956a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00f      	beq.n	800942a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009410:	f043 0204 	orr.w	r2, r3, #4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009428:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00f      	beq.n	8009454 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943a:	f043 0201 	orr.w	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009452:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00f      	beq.n	800947e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009464:	f043 0208 	orr.w	r2, r3, #8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800947c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00f      	beq.n	80094a8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800948e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0220 	orr.w	r2, r2, #32
 80094a6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d05a      	beq.n	8009568 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6919      	ldr	r1, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4b28      	ldr	r3, [pc, #160]	; (8009570 <HAL_SPI_IRQHandler+0x3b8>)
 80094ce:	400b      	ands	r3, r1
 80094d0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80094d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094dc:	d138      	bne.n	8009550 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80094ec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d013      	beq.n	800951e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fa:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <HAL_SPI_IRQHandler+0x3bc>)
 80094fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009502:	4618      	mov	r0, r3
 8009504:	f7f9 ffe6 	bl	80034d4 <HAL_DMA_Abort_IT>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009522:	2b00      	cmp	r3, #0
 8009524:	d020      	beq.n	8009568 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800952a:	4a12      	ldr	r2, [pc, #72]	; (8009574 <HAL_SPI_IRQHandler+0x3bc>)
 800952c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009532:	4618      	mov	r0, r3
 8009534:	f7f9 ffce 	bl	80034d4 <HAL_DMA_Abort_IT>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d014      	beq.n	8009568 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800954e:	e00b      	b.n	8009568 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f82b 	bl	80095b4 <HAL_SPI_ErrorCallback>
    return;
 800955e:	e003      	b.n	8009568 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009568:	bf00      	nop
  }
}
 800956a:	3728      	adds	r7, #40	; 0x28
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	fffffc94 	.word	0xfffffc94
 8009574:	080095c9 	.word	0x080095c9

08009578 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff ffe0 	bl	80095b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0208 	orr.w	r2, r2, #8
 800961a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699a      	ldr	r2, [r3, #24]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0210 	orr.w	r2, r2, #16
 800962a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6919      	ldr	r1, [r3, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b3c      	ldr	r3, [pc, #240]	; (8009738 <SPI_CloseTransfer+0x13c>)
 8009648:	400b      	ands	r3, r1
 800964a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800965a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b04      	cmp	r3, #4
 8009666:	d014      	beq.n	8009692 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00f      	beq.n	8009692 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0220 	orr.w	r2, r2, #32
 8009690:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d014      	beq.n	80096c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00f      	beq.n	80096c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ae:	f043 0204 	orr.w	r2, r3, #4
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d8:	f043 0201 	orr.w	r2, r3, #1
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00f      	beq.n	800971c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009702:	f043 0208 	orr.w	r2, r3, #8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800971a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800972c:	bf00      	nop
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	fffffc90 	.word	0xfffffc90

0800973c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800974c:	e010      	b.n	8009770 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800974e:	f7f9 fa05 	bl	8002b5c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	429a      	cmp	r2, r3
 800975c:	d803      	bhi.n	8009766 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d102      	bne.n	800976c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e00f      	b.n	8009790 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4013      	ands	r3, r2
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	bf0c      	ite	eq
 8009780:	2301      	moveq	r3, #1
 8009782:	2300      	movne	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	429a      	cmp	r2, r3
 800978c:	d0df      	beq.n	800974e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	3301      	adds	r3, #1
 80097a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	3301      	adds	r3, #1
 80097b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3307      	adds	r3, #7
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	fb02 f303 	mul.w	r3, r2, r3
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e042      	b.n	8009866 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f8 ffb8 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2224      	movs	r2, #36	; 0x24
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f82d 	bl	8009870 <UART_SetConfig>
 8009816:	4603      	mov	r3, r0
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e022      	b.n	8009866 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fd81 	bl	800a330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800983c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800984c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0201 	orr.w	r2, r2, #1
 800985c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fe08 	bl	800a474 <UART_CheckIdleState>
 8009864:	4603      	mov	r3, r0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009870:	b5b0      	push	{r4, r5, r7, lr}
 8009872:	b08e      	sub	sp, #56	; 0x38
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	4313      	orrs	r3, r2
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	4bbf      	ldr	r3, [pc, #764]	; (8009b9c <UART_SetConfig+0x32c>)
 800989e:	4013      	ands	r3, r2
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6812      	ldr	r2, [r2, #0]
 80098a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098a6:	430b      	orrs	r3, r1
 80098a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4ab5      	ldr	r2, [pc, #724]	; (8009ba0 <UART_SetConfig+0x330>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d004      	beq.n	80098da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098d6:	4313      	orrs	r3, r2
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	4bb0      	ldr	r3, [pc, #704]	; (8009ba4 <UART_SetConfig+0x334>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098ea:	430b      	orrs	r3, r1
 80098ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	f023 010f 	bic.w	r1, r3, #15
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4aa7      	ldr	r2, [pc, #668]	; (8009ba8 <UART_SetConfig+0x338>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d176      	bne.n	80099fc <UART_SetConfig+0x18c>
 800990e:	4ba7      	ldr	r3, [pc, #668]	; (8009bac <UART_SetConfig+0x33c>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009916:	2b28      	cmp	r3, #40	; 0x28
 8009918:	d86c      	bhi.n	80099f4 <UART_SetConfig+0x184>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <UART_SetConfig+0xb0>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	080099c5 	.word	0x080099c5
 8009924:	080099f5 	.word	0x080099f5
 8009928:	080099f5 	.word	0x080099f5
 800992c:	080099f5 	.word	0x080099f5
 8009930:	080099f5 	.word	0x080099f5
 8009934:	080099f5 	.word	0x080099f5
 8009938:	080099f5 	.word	0x080099f5
 800993c:	080099f5 	.word	0x080099f5
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099f5 	.word	0x080099f5
 8009948:	080099f5 	.word	0x080099f5
 800994c:	080099f5 	.word	0x080099f5
 8009950:	080099f5 	.word	0x080099f5
 8009954:	080099f5 	.word	0x080099f5
 8009958:	080099f5 	.word	0x080099f5
 800995c:	080099f5 	.word	0x080099f5
 8009960:	080099d5 	.word	0x080099d5
 8009964:	080099f5 	.word	0x080099f5
 8009968:	080099f5 	.word	0x080099f5
 800996c:	080099f5 	.word	0x080099f5
 8009970:	080099f5 	.word	0x080099f5
 8009974:	080099f5 	.word	0x080099f5
 8009978:	080099f5 	.word	0x080099f5
 800997c:	080099f5 	.word	0x080099f5
 8009980:	080099dd 	.word	0x080099dd
 8009984:	080099f5 	.word	0x080099f5
 8009988:	080099f5 	.word	0x080099f5
 800998c:	080099f5 	.word	0x080099f5
 8009990:	080099f5 	.word	0x080099f5
 8009994:	080099f5 	.word	0x080099f5
 8009998:	080099f5 	.word	0x080099f5
 800999c:	080099f5 	.word	0x080099f5
 80099a0:	080099e5 	.word	0x080099e5
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	080099f5 	.word	0x080099f5
 80099ac:	080099f5 	.word	0x080099f5
 80099b0:	080099f5 	.word	0x080099f5
 80099b4:	080099f5 	.word	0x080099f5
 80099b8:	080099f5 	.word	0x080099f5
 80099bc:	080099f5 	.word	0x080099f5
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e222      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099cc:	2304      	movs	r3, #4
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e21e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099d4:	2308      	movs	r3, #8
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e21a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099dc:	2310      	movs	r3, #16
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e216      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099e4:	2320      	movs	r3, #32
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e212      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e20e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099f4:	2380      	movs	r3, #128	; 0x80
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e20a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a6b      	ldr	r2, [pc, #428]	; (8009bb0 <UART_SetConfig+0x340>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d130      	bne.n	8009a68 <UART_SetConfig+0x1f8>
 8009a06:	4b69      	ldr	r3, [pc, #420]	; (8009bac <UART_SetConfig+0x33c>)
 8009a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d826      	bhi.n	8009a60 <UART_SetConfig+0x1f0>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x1a8>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a31 	.word	0x08009a31
 8009a1c:	08009a39 	.word	0x08009a39
 8009a20:	08009a41 	.word	0x08009a41
 8009a24:	08009a49 	.word	0x08009a49
 8009a28:	08009a51 	.word	0x08009a51
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	2300      	movs	r3, #0
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e1ec      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3e:	e1e8      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a46:	e1e4      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4e:	e1e0      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a50:	2320      	movs	r3, #32
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	e1dc      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5e:	e1d8      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e1d4      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a51      	ldr	r2, [pc, #324]	; (8009bb4 <UART_SetConfig+0x344>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d130      	bne.n	8009ad4 <UART_SetConfig+0x264>
 8009a72:	4b4e      	ldr	r3, [pc, #312]	; (8009bac <UART_SetConfig+0x33c>)
 8009a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	2b05      	cmp	r3, #5
 8009a7c:	d826      	bhi.n	8009acc <UART_SetConfig+0x25c>
 8009a7e:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <UART_SetConfig+0x214>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009aa5 	.word	0x08009aa5
 8009a8c:	08009aad 	.word	0x08009aad
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009ac5 	.word	0x08009ac5
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e1b6      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	e1b2      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009aac:	2308      	movs	r3, #8
 8009aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab2:	e1ae      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aba:	e1aa      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009abc:	2320      	movs	r3, #32
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac2:	e1a6      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aca:	e1a2      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009acc:	2380      	movs	r3, #128	; 0x80
 8009ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad2:	e19e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a37      	ldr	r2, [pc, #220]	; (8009bb8 <UART_SetConfig+0x348>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d130      	bne.n	8009b40 <UART_SetConfig+0x2d0>
 8009ade:	4b33      	ldr	r3, [pc, #204]	; (8009bac <UART_SetConfig+0x33c>)
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d826      	bhi.n	8009b38 <UART_SetConfig+0x2c8>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x280>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b29 	.word	0x08009b29
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e180      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b10:	2304      	movs	r3, #4
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e17c      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e178      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b20:	2310      	movs	r3, #16
 8009b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b26:	e174      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2e:	e170      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b30:	2340      	movs	r3, #64	; 0x40
 8009b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b36:	e16c      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3e:	e168      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1d      	ldr	r2, [pc, #116]	; (8009bbc <UART_SetConfig+0x34c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d142      	bne.n	8009bd0 <UART_SetConfig+0x360>
 8009b4a:	4b18      	ldr	r3, [pc, #96]	; (8009bac <UART_SetConfig+0x33c>)
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d838      	bhi.n	8009bc8 <UART_SetConfig+0x358>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <UART_SetConfig+0x2ec>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b85 	.word	0x08009b85
 8009b68:	08009b8d 	.word	0x08009b8d
 8009b6c:	08009b95 	.word	0x08009b95
 8009b70:	08009bc1 	.word	0x08009bc1
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e14a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e146      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e142      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e13e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e13a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009b9c:	cfff69f3 	.word	0xcfff69f3
 8009ba0:	58000c00 	.word	0x58000c00
 8009ba4:	11fff4ff 	.word	0x11fff4ff
 8009ba8:	40011000 	.word	0x40011000
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	40004400 	.word	0x40004400
 8009bb4:	40004800 	.word	0x40004800
 8009bb8:	40004c00 	.word	0x40004c00
 8009bbc:	40005000 	.word	0x40005000
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e124      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e120      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4acc      	ldr	r2, [pc, #816]	; (8009f08 <UART_SetConfig+0x698>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d176      	bne.n	8009cc8 <UART_SetConfig+0x458>
 8009bda:	4bcc      	ldr	r3, [pc, #816]	; (8009f0c <UART_SetConfig+0x69c>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009be2:	2b28      	cmp	r3, #40	; 0x28
 8009be4:	d86c      	bhi.n	8009cc0 <UART_SetConfig+0x450>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <UART_SetConfig+0x37c>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c91 	.word	0x08009c91
 8009bf0:	08009cc1 	.word	0x08009cc1
 8009bf4:	08009cc1 	.word	0x08009cc1
 8009bf8:	08009cc1 	.word	0x08009cc1
 8009bfc:	08009cc1 	.word	0x08009cc1
 8009c00:	08009cc1 	.word	0x08009cc1
 8009c04:	08009cc1 	.word	0x08009cc1
 8009c08:	08009cc1 	.word	0x08009cc1
 8009c0c:	08009c99 	.word	0x08009c99
 8009c10:	08009cc1 	.word	0x08009cc1
 8009c14:	08009cc1 	.word	0x08009cc1
 8009c18:	08009cc1 	.word	0x08009cc1
 8009c1c:	08009cc1 	.word	0x08009cc1
 8009c20:	08009cc1 	.word	0x08009cc1
 8009c24:	08009cc1 	.word	0x08009cc1
 8009c28:	08009cc1 	.word	0x08009cc1
 8009c2c:	08009ca1 	.word	0x08009ca1
 8009c30:	08009cc1 	.word	0x08009cc1
 8009c34:	08009cc1 	.word	0x08009cc1
 8009c38:	08009cc1 	.word	0x08009cc1
 8009c3c:	08009cc1 	.word	0x08009cc1
 8009c40:	08009cc1 	.word	0x08009cc1
 8009c44:	08009cc1 	.word	0x08009cc1
 8009c48:	08009cc1 	.word	0x08009cc1
 8009c4c:	08009ca9 	.word	0x08009ca9
 8009c50:	08009cc1 	.word	0x08009cc1
 8009c54:	08009cc1 	.word	0x08009cc1
 8009c58:	08009cc1 	.word	0x08009cc1
 8009c5c:	08009cc1 	.word	0x08009cc1
 8009c60:	08009cc1 	.word	0x08009cc1
 8009c64:	08009cc1 	.word	0x08009cc1
 8009c68:	08009cc1 	.word	0x08009cc1
 8009c6c:	08009cb1 	.word	0x08009cb1
 8009c70:	08009cc1 	.word	0x08009cc1
 8009c74:	08009cc1 	.word	0x08009cc1
 8009c78:	08009cc1 	.word	0x08009cc1
 8009c7c:	08009cc1 	.word	0x08009cc1
 8009c80:	08009cc1 	.word	0x08009cc1
 8009c84:	08009cc1 	.word	0x08009cc1
 8009c88:	08009cc1 	.word	0x08009cc1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e0bc      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e0b8      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e0b4      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e0b0      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e0ac      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009cb8:	2340      	movs	r3, #64	; 0x40
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e0a8      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009cc0:	2380      	movs	r3, #128	; 0x80
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e0a4      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a90      	ldr	r2, [pc, #576]	; (8009f10 <UART_SetConfig+0x6a0>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d130      	bne.n	8009d34 <UART_SetConfig+0x4c4>
 8009cd2:	4b8e      	ldr	r3, [pc, #568]	; (8009f0c <UART_SetConfig+0x69c>)
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d826      	bhi.n	8009d2c <UART_SetConfig+0x4bc>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UART_SetConfig+0x474>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009cfd 	.word	0x08009cfd
 8009ce8:	08009d05 	.word	0x08009d05
 8009cec:	08009d0d 	.word	0x08009d0d
 8009cf0:	08009d15 	.word	0x08009d15
 8009cf4:	08009d1d 	.word	0x08009d1d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e086      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e082      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e07e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	e07a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e076      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e072      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d2c:	2380      	movs	r3, #128	; 0x80
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e06e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a76      	ldr	r2, [pc, #472]	; (8009f14 <UART_SetConfig+0x6a4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d130      	bne.n	8009da0 <UART_SetConfig+0x530>
 8009d3e:	4b73      	ldr	r3, [pc, #460]	; (8009f0c <UART_SetConfig+0x69c>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d826      	bhi.n	8009d98 <UART_SetConfig+0x528>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x4e0>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e050      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e04c      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e048      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e044      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e040      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e03c      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e038      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a5c      	ldr	r2, [pc, #368]	; (8009f18 <UART_SetConfig+0x6a8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d130      	bne.n	8009e0c <UART_SetConfig+0x59c>
 8009daa:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <UART_SetConfig+0x69c>)
 8009dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d826      	bhi.n	8009e04 <UART_SetConfig+0x594>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <UART_SetConfig+0x54c>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009de5 	.word	0x08009de5
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009df5 	.word	0x08009df5
 8009dd0:	08009dfd 	.word	0x08009dfd
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dda:	e01a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de2:	e016      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dea:	e012      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df2:	e00e      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009df4:	2320      	movs	r3, #32
 8009df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfa:	e00a      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009dfc:	2340      	movs	r3, #64	; 0x40
 8009dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e02:	e006      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0a:	e002      	b.n	8009e12 <UART_SetConfig+0x5a2>
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a40      	ldr	r2, [pc, #256]	; (8009f18 <UART_SetConfig+0x6a8>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	f040 80ef 	bne.w	8009ffc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	dc46      	bgt.n	8009eb4 <UART_SetConfig+0x644>
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	f2c0 8081 	blt.w	8009f2e <UART_SetConfig+0x6be>
 8009e2c:	3b02      	subs	r3, #2
 8009e2e:	2b1e      	cmp	r3, #30
 8009e30:	d87d      	bhi.n	8009f2e <UART_SetConfig+0x6be>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <UART_SetConfig+0x5c8>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009ebb 	.word	0x08009ebb
 8009e3c:	08009f2f 	.word	0x08009f2f
 8009e40:	08009ec3 	.word	0x08009ec3
 8009e44:	08009f2f 	.word	0x08009f2f
 8009e48:	08009f2f 	.word	0x08009f2f
 8009e4c:	08009f2f 	.word	0x08009f2f
 8009e50:	08009ed3 	.word	0x08009ed3
 8009e54:	08009f2f 	.word	0x08009f2f
 8009e58:	08009f2f 	.word	0x08009f2f
 8009e5c:	08009f2f 	.word	0x08009f2f
 8009e60:	08009f2f 	.word	0x08009f2f
 8009e64:	08009f2f 	.word	0x08009f2f
 8009e68:	08009f2f 	.word	0x08009f2f
 8009e6c:	08009f2f 	.word	0x08009f2f
 8009e70:	08009ee3 	.word	0x08009ee3
 8009e74:	08009f2f 	.word	0x08009f2f
 8009e78:	08009f2f 	.word	0x08009f2f
 8009e7c:	08009f2f 	.word	0x08009f2f
 8009e80:	08009f2f 	.word	0x08009f2f
 8009e84:	08009f2f 	.word	0x08009f2f
 8009e88:	08009f2f 	.word	0x08009f2f
 8009e8c:	08009f2f 	.word	0x08009f2f
 8009e90:	08009f2f 	.word	0x08009f2f
 8009e94:	08009f2f 	.word	0x08009f2f
 8009e98:	08009f2f 	.word	0x08009f2f
 8009e9c:	08009f2f 	.word	0x08009f2f
 8009ea0:	08009f2f 	.word	0x08009f2f
 8009ea4:	08009f2f 	.word	0x08009f2f
 8009ea8:	08009f2f 	.word	0x08009f2f
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f21 	.word	0x08009f21
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d036      	beq.n	8009f26 <UART_SetConfig+0x6b6>
 8009eb8:	e039      	b.n	8009f2e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009eba:	f7fd fd85 	bl	80079c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ec0:	e03b      	b.n	8009f3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fd fd94 	bl	80079f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ed0:	e033      	b.n	8009f3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd fee0 	bl	8007c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ee0:	e02b      	b.n	8009f3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <UART_SetConfig+0x69c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <UART_SetConfig+0x69c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <UART_SetConfig+0x6ac>)
 8009efa:	fa22 f303 	lsr.w	r3, r2, r3
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f00:	e01b      	b.n	8009f3a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <UART_SetConfig+0x6ac>)
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f06:	e018      	b.n	8009f3a <UART_SetConfig+0x6ca>
 8009f08:	40011400 	.word	0x40011400
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	40007800 	.word	0x40007800
 8009f14:	40007c00 	.word	0x40007c00
 8009f18:	58000c00 	.word	0x58000c00
 8009f1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f20:	4bc4      	ldr	r3, [pc, #784]	; (800a234 <UART_SetConfig+0x9c4>)
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f24:	e009      	b.n	8009f3a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f2c:	e005      	b.n	8009f3a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 81da 	beq.w	800a2f6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	4abc      	ldr	r2, [pc, #752]	; (800a238 <UART_SetConfig+0x9c8>)
 8009f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f54:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	6a3a      	ldr	r2, [r7, #32]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d305      	bcc.n	8009f72 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f6c:	6a3a      	ldr	r2, [r7, #32]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d903      	bls.n	8009f7a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f78:	e1bd      	b.n	800a2f6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f04f 0100 	mov.w	r1, #0
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	4aac      	ldr	r2, [pc, #688]	; (800a238 <UART_SetConfig+0x9c8>)
 8009f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	f7f6 f9a1 	bl	80002d8 <__aeabi_uldivmod>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f04f 0200 	mov.w	r2, #0
 8009fa2:	f04f 0300 	mov.w	r3, #0
 8009fa6:	020b      	lsls	r3, r1, #8
 8009fa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fac:	0202      	lsls	r2, r0, #8
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	6849      	ldr	r1, [r1, #4]
 8009fb2:	0849      	lsrs	r1, r1, #1
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	f04f 0100 	mov.w	r1, #0
 8009fba:	1814      	adds	r4, r2, r0
 8009fbc:	eb43 0501 	adc.w	r5, r3, r1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 f983 	bl	80002d8 <__aeabi_uldivmod>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fe0:	d308      	bcc.n	8009ff4 <UART_SetConfig+0x784>
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fe8:	d204      	bcs.n	8009ff4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	e180      	b.n	800a2f6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ffa:	e17c      	b.n	800a2f6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a004:	f040 80be 	bne.w	800a184 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	dc49      	bgt.n	800a0a4 <UART_SetConfig+0x834>
 800a010:	2b00      	cmp	r3, #0
 800a012:	db7c      	blt.n	800a10e <UART_SetConfig+0x89e>
 800a014:	2b20      	cmp	r3, #32
 800a016:	d87a      	bhi.n	800a10e <UART_SetConfig+0x89e>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <UART_SetConfig+0x7b0>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a0ab 	.word	0x0800a0ab
 800a024:	0800a0b3 	.word	0x0800a0b3
 800a028:	0800a10f 	.word	0x0800a10f
 800a02c:	0800a10f 	.word	0x0800a10f
 800a030:	0800a0bb 	.word	0x0800a0bb
 800a034:	0800a10f 	.word	0x0800a10f
 800a038:	0800a10f 	.word	0x0800a10f
 800a03c:	0800a10f 	.word	0x0800a10f
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a10f 	.word	0x0800a10f
 800a048:	0800a10f 	.word	0x0800a10f
 800a04c:	0800a10f 	.word	0x0800a10f
 800a050:	0800a10f 	.word	0x0800a10f
 800a054:	0800a10f 	.word	0x0800a10f
 800a058:	0800a10f 	.word	0x0800a10f
 800a05c:	0800a10f 	.word	0x0800a10f
 800a060:	0800a0db 	.word	0x0800a0db
 800a064:	0800a10f 	.word	0x0800a10f
 800a068:	0800a10f 	.word	0x0800a10f
 800a06c:	0800a10f 	.word	0x0800a10f
 800a070:	0800a10f 	.word	0x0800a10f
 800a074:	0800a10f 	.word	0x0800a10f
 800a078:	0800a10f 	.word	0x0800a10f
 800a07c:	0800a10f 	.word	0x0800a10f
 800a080:	0800a10f 	.word	0x0800a10f
 800a084:	0800a10f 	.word	0x0800a10f
 800a088:	0800a10f 	.word	0x0800a10f
 800a08c:	0800a10f 	.word	0x0800a10f
 800a090:	0800a10f 	.word	0x0800a10f
 800a094:	0800a10f 	.word	0x0800a10f
 800a098:	0800a10f 	.word	0x0800a10f
 800a09c:	0800a10f 	.word	0x0800a10f
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d02e      	beq.n	800a106 <UART_SetConfig+0x896>
 800a0a8:	e031      	b.n	800a10e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0aa:	f7fc fd21 	bl	8006af0 <HAL_RCC_GetPCLK1Freq>
 800a0ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0b0:	e033      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b2:	f7fc fd33 	bl	8006b1c <HAL_RCC_GetPCLK2Freq>
 800a0b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0b8:	e02f      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ba:	f107 0314 	add.w	r3, r7, #20
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fd fc98 	bl	80079f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c8:	e027      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fd fde4 	bl	8007c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d8:	e01f      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0da:	4b58      	ldr	r3, [pc, #352]	; (800a23c <UART_SetConfig+0x9cc>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0e6:	4b55      	ldr	r3, [pc, #340]	; (800a23c <UART_SetConfig+0x9cc>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	08db      	lsrs	r3, r3, #3
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	4a53      	ldr	r2, [pc, #332]	; (800a240 <UART_SetConfig+0x9d0>)
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0f8:	e00f      	b.n	800a11a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a0fa:	4b51      	ldr	r3, [pc, #324]	; (800a240 <UART_SetConfig+0x9d0>)
 800a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0fe:	e00c      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a100:	4b4c      	ldr	r3, [pc, #304]	; (800a234 <UART_SetConfig+0x9c4>)
 800a102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a104:	e009      	b.n	800a11a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a10c:	e005      	b.n	800a11a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 80ea 	beq.w	800a2f6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	4a44      	ldr	r2, [pc, #272]	; (800a238 <UART_SetConfig+0x9c8>)
 800a128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	fbb3 f3f2 	udiv	r3, r3, r2
 800a134:	005a      	lsls	r2, r3, #1
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	441a      	add	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	fbb2 f3f3 	udiv	r3, r2, r3
 800a146:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	2b0f      	cmp	r3, #15
 800a14c:	d916      	bls.n	800a17c <UART_SetConfig+0x90c>
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a154:	d212      	bcs.n	800a17c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	b29b      	uxth	r3, r3
 800a15a:	f023 030f 	bic.w	r3, r3, #15
 800a15e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	b29b      	uxth	r3, r3
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a16e:	4313      	orrs	r3, r2
 800a170:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a178:	60da      	str	r2, [r3, #12]
 800a17a:	e0bc      	b.n	800a2f6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a182:	e0b8      	b.n	800a2f6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a184:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a188:	2b20      	cmp	r3, #32
 800a18a:	dc4b      	bgt.n	800a224 <UART_SetConfig+0x9b4>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f2c0 8087 	blt.w	800a2a0 <UART_SetConfig+0xa30>
 800a192:	2b20      	cmp	r3, #32
 800a194:	f200 8084 	bhi.w	800a2a0 <UART_SetConfig+0xa30>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x930>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a22b 	.word	0x0800a22b
 800a1a4:	0800a245 	.word	0x0800a245
 800a1a8:	0800a2a1 	.word	0x0800a2a1
 800a1ac:	0800a2a1 	.word	0x0800a2a1
 800a1b0:	0800a24d 	.word	0x0800a24d
 800a1b4:	0800a2a1 	.word	0x0800a2a1
 800a1b8:	0800a2a1 	.word	0x0800a2a1
 800a1bc:	0800a2a1 	.word	0x0800a2a1
 800a1c0:	0800a25d 	.word	0x0800a25d
 800a1c4:	0800a2a1 	.word	0x0800a2a1
 800a1c8:	0800a2a1 	.word	0x0800a2a1
 800a1cc:	0800a2a1 	.word	0x0800a2a1
 800a1d0:	0800a2a1 	.word	0x0800a2a1
 800a1d4:	0800a2a1 	.word	0x0800a2a1
 800a1d8:	0800a2a1 	.word	0x0800a2a1
 800a1dc:	0800a2a1 	.word	0x0800a2a1
 800a1e0:	0800a26d 	.word	0x0800a26d
 800a1e4:	0800a2a1 	.word	0x0800a2a1
 800a1e8:	0800a2a1 	.word	0x0800a2a1
 800a1ec:	0800a2a1 	.word	0x0800a2a1
 800a1f0:	0800a2a1 	.word	0x0800a2a1
 800a1f4:	0800a2a1 	.word	0x0800a2a1
 800a1f8:	0800a2a1 	.word	0x0800a2a1
 800a1fc:	0800a2a1 	.word	0x0800a2a1
 800a200:	0800a2a1 	.word	0x0800a2a1
 800a204:	0800a2a1 	.word	0x0800a2a1
 800a208:	0800a2a1 	.word	0x0800a2a1
 800a20c:	0800a2a1 	.word	0x0800a2a1
 800a210:	0800a2a1 	.word	0x0800a2a1
 800a214:	0800a2a1 	.word	0x0800a2a1
 800a218:	0800a2a1 	.word	0x0800a2a1
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a293 	.word	0x0800a293
 800a224:	2b40      	cmp	r3, #64	; 0x40
 800a226:	d037      	beq.n	800a298 <UART_SetConfig+0xa28>
 800a228:	e03a      	b.n	800a2a0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a22a:	f7fc fc61 	bl	8006af0 <HAL_RCC_GetPCLK1Freq>
 800a22e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a230:	e03c      	b.n	800a2ac <UART_SetConfig+0xa3c>
 800a232:	bf00      	nop
 800a234:	003d0900 	.word	0x003d0900
 800a238:	0800cafc 	.word	0x0800cafc
 800a23c:	58024400 	.word	0x58024400
 800a240:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a244:	f7fc fc6a 	bl	8006b1c <HAL_RCC_GetPCLK2Freq>
 800a248:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a24a:	e02f      	b.n	800a2ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a24c:	f107 0314 	add.w	r3, r7, #20
 800a250:	4618      	mov	r0, r3
 800a252:	f7fd fbcf 	bl	80079f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25a:	e027      	b.n	800a2ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a25c:	f107 0308 	add.w	r3, r7, #8
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd fd1b 	bl	8007c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a26a:	e01f      	b.n	800a2ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a26c:	4b2c      	ldr	r3, [pc, #176]	; (800a320 <UART_SetConfig+0xab0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d009      	beq.n	800a28c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a278:	4b29      	ldr	r3, [pc, #164]	; (800a320 <UART_SetConfig+0xab0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	08db      	lsrs	r3, r3, #3
 800a27e:	f003 0303 	and.w	r3, r3, #3
 800a282:	4a28      	ldr	r2, [pc, #160]	; (800a324 <UART_SetConfig+0xab4>)
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a28a:	e00f      	b.n	800a2ac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <UART_SetConfig+0xab4>)
 800a28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a290:	e00c      	b.n	800a2ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a292:	4b25      	ldr	r3, [pc, #148]	; (800a328 <UART_SetConfig+0xab8>)
 800a294:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a296:	e009      	b.n	800a2ac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a29e:	e005      	b.n	800a2ac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d021      	beq.n	800a2f6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	4a1d      	ldr	r2, [pc, #116]	; (800a32c <UART_SetConfig+0xabc>)
 800a2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	085b      	lsrs	r3, r3, #1
 800a2ca:	441a      	add	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	2b0f      	cmp	r3, #15
 800a2da:	d909      	bls.n	800a2f0 <UART_SetConfig+0xa80>
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e2:	d205      	bcs.n	800a2f0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60da      	str	r2, [r3, #12]
 800a2ee:	e002      	b.n	800a2f6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a312:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a316:	4618      	mov	r0, r3
 800a318:	3738      	adds	r7, #56	; 0x38
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bdb0      	pop	{r4, r5, r7, pc}
 800a31e:	bf00      	nop
 800a320:	58024400 	.word	0x58024400
 800a324:	03d09000 	.word	0x03d09000
 800a328:	003d0900 	.word	0x003d0900
 800a32c:	0800cafc 	.word	0x0800cafc

0800a330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	f003 0308 	and.w	r3, r3, #8
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00a      	beq.n	800a3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	f003 0310 	and.w	r3, r3, #16
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d01a      	beq.n	800a446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a42e:	d10a      	bne.n	800a446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00a      	beq.n	800a468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	605a      	str	r2, [r3, #4]
  }
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af02      	add	r7, sp, #8
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a484:	f7f8 fb6a 	bl	8002b5c <HAL_GetTick>
 800a488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b08      	cmp	r3, #8
 800a496:	d10e      	bne.n	800a4b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f82f 	bl	800a50a <UART_WaitOnFlagUntilTimeout>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e025      	b.n	800a502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d10e      	bne.n	800a4e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f819 	bl	800a50a <UART_WaitOnFlagUntilTimeout>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e00f      	b.n	800a502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b09c      	sub	sp, #112	; 0x70
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	4613      	mov	r3, r2
 800a518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a51a:	e0a9      	b.n	800a670 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a522:	f000 80a5 	beq.w	800a670 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a526:	f7f8 fb19 	bl	8002b5c <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a532:	429a      	cmp	r2, r3
 800a534:	d302      	bcc.n	800a53c <UART_WaitOnFlagUntilTimeout+0x32>
 800a536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d140      	bne.n	800a5be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a550:	667b      	str	r3, [r7, #100]	; 0x64
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a55a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a55c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e6      	bne.n	800a53c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	663b      	str	r3, [r7, #96]	; 0x60
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a58e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e069      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d051      	beq.n	800a670 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5da:	d149      	bne.n	800a670 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
 800a606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3308      	adds	r3, #8
 800a61e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	613b      	str	r3, [r7, #16]
   return(result);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a638:	623a      	str	r2, [r7, #32]
 800a63a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	69f9      	ldr	r1, [r7, #28]
 800a63e:	6a3a      	ldr	r2, [r7, #32]
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	61bb      	str	r3, [r7, #24]
   return(result);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e5      	bne.n	800a618 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2220      	movs	r2, #32
 800a658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2220      	movs	r2, #32
 800a660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e010      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69da      	ldr	r2, [r3, #28]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4013      	ands	r3, r2
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	bf0c      	ite	eq
 800a680:	2301      	moveq	r3, #1
 800a682:	2300      	movne	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	461a      	mov	r2, r3
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	f43f af46 	beq.w	800a51c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3770      	adds	r7, #112	; 0x70
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e027      	b.n	800a700 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2224      	movs	r2, #36	; 0x24
 800a6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a720:	2302      	movs	r3, #2
 800a722:	e02d      	b.n	800a780 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2224      	movs	r2, #36	; 0x24
 800a730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 0201 	bic.w	r2, r2, #1
 800a74a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f84f 	bl	800a804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d101      	bne.n	800a7a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a79c:	2302      	movs	r3, #2
 800a79e:	e02d      	b.n	800a7fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2224      	movs	r2, #36	; 0x24
 800a7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0201 	bic.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f811 	bl	800a804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a810:	2b00      	cmp	r3, #0
 800a812:	d108      	bne.n	800a826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a824:	e031      	b.n	800a88a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a826:	2310      	movs	r3, #16
 800a828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a82a:	2310      	movs	r3, #16
 800a82c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	0e5b      	lsrs	r3, r3, #25
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	0f5b      	lsrs	r3, r3, #29
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	7b3a      	ldrb	r2, [r7, #12]
 800a852:	4911      	ldr	r1, [pc, #68]	; (800a898 <UARTEx_SetNbDataToProcess+0x94>)
 800a854:	5c8a      	ldrb	r2, [r1, r2]
 800a856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a85a:	7b3a      	ldrb	r2, [r7, #12]
 800a85c:	490f      	ldr	r1, [pc, #60]	; (800a89c <UARTEx_SetNbDataToProcess+0x98>)
 800a85e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a860:	fb93 f3f2 	sdiv	r3, r3, r2
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	7b7a      	ldrb	r2, [r7, #13]
 800a870:	4909      	ldr	r1, [pc, #36]	; (800a898 <UARTEx_SetNbDataToProcess+0x94>)
 800a872:	5c8a      	ldrb	r2, [r1, r2]
 800a874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a878:	7b7a      	ldrb	r2, [r7, #13]
 800a87a:	4908      	ldr	r1, [pc, #32]	; (800a89c <UARTEx_SetNbDataToProcess+0x98>)
 800a87c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a87e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	0800cb14 	.word	0x0800cb14
 800a89c:	0800cb1c 	.word	0x0800cb1c

0800a8a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 001c 	add.w	r0, r7, #28
 800a8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d120      	bne.n	800a8fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <USB_CoreInit+0xd4>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d105      	bne.n	800a8ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 faa8 	bl	800ae44 <USB_CoreReset>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e01a      	b.n	800a930 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa9c 	bl	800ae44 <USB_CoreReset>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
 800a922:	e005      	b.n	800a930 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	2b01      	cmp	r3, #1
 800a934:	d116      	bne.n	800a964 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <USB_CoreInit+0xd8>)
 800a946:	4313      	orrs	r3, r2
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f043 0206 	orr.w	r2, r3, #6
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f043 0220 	orr.w	r2, r3, #32
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a970:	b004      	add	sp, #16
 800a972:	4770      	bx	lr
 800a974:	ffbdffbf 	.word	0xffbdffbf
 800a978:	03ee0000 	.word	0x03ee0000

0800a97c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f023 0201 	bic.w	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d115      	bne.n	800a9ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7f8 f8d1 	bl	8002b74 <HAL_Delay>
      ms++;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fa25 	bl	800ae28 <USB_GetMode>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d01e      	beq.n	800aa22 <USB_SetCurrentMode+0x84>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b31      	cmp	r3, #49	; 0x31
 800a9e8:	d9f0      	bls.n	800a9cc <USB_SetCurrentMode+0x2e>
 800a9ea:	e01a      	b.n	800aa22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d115      	bne.n	800aa1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f7f8 f8b8 	bl	8002b74 <HAL_Delay>
      ms++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa0c 	bl	800ae28 <USB_GetMode>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <USB_SetCurrentMode+0x84>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b31      	cmp	r3, #49	; 0x31
 800aa1a:	d9f0      	bls.n	800a9fe <USB_SetCurrentMode+0x60>
 800aa1c:	e001      	b.n	800aa22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e005      	b.n	800aa2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b32      	cmp	r3, #50	; 0x32
 800aa26:	d101      	bne.n	800aa2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa38:	b084      	sub	sp, #16
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e009      	b.n	800aa6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3340      	adds	r3, #64	; 0x40
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b0e      	cmp	r3, #14
 800aa70:	d9f2      	bls.n	800aa58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11c      	bne.n	800aab2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e005      	b.n	800aabe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac4:	461a      	mov	r2, r3
 800aac6:	2300      	movs	r3, #0
 800aac8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad0:	4619      	mov	r1, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad8:	461a      	mov	r2, r3
 800aada:	680b      	ldr	r3, [r1, #0]
 800aadc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d10c      	bne.n	800aafe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d104      	bne.n	800aaf4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f961 	bl	800adb4 <USB_SetDevSpeed>
 800aaf2:	e008      	b.n	800ab06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f95c 	bl	800adb4 <USB_SetDevSpeed>
 800aafc:	e003      	b.n	800ab06 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aafe:	2103      	movs	r1, #3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f957 	bl	800adb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab06:	2110      	movs	r1, #16
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f8f3 	bl	800acf4 <USB_FlushTxFifo>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f91d 	bl	800ad58 <USB_FlushRxFifo>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2e:	461a      	mov	r2, r3
 800ab30:	2300      	movs	r3, #0
 800ab32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	461a      	mov	r2, r3
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	613b      	str	r3, [r7, #16]
 800ab50:	e043      	b.n	800abda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab68:	d118      	bne.n	800ab9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e013      	b.n	800abae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	461a      	mov	r2, r3
 800ab94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	e008      	b.n	800abae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba8:	461a      	mov	r2, r3
 800abaa:	2300      	movs	r3, #0
 800abac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abba:	461a      	mov	r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abcc:	461a      	mov	r2, r3
 800abce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d3b7      	bcc.n	800ab52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	e043      	b.n	800ac70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abfe:	d118      	bne.n	800ac32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac12:	461a      	mov	r2, r3
 800ac14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e013      	b.n	800ac44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac28:	461a      	mov	r2, r3
 800ac2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e008      	b.n	800ac44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3e:	461a      	mov	r2, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	461a      	mov	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	461a      	mov	r2, r3
 800ac64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3b7      	bcc.n	800abe8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d105      	bne.n	800acac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	f043 0210 	orr.w	r2, r3, #16
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699a      	ldr	r2, [r3, #24]
 800acb0:	4b0e      	ldr	r3, [pc, #56]	; (800acec <USB_DevInit+0x2b4>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	f043 0208 	orr.w	r2, r3, #8
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d105      	bne.n	800acdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699a      	ldr	r2, [r3, #24]
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <USB_DevInit+0x2b8>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ace8:	b004      	add	sp, #16
 800acea:	4770      	bx	lr
 800acec:	803c3800 	.word	0x803c3800
 800acf0:	40000004 	.word	0x40000004

0800acf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	4a12      	ldr	r2, [pc, #72]	; (800ad54 <USB_FlushTxFifo+0x60>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d901      	bls.n	800ad12 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e01a      	b.n	800ad48 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	daf3      	bge.n	800ad02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	019b      	lsls	r3, r3, #6
 800ad22:	f043 0220 	orr.w	r2, r3, #32
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	4a08      	ldr	r2, [pc, #32]	; (800ad54 <USB_FlushTxFifo+0x60>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d901      	bls.n	800ad3a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e006      	b.n	800ad48 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d0f1      	beq.n	800ad2a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	00030d40 	.word	0x00030d40

0800ad58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3301      	adds	r3, #1
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <USB_FlushRxFifo+0x58>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d901      	bls.n	800ad74 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e017      	b.n	800ada4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	daf3      	bge.n	800ad64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2210      	movs	r2, #16
 800ad84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	4a08      	ldr	r2, [pc, #32]	; (800adb0 <USB_FlushRxFifo+0x58>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d901      	bls.n	800ad96 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e006      	b.n	800ada4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0310 	and.w	r3, r3, #16
 800ad9e:	2b10      	cmp	r3, #16
 800ada0:	d0f1      	beq.n	800ad86 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	00030d40 	.word	0x00030d40

0800adb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	78fb      	ldrb	r3, [r7, #3]
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800add4:	4313      	orrs	r3, r2
 800add6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b085      	sub	sp, #20
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae00:	f023 0303 	bic.w	r3, r3, #3
 800ae04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae14:	f043 0302 	orr.w	r3, r3, #2
 800ae18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	f003 0301 	and.w	r3, r3, #1
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3301      	adds	r3, #1
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	4a13      	ldr	r2, [pc, #76]	; (800aea4 <USB_CoreReset+0x60>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d901      	bls.n	800ae60 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e01a      	b.n	800ae96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	daf3      	bge.n	800ae50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	f043 0201 	orr.w	r2, r3, #1
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <USB_CoreReset+0x60>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d901      	bls.n	800ae88 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e006      	b.n	800ae96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d0f1      	beq.n	800ae78 <USB_CoreReset+0x34>

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	00030d40 	.word	0x00030d40

0800aea8 <__libc_init_array>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	4d0d      	ldr	r5, [pc, #52]	; (800aee0 <__libc_init_array+0x38>)
 800aeac:	4c0d      	ldr	r4, [pc, #52]	; (800aee4 <__libc_init_array+0x3c>)
 800aeae:	1b64      	subs	r4, r4, r5
 800aeb0:	10a4      	asrs	r4, r4, #2
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	42a6      	cmp	r6, r4
 800aeb6:	d109      	bne.n	800aecc <__libc_init_array+0x24>
 800aeb8:	4d0b      	ldr	r5, [pc, #44]	; (800aee8 <__libc_init_array+0x40>)
 800aeba:	4c0c      	ldr	r4, [pc, #48]	; (800aeec <__libc_init_array+0x44>)
 800aebc:	f000 f820 	bl	800af00 <_init>
 800aec0:	1b64      	subs	r4, r4, r5
 800aec2:	10a4      	asrs	r4, r4, #2
 800aec4:	2600      	movs	r6, #0
 800aec6:	42a6      	cmp	r6, r4
 800aec8:	d105      	bne.n	800aed6 <__libc_init_array+0x2e>
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed0:	4798      	blx	r3
 800aed2:	3601      	adds	r6, #1
 800aed4:	e7ee      	b.n	800aeb4 <__libc_init_array+0xc>
 800aed6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeda:	4798      	blx	r3
 800aedc:	3601      	adds	r6, #1
 800aede:	e7f2      	b.n	800aec6 <__libc_init_array+0x1e>
 800aee0:	0800cb2c 	.word	0x0800cb2c
 800aee4:	0800cb2c 	.word	0x0800cb2c
 800aee8:	0800cb2c 	.word	0x0800cb2c
 800aeec:	0800cb30 	.word	0x0800cb30

0800aef0 <memset>:
 800aef0:	4402      	add	r2, r0
 800aef2:	4603      	mov	r3, r0
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d100      	bne.n	800aefa <memset+0xa>
 800aef8:	4770      	bx	lr
 800aefa:	f803 1b01 	strb.w	r1, [r3], #1
 800aefe:	e7f9      	b.n	800aef4 <memset+0x4>

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
