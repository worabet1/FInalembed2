
Finalembed2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006748  08006748  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006750  08006750  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  24000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000050  080067a8  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000b0  08006808  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000614  24000110  08006868  00020110  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000724  08006868  00020724  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 14 .debug_info   000238f2  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000349b  00000000  00000000  00043a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001018  00000000  00000000  00046ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f30  00000000  00000000  00047ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a308  00000000  00000000  00048e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000148b6  00000000  00000000  00083120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018035b  00000000  00000000  000979d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00217d31  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004420  00000000  00000000  00217d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000110 	.word	0x24000110
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066f8 	.word	0x080066f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000114 	.word	0x24000114
 80002d4:	080066f8 	.word	0x080066f8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b9b      	ldr	r3, [pc, #620]	; (8000980 <main+0x27c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 fd6f 	bl	8001210 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 ff9d 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f9a5 	bl	8000a84 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b91      	ldr	r3, [pc, #580]	; (8000980 <main+0x27c>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a8f      	ldr	r2, [pc, #572]	; (8000980 <main+0x27c>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b8d      	ldr	r3, [pc, #564]	; (8000980 <main+0x27c>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 ff3b 	bl	80025d4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 ff51 	bl	8002608 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b84      	ldr	r3, [pc, #528]	; (8000980 <main+0x27c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 fd41 	bl	8001210 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 fac7 	bl	8000d20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000792:	f000 f9fb 	bl	8000b8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000796:	f000 fa45 	bl	8000c24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 fa8f 	bl	8000cbc <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ButtonMatrixUpdate();
 800079e:	f000 fc01 	bl	8000fa4 <ButtonMatrixUpdate>
	  		press[0] = ButtonMatrixState;
 80007a2:	4b78      	ldr	r3, [pc, #480]	; (8000984 <main+0x280>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b77      	ldr	r3, [pc, #476]	; (8000988 <main+0x284>)
 80007aa:	601a      	str	r2, [r3, #0]
	  		if (press[0] != press[1] && press[0] != 0) {
 80007ac:	4b76      	ldr	r3, [pc, #472]	; (8000988 <main+0x284>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b75      	ldr	r3, [pc, #468]	; (8000988 <main+0x284>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f000 8153 	beq.w	8000a60 <main+0x35c>
 80007ba:	4b73      	ldr	r3, [pc, #460]	; (8000988 <main+0x284>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 814e 	beq.w	8000a60 <main+0x35c>
	  			if (state == 0) {
 80007c4:	4b71      	ldr	r3, [pc, #452]	; (800098c <main+0x288>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d110      	bne.n	80007ee <main+0xea>
	  				if (ButtonMatrixState != 0b100000000000) {
 80007cc:	4b6d      	ldr	r3, [pc, #436]	; (8000984 <main+0x280>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007d4:	d061      	beq.n	800089a <main+0x196>
	  					password[0] = Button(ButtonMatrixState);
 80007d6:	4b6b      	ldr	r3, [pc, #428]	; (8000984 <main+0x280>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fc74 	bl	80010c8 <Button>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a6b      	ldr	r2, [pc, #428]	; (8000990 <main+0x28c>)
 80007e4:	6013      	str	r3, [r2, #0]
	  					state = 1;
 80007e6:	4b69      	ldr	r3, [pc, #420]	; (800098c <main+0x288>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e055      	b.n	800089a <main+0x196>
	  				}
	  			} else if (state == 1) {
 80007ee:	4b67      	ldr	r3, [pc, #412]	; (800098c <main+0x288>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d118      	bne.n	8000828 <main+0x124>
	  				if (ButtonMatrixState == 0b100000000000) {
 80007f6:	4b63      	ldr	r3, [pc, #396]	; (8000984 <main+0x280>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007fe:	d107      	bne.n	8000810 <main+0x10c>
	  					password[0] = -16;
 8000800:	4b63      	ldr	r3, [pc, #396]	; (8000990 <main+0x28c>)
 8000802:	f06f 020f 	mvn.w	r2, #15
 8000806:	601a      	str	r2, [r3, #0]
	  					state = 0;
 8000808:	4b60      	ldr	r3, [pc, #384]	; (800098c <main+0x288>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e044      	b.n	800089a <main+0x196>
	  				} else {
	  					password[1] = Button(ButtonMatrixState);
 8000810:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <main+0x280>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fc57 	bl	80010c8 <Button>
 800081a:	4603      	mov	r3, r0
 800081c:	4a5c      	ldr	r2, [pc, #368]	; (8000990 <main+0x28c>)
 800081e:	6053      	str	r3, [r2, #4]
	  					state = 2;
 8000820:	4b5a      	ldr	r3, [pc, #360]	; (800098c <main+0x288>)
 8000822:	2202      	movs	r2, #2
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e038      	b.n	800089a <main+0x196>
	  				}
	  			} else if (state == 2) {
 8000828:	4b58      	ldr	r3, [pc, #352]	; (800098c <main+0x288>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d118      	bne.n	8000862 <main+0x15e>
	  				if (ButtonMatrixState == 0b100000000000) {
 8000830:	4b54      	ldr	r3, [pc, #336]	; (8000984 <main+0x280>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000838:	d107      	bne.n	800084a <main+0x146>
	  					password[1] = -16;
 800083a:	4b55      	ldr	r3, [pc, #340]	; (8000990 <main+0x28c>)
 800083c:	f06f 020f 	mvn.w	r2, #15
 8000840:	605a      	str	r2, [r3, #4]
	  					state = 1;
 8000842:	4b52      	ldr	r3, [pc, #328]	; (800098c <main+0x288>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	e027      	b.n	800089a <main+0x196>
	  				} else {
	  					password[2] = Button(ButtonMatrixState);
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <main+0x280>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fc3a 	bl	80010c8 <Button>
 8000854:	4603      	mov	r3, r0
 8000856:	4a4e      	ldr	r2, [pc, #312]	; (8000990 <main+0x28c>)
 8000858:	6093      	str	r3, [r2, #8]
	  					state = 3;
 800085a:	4b4c      	ldr	r3, [pc, #304]	; (800098c <main+0x288>)
 800085c:	2203      	movs	r2, #3
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e01b      	b.n	800089a <main+0x196>
	  				}
	  			} else if (state == 3) {
 8000862:	4b4a      	ldr	r3, [pc, #296]	; (800098c <main+0x288>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d117      	bne.n	800089a <main+0x196>
	  				if (ButtonMatrixState == 0b100000000000) {
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <main+0x280>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000872:	d107      	bne.n	8000884 <main+0x180>
	  					password[2] = -16;
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <main+0x28c>)
 8000876:	f06f 020f 	mvn.w	r2, #15
 800087a:	609a      	str	r2, [r3, #8]
	  					state = 2;
 800087c:	4b43      	ldr	r3, [pc, #268]	; (800098c <main+0x288>)
 800087e:	2202      	movs	r2, #2
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e00a      	b.n	800089a <main+0x196>
	  				} else {
	  					password[3] = Button(ButtonMatrixState);
 8000884:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <main+0x280>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fc1d 	bl	80010c8 <Button>
 800088e:	4603      	mov	r3, r0
 8000890:	4a3f      	ldr	r2, [pc, #252]	; (8000990 <main+0x28c>)
 8000892:	60d3      	str	r3, [r2, #12]
	  					state = 4;
 8000894:	4b3d      	ldr	r3, [pc, #244]	; (800098c <main+0x288>)
 8000896:	2204      	movs	r2, #4
 8000898:	601a      	str	r2, [r3, #0]
	  				}
	  			}
	  			if (state == 4) {
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <main+0x288>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	f040 80de 	bne.w	8000a60 <main+0x35c>
	  				if (setpassword ==3){
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <main+0x290>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d12e      	bne.n	800090a <main+0x206>
	  					if(password[0] == verify[0] &&password[1] == verify[1] &&password[2] == verify[2] &&password[3] == verify[3]){
 80008ac:	4b38      	ldr	r3, [pc, #224]	; (8000990 <main+0x28c>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <main+0x294>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d121      	bne.n	80008fc <main+0x1f8>
 80008b8:	4b35      	ldr	r3, [pc, #212]	; (8000990 <main+0x28c>)
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <main+0x294>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d11b      	bne.n	80008fc <main+0x1f8>
 80008c4:	4b32      	ldr	r3, [pc, #200]	; (8000990 <main+0x28c>)
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <main+0x294>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d115      	bne.n	80008fc <main+0x1f8>
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <main+0x28c>)
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <main+0x294>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d10f      	bne.n	80008fc <main+0x1f8>
	  						key[0] = verify[0];
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <main+0x294>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a2e      	ldr	r2, [pc, #184]	; (800099c <main+0x298>)
 80008e2:	6013      	str	r3, [r2, #0]
	  						key[1] = verify[1];
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <main+0x294>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a2c      	ldr	r2, [pc, #176]	; (800099c <main+0x298>)
 80008ea:	6053      	str	r3, [r2, #4]
	  						key[2] = verify[2];
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <main+0x294>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	; (800099c <main+0x298>)
 80008f2:	6093      	str	r3, [r2, #8]
	  						key[3] = verify[3];
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <main+0x294>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <main+0x298>)
 80008fa:	60d3      	str	r3, [r2, #12]
	  					}
	  					setpassword = 0;
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <main+0x290>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
	  					state = 0;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <main+0x288>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e09a      	b.n	8000a40 <main+0x33c>
	  				}
	  				else if (setpassword == 2){
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <main+0x290>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d116      	bne.n	8000940 <main+0x23c>
	  					verify[0] = password[0];
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <main+0x28c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <main+0x294>)
 8000918:	6013      	str	r3, [r2, #0]
	  					verify[1] = password[1];
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <main+0x28c>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <main+0x294>)
 8000920:	6053      	str	r3, [r2, #4]
	  					verify[2] = password[2];
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <main+0x28c>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <main+0x294>)
 8000928:	6093      	str	r3, [r2, #8]
	  					verify[3] = password[3];
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <main+0x28c>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <main+0x294>)
 8000930:	60d3      	str	r3, [r2, #12]
	  					setpassword = 3;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <main+0x290>)
 8000934:	2203      	movs	r2, #3
 8000936:	601a      	str	r2, [r3, #0]
	  					state = 0;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <main+0x288>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e07f      	b.n	8000a40 <main+0x33c>
	  				}
	  				else if (setpassword == 1){
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <main+0x290>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d132      	bne.n	80009ae <main+0x2aa>
	  					if (password[0] == key[0] && password[1] == key[1] && password[2] == key[3]
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <main+0x28c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <main+0x298>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d125      	bne.n	80009a0 <main+0x29c>
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <main+0x28c>)
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <main+0x298>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d11f      	bne.n	80009a0 <main+0x29c>
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <main+0x28c>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <main+0x298>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d119      	bne.n	80009a0 <main+0x29c>
	  											&& password[3] == key[4]){
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <main+0x28c>)
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <main+0x298>)
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d113      	bne.n	80009a0 <main+0x29c>
	  						setpassword = 2;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <main+0x290>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	e012      	b.n	80009a6 <main+0x2a2>
 8000980:	58024400 	.word	0x58024400
 8000984:	2400012c 	.word	0x2400012c
 8000988:	24000618 	.word	0x24000618
 800098c:	24000130 	.word	0x24000130
 8000990:	24000008 	.word	0x24000008
 8000994:	24000148 	.word	0x24000148
 8000998:	2400014c 	.word	0x2400014c
 800099c:	24000134 	.word	0x24000134
	  					}else{
	  						setpassword = 0;
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <main+0x368>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	  					}
	  					state = 0;
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <main+0x36c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e048      	b.n	8000a40 <main+0x33c>
	  				}
	  				else if (password[0] == 15 && password[1] == 1 && password[2] == 2
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <main+0x370>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d112      	bne.n	80009dc <main+0x2d8>
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <main+0x370>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10e      	bne.n	80009dc <main+0x2d8>
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <main+0x370>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d10a      	bne.n	80009dc <main+0x2d8>
	  						&& password[3] == 3) {
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <main+0x370>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d106      	bne.n	80009dc <main+0x2d8>
	  					state = 0;
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <main+0x36c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
	  					setpassword = 1;
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <main+0x368>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e031      	b.n	8000a40 <main+0x33c>
	  				} else if (password[0] == 15 && password[1] == 4 && password[2] ==
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <main+0x370>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d10b      	bne.n	80009fc <main+0x2f8>
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <main+0x370>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d107      	bne.n	80009fc <main+0x2f8>
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <main+0x370>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d103      	bne.n	80009fc <main+0x2f8>
	  						5 && password[3] == 6) {
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <main+0x370>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	2b06      	cmp	r3, #6
 80009fa:	d021      	beq.n	8000a40 <main+0x33c>
	  					//	RFID
	  				}
	  				else if (password[0] == key[0] && password[1] == key[1] && password[2] == key[3]
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <main+0x370>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <main+0x374>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d118      	bne.n	8000a3a <main+0x336>
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <main+0x370>)
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <main+0x374>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d112      	bne.n	8000a3a <main+0x336>
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <main+0x370>)
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <main+0x374>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d10c      	bne.n	8000a3a <main+0x336>
	  						&& password[3] == key[4]) {
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <main+0x370>)
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <main+0x374>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d106      	bne.n	8000a3a <main+0x336>
	  					lock = 1;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <main+0x378>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
	  					state = 0;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <main+0x36c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	e002      	b.n	8000a40 <main+0x33c>
	  				}
	  				else{
	  					state = 0;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <main+0x36c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
	  				}
	  				password[0] = -16;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <main+0x370>)
 8000a42:	f06f 020f 	mvn.w	r2, #15
 8000a46:	601a      	str	r2, [r3, #0]
	  				password[1] = -16;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <main+0x370>)
 8000a4a:	f06f 020f 	mvn.w	r2, #15
 8000a4e:	605a      	str	r2, [r3, #4]
	  				password[2] = -16;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <main+0x370>)
 8000a52:	f06f 020f 	mvn.w	r2, #15
 8000a56:	609a      	str	r2, [r3, #8]
	  				password[3] = -16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <main+0x370>)
 8000a5a:	f06f 020f 	mvn.w	r2, #15
 8000a5e:	60da      	str	r2, [r3, #12]
	  			}
	  		}

	  		press[1] = press[0];
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <main+0x37c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <main+0x37c>)
 8000a66:	6053      	str	r3, [r2, #4]
	  ButtonMatrixUpdate();
 8000a68:	e699      	b.n	800079e <main+0x9a>
 8000a6a:	bf00      	nop
 8000a6c:	24000148 	.word	0x24000148
 8000a70:	24000130 	.word	0x24000130
 8000a74:	24000008 	.word	0x24000008
 8000a78:	24000134 	.word	0x24000134
 8000a7c:	24000144 	.word	0x24000144
 8000a80:	24000618 	.word	0x24000618

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 fe28 	bl	80066e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fe22 	bl	80066e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f001 ff0b 	bl	80028c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <SystemClock_Config+0xfc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a33      	ldr	r2, [pc, #204]	; (8000b80 <SystemClock_Config+0xfc>)
 8000ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemClock_Config+0xfc>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <SystemClock_Config+0x100>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <SystemClock_Config+0x100>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemClock_Config+0x100>)
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0xfc>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <SystemClock_Config+0x104>)
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f023 0303 	bic.w	r3, r3, #3
 8000af4:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <SystemClock_Config+0x104>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b12:	2378      	movs	r3, #120	; 0x78
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b22:	230c      	movs	r3, #12
 8000b24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 ff2e 	bl	8002994 <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b3e:	f000 fb67 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	233f      	movs	r3, #63	; 0x3f
 8000b44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2303      	movs	r3, #3
 8000b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2104      	movs	r1, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fb3f 	bl	80031ec <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b74:	f000 fb4c 	bl	8001210 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	; 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58024800 	.word	0x58024800
 8000b84:	58000400 	.word	0x58000400
 8000b88:	58024400 	.word	0x58024400

08000b8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_ETH_Init+0x80>)
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <MX_ETH_Init+0x84>)
 8000b94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ETH_Init+0x88>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ETH_Init+0x88>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ETH_Init+0x88>)
 8000ba4:	22e1      	movs	r2, #225	; 0xe1
 8000ba6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ETH_Init+0x88>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MX_ETH_Init+0x88>)
 8000bbe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_ETH_Init+0x8c>)
 8000bca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <MX_ETH_Init+0x90>)
 8000bd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_ETH_Init+0x80>)
 8000bdc:	f000 ff02 	bl	80019e4 <HAL_ETH_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000be6:	f000 fb13 	bl	8001210 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bea:	2234      	movs	r2, #52	; 0x34
 8000bec:	2100      	movs	r1, #0
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bf0:	f005 fd7a 	bl	80066e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bf6:	2221      	movs	r2, #33	; 0x21
 8000bf8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_ETH_Init+0x94>)
 8000bfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c00:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_ETH_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	24000624 	.word	0x24000624
 8000c10:	40028000 	.word	0x40028000
 8000c14:	24000164 	.word	0x24000164
 8000c18:	240000b0 	.word	0x240000b0
 8000c1c:	24000050 	.word	0x24000050
 8000c20:	240006ac 	.word	0x240006ac

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <MX_USART3_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c6e:	f004 f9ab 	bl	8004fc8 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 faca 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c80:	f005 f940 	bl	8005f04 <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 fac1 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c92:	f005 f975 	bl	8005f80 <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 fab8 	bl	8001210 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f005 f8f6 	bl	8005e92 <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 fab0 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24000170 	.word	0x24000170
 8000cb8:	40004800 	.word	0x40004800

08000cbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc8:	2209      	movs	r2, #9
 8000cca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d04:	f001 fc94 	bl	8002630 <HAL_PCD_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d0e:	f000 fa7f 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000200 	.word	0x24000200
 8000d1c:	40080000 	.word	0x40080000

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a92      	ldr	r2, [pc, #584]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b90      	ldr	r3, [pc, #576]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a8b      	ldr	r2, [pc, #556]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b85      	ldr	r3, [pc, #532]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a83      	ldr	r2, [pc, #524]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b81      	ldr	r3, [pc, #516]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	4a7c      	ldr	r2, [pc, #496]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da0:	4b79      	ldr	r3, [pc, #484]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b76      	ldr	r3, [pc, #472]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a74      	ldr	r2, [pc, #464]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a6d      	ldr	r2, [pc, #436]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b6a      	ldr	r3, [pc, #424]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <MX_GPIO_Init+0x268>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e0e:	485f      	ldr	r0, [pc, #380]	; (8000f8c <MX_GPIO_Init+0x26c>)
 8000e10:	f001 fbc6 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	485d      	ldr	r0, [pc, #372]	; (8000f90 <MX_GPIO_Init+0x270>)
 8000e1c:	f001 fbc0 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	485b      	ldr	r0, [pc, #364]	; (8000f94 <MX_GPIO_Init+0x274>)
 8000e28:	f001 fbba 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4859      	ldr	r0, [pc, #356]	; (8000f98 <MX_GPIO_Init+0x278>)
 8000e34:	f001 fbb4 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	21c0      	movs	r1, #192	; 0xc0
 8000e3c:	4853      	ldr	r0, [pc, #332]	; (8000f8c <MX_GPIO_Init+0x26c>)
 8000e3e:	f001 fbaf 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	4852      	ldr	r0, [pc, #328]	; (8000f90 <MX_GPIO_Init+0x270>)
 8000e48:	f001 fbaa 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	484e      	ldr	r0, [pc, #312]	; (8000f9c <MX_GPIO_Init+0x27c>)
 8000e62:	f001 f9d5 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e66:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4843      	ldr	r0, [pc, #268]	; (8000f8c <MX_GPIO_Init+0x26c>)
 8000e80:	f001 f9c6 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8000e84:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	483d      	ldr	r0, [pc, #244]	; (8000f90 <MX_GPIO_Init+0x270>)
 8000e9a:	f001 f9b9 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea4:	2311      	movs	r3, #17
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4836      	ldr	r0, [pc, #216]	; (8000f90 <MX_GPIO_Init+0x270>)
 8000eb8:	f001 f9aa 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482f      	ldr	r0, [pc, #188]	; (8000f94 <MX_GPIO_Init+0x274>)
 8000ed6:	f001 f99b 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	482a      	ldr	r0, [pc, #168]	; (8000f98 <MX_GPIO_Init+0x278>)
 8000ef0:	f001 f98e 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <MX_GPIO_Init+0x280>)
 8000f0a:	f001 f981 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	481d      	ldr	r0, [pc, #116]	; (8000f98 <MX_GPIO_Init+0x278>)
 8000f24:	f001 f974 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f2e:	2311      	movs	r3, #17
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <MX_GPIO_Init+0x278>)
 8000f42:	f001 f965 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f4a:	2311      	movs	r3, #17
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_GPIO_Init+0x26c>)
 8000f5e:	f001 f957 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_GPIO_Init+0x270>)
 8000f7a:	f001 f949 	bl	8002210 <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	; 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	58021000 	.word	0x58021000
 8000f94:	58020c00 	.word	0x58020c00
 8000f98:	58021800 	.word	0x58021800
 8000f9c:	58020800 	.word	0x58020800
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <ButtonMatrixUpdate>:
uint16_t ButtonMatrixPin[8] = { GPIO_PIN_12, GPIO_PIN_8, GPIO_PIN_11,
GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_14,
GPIO_PIN_6, GPIO_PIN_7 };

uint8_t ButtonMatrixRow = 0;  //What  R Now
void ButtonMatrixUpdate() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ButtonMatrixTimestamp >= 50) {
 8000faa:	f000 fbe7 	bl	800177c <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <ButtonMatrixUpdate+0x10c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b31      	cmp	r3, #49	; 0x31
 8000fb8:	d975      	bls.n	80010a6 <ButtonMatrixUpdate+0x102>
		x = x + 1;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <ButtonMatrixUpdate+0x110>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <ButtonMatrixUpdate+0x110>)
 8000fc2:	6013      	str	r3, [r2, #0]
		ButtonMatrixTimestamp = HAL_GetTick();
 8000fc4:	f000 fbda 	bl	800177c <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <ButtonMatrixUpdate+0x10c>)
 8000fcc:	6013      	str	r3, [r2, #0]
		int i;
		for (i = 0; i < 4; i += 1) { //0-3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e038      	b.n	8001046 <ButtonMatrixUpdate+0xa2>
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i],
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <ButtonMatrixUpdate+0x114>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fdc:	4937      	ldr	r1, [pc, #220]	; (80010bc <ButtonMatrixUpdate+0x118>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f001 fac2 	bl	8002570 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	707b      	strb	r3, [r7, #1]
					ButtonMatrixPin[i]);
			if (PinState == GPIO_PIN_RESET) // Button Press
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d111      	bne.n	800101a <ButtonMatrixUpdate+0x76>
					{
				ButtonMatrixState |= (uint16_t) 1 << (i + ButtonMatrixRow * 4);
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <ButtonMatrixUpdate+0x120>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <ButtonMatrixUpdate+0x120>)
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	e012      	b.n	8001040 <ButtonMatrixUpdate+0x9c>
			} else {
				ButtonMatrixState &=
						~((uint16_t) 1 << (i + ButtonMatrixRow * 4));
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	009a      	lsls	r2, r3, #2
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	2201      	movs	r2, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
				ButtonMatrixState &=
 800102a:	b21b      	sxth	r3, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <ButtonMatrixUpdate+0x120>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <ButtonMatrixUpdate+0x120>)
 800103e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; i += 1) { //0-3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	ddc3      	ble.n	8000fd4 <ButtonMatrixUpdate+0x30>
			}
		}
		uint8_t NowOutputPin = ButtonMatrixRow + 4;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	70fb      	strb	r3, [r7, #3]
		//SET Rn
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin],
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <ButtonMatrixUpdate+0x114>)
 8001058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <ButtonMatrixUpdate+0x118>)
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	f001 fa9a 	bl	80025a0 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
		// update New Row
		ButtonMatrixRow = (ButtonMatrixRow + 1) % 4;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	425a      	negs	r2, r3
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	bf58      	it	pl
 800107e:	4253      	negpl	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 8001084:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixRow + 4;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <ButtonMatrixUpdate+0x11c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	70bb      	strb	r3, [r7, #2]
		//Reset Rn+1
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin],
 800108e:	78bb      	ldrb	r3, [r7, #2]
 8001090:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <ButtonMatrixUpdate+0x114>)
 8001092:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001096:	78bb      	ldrb	r3, [r7, #2]
 8001098:	4a08      	ldr	r2, [pc, #32]	; (80010bc <ButtonMatrixUpdate+0x118>)
 800109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	f001 fa7d 	bl	80025a0 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);

	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2400015c 	.word	0x2400015c
 80010b4:	2400016c 	.word	0x2400016c
 80010b8:	24000018 	.word	0x24000018
 80010bc:	24000038 	.word	0x24000038
 80010c0:	24000160 	.word	0x24000160
 80010c4:	2400012c 	.word	0x2400012c

080010c8 <Button>:
int Button( ButtonMatrixState) {
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	int pass = -16;
 80010d0:	f06f 030f 	mvn.w	r3, #15
 80010d4:	60fb      	str	r3, [r7, #12]
	switch (ButtonMatrixState) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	f000 808d 	beq.w	80011fa <Button+0x132>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e6:	f300 808b 	bgt.w	8001200 <Button+0x138>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f0:	f000 8080 	beq.w	80011f4 <Button+0x12c>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fa:	f300 8081 	bgt.w	8001200 <Button+0x138>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	d073      	beq.n	80011ee <Button+0x126>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110c:	dc78      	bgt.n	8001200 <Button+0x138>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b80      	cmp	r3, #128	; 0x80
 8001112:	d069      	beq.n	80011e8 <Button+0x120>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b80      	cmp	r3, #128	; 0x80
 8001118:	dc72      	bgt.n	8001200 <Button+0x138>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b20      	cmp	r3, #32
 800111e:	dc49      	bgt.n	80011b4 <Button+0xec>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dd6c      	ble.n	8001200 <Button+0x138>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3b01      	subs	r3, #1
 800112a:	2b1f      	cmp	r3, #31
 800112c:	d868      	bhi.n	8001200 <Button+0x138>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <Button+0x6c>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	080011bd 	.word	0x080011bd
 8001138:	080011c3 	.word	0x080011c3
 800113c:	08001201 	.word	0x08001201
 8001140:	080011c9 	.word	0x080011c9
 8001144:	08001201 	.word	0x08001201
 8001148:	08001201 	.word	0x08001201
 800114c:	08001201 	.word	0x08001201
 8001150:	080011cf 	.word	0x080011cf
 8001154:	08001201 	.word	0x08001201
 8001158:	08001201 	.word	0x08001201
 800115c:	08001201 	.word	0x08001201
 8001160:	08001201 	.word	0x08001201
 8001164:	08001201 	.word	0x08001201
 8001168:	08001201 	.word	0x08001201
 800116c:	08001201 	.word	0x08001201
 8001170:	080011d7 	.word	0x080011d7
 8001174:	08001201 	.word	0x08001201
 8001178:	08001201 	.word	0x08001201
 800117c:	08001201 	.word	0x08001201
 8001180:	08001201 	.word	0x08001201
 8001184:	08001201 	.word	0x08001201
 8001188:	08001201 	.word	0x08001201
 800118c:	08001201 	.word	0x08001201
 8001190:	08001201 	.word	0x08001201
 8001194:	08001201 	.word	0x08001201
 8001198:	08001201 	.word	0x08001201
 800119c:	08001201 	.word	0x08001201
 80011a0:	08001201 	.word	0x08001201
 80011a4:	08001201 	.word	0x08001201
 80011a8:	08001201 	.word	0x08001201
 80011ac:	08001201 	.word	0x08001201
 80011b0:	080011dd 	.word	0x080011dd
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b40      	cmp	r3, #64	; 0x40
 80011b8:	d013      	beq.n	80011e2 <Button+0x11a>
		break;
	case 0b10000000000:
		pass = 9;
		break;
	default:
		break;
 80011ba:	e021      	b.n	8001200 <Button+0x138>
		pass = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
		break;
 80011c0:	e01f      	b.n	8001202 <Button+0x13a>
		pass = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
		break;
 80011c6:	e01c      	b.n	8001202 <Button+0x13a>
		pass = 7;
 80011c8:	2307      	movs	r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]
		break;
 80011cc:	e019      	b.n	8001202 <Button+0x13a>
		pass = -6;
 80011ce:	f06f 0305 	mvn.w	r3, #5
 80011d2:	60fb      	str	r3, [r7, #12]
		break;
 80011d4:	e015      	b.n	8001202 <Button+0x13a>
		pass = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
		break;
 80011da:	e012      	b.n	8001202 <Button+0x13a>
		pass = 5;
 80011dc:	2305      	movs	r3, #5
 80011de:	60fb      	str	r3, [r7, #12]
		break;
 80011e0:	e00f      	b.n	8001202 <Button+0x13a>
		pass = 8;
 80011e2:	2308      	movs	r3, #8
 80011e4:	60fb      	str	r3, [r7, #12]
		break;
 80011e6:	e00c      	b.n	8001202 <Button+0x13a>
		pass = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
		break;
 80011ec:	e009      	b.n	8001202 <Button+0x13a>
		pass = 3;
 80011ee:	2303      	movs	r3, #3
 80011f0:	60fb      	str	r3, [r7, #12]
		break;
 80011f2:	e006      	b.n	8001202 <Button+0x13a>
		pass = 6;
 80011f4:	2306      	movs	r3, #6
 80011f6:	60fb      	str	r3, [r7, #12]
		break;
 80011f8:	e003      	b.n	8001202 <Button+0x13a>
		pass = 9;
 80011fa:	2309      	movs	r3, #9
 80011fc:	60fb      	str	r3, [r7, #12]
		break;
 80011fe:	e000      	b.n	8001202 <Button+0x13a>
		break;
 8001200:	bf00      	nop
	}
	return pass;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_MspInit+0x30>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x30>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x30>)
 8001234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	58024400 	.word	0x58024400

08001250 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a59      	ldr	r2, [pc, #356]	; (80013d4 <HAL_ETH_MspInit+0x184>)
 800126e:	4293      	cmp	r3, r2
 8001270:	f040 80ab 	bne.w	80013ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 8001276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127a:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800127c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001280:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 8001286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800128a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800129a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012a2:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012b0:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b6:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_ETH_MspInit+0x188>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001346:	2332      	movs	r3, #50	; 0x32
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	481e      	ldr	r0, [pc, #120]	; (80013dc <HAL_ETH_MspInit+0x18c>)
 8001362:	f000 ff55 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001366:	2386      	movs	r3, #134	; 0x86
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001376:	230b      	movs	r3, #11
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4817      	ldr	r0, [pc, #92]	; (80013e0 <HAL_ETH_MspInit+0x190>)
 8001382:	f000 ff45 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001398:	230b      	movs	r3, #11
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4810      	ldr	r0, [pc, #64]	; (80013e4 <HAL_ETH_MspInit+0x194>)
 80013a4:	f000 ff34 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ba:	230b      	movs	r3, #11
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <HAL_ETH_MspInit+0x198>)
 80013c6:	f000 ff23 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40028000 	.word	0x40028000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020800 	.word	0x58020800
 80013e0:	58020000 	.word	0x58020000
 80013e4:	58020400 	.word	0x58020400
 80013e8:	58021800 	.word	0x58021800

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b8      	sub	sp, #224	; 0xe0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22bc      	movs	r2, #188	; 0xbc
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f96b 	bl	80066e8 <memset>
  if(huart->Instance==USART3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_UART_MspInit+0xc0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d142      	bne.n	80014a2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fa6a 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001436:	f7ff feeb 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 800143c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 8001442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 800144c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001490:	2307      	movs	r3, #7
 8001492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 800149e:	f000 feb7 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	37e0      	adds	r7, #224	; 0xe0
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004800 	.word	0x40004800
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020c00 	.word	0x58020c00

080014b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0b8      	sub	sp, #224	; 0xe0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	22bc      	movs	r2, #188	; 0xbc
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 f905 	bl	80066e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a36      	ldr	r2, [pc, #216]	; (80015bc <HAL_PCD_MspInit+0x104>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d165      	bne.n	80015b4 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 80014f2:	2318      	movs	r3, #24
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001502:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800150c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f9f3 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001524:	f7ff fe74 	bl	8001210 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001528:	f001 fa24 	bl	8002974 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800154a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001562:	4619      	mov	r1, r3
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <HAL_PCD_MspInit+0x10c>)
 8001566:	f000 fe53 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800156a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800156e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001584:	230a      	movs	r3, #10
 8001586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800158e:	4619      	mov	r1, r3
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <HAL_PCD_MspInit+0x10c>)
 8001592:	f000 fe3d 	bl	8002210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 8001598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 800159e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_PCD_MspInit+0x108>)
 80015a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	37e0      	adds	r7, #224	; 0xe0
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40080000 	.word	0x40080000
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020000 	.word	0x58020000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f89e 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001620:	f7fe ffd6 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001626:	490d      	ldr	r1, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800163c:	4c0a      	ldr	r4, [pc, #40]	; (8001668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164a:	f005 f829 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff f859 	bl	8000704 <main>
  bx  lr
 8001652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001658:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800165c:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8001660:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 8001664:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8001668:	24000724 	.word	0x24000724

0800166c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC3_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001676:	2003      	movs	r0, #3
 8001678:	f000 f982 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800167c:	f001 ff6c 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_Init+0x68>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	4913      	ldr	r1, [pc, #76]	; (80016dc <HAL_Init+0x6c>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_Init+0x68>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_Init+0x6c>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_Init+0x70>)
 80016b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b4:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_Init+0x74>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f814 	bl	80016e8 <HAL_InitTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e002      	b.n	80016d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ca:	f7ff fda7 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58024400 	.word	0x58024400
 80016dc:	08006710 	.word	0x08006710
 80016e0:	24000004 	.word	0x24000004
 80016e4:	24000000 	.word	0x24000000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_InitTick+0x60>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e021      	b.n	8001740 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_InitTick+0x64>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_InitTick+0x60>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f959 	bl	80019ca <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f931 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x68>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2400004c 	.word	0x2400004c
 800174c:	24000000 	.word	0x24000000
 8001750:	24000048 	.word	0x24000048

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2400004c 	.word	0x2400004c
 8001778:	24000720 	.word	0x24000720

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	24000720 	.word	0x24000720

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2400004c 	.word	0x2400004c

080017dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetREVID+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0c1b      	lsrs	r3, r3, #16
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	5c001000 	.word	0x5c001000

080017f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001804:	4904      	ldr	r1, [pc, #16]	; (8001818 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	58000400 	.word	0x58000400

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <__NVIC_SetPriorityGrouping+0x40>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x40>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	05fa0000 	.word	0x05fa0000

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff8e 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff47 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb2 	bl	800193c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c6      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fc26 	bl	8001250 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2223      	movs	r2, #35	; 0x23
 8001a08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a10:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fedf 	bl	80017f4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a36:	e003      	b.n	8001a40 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a3c:	f7ff feda 	bl	80017f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fe90 	bl	800177c <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a5e:	e00f      	b.n	8001a80 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a60:	f7ff fe8c 	bl	800177c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a6e:	d907      	bls.n	8001a80 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	22e0      	movs	r2, #224	; 0xe0
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e081      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e6      	bne.n	8001a60 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fac0 	bl	8002018 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a98:	f001 fed8 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <HAL_ETH_Init+0x1ac>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9a      	lsrs	r2, r3, #18
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa13 	bl	8001edc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001acc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	22e0      	movs	r2, #224	; 0xe0
 8001ae8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e04a      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001af6:	4413      	add	r3, r2
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_ETH_Init+0x1b0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6952      	ldr	r2, [r2, #20]
 8001b02:	0052      	lsls	r2, r2, #1
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b0e:	440b      	add	r3, r1
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fad8 	bl	80020c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fb1c 	bl	8002156 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	3305      	adds	r3, #5
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	021a      	lsls	r2, r3, #8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	3303      	adds	r3, #3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	061a      	lsls	r2, r3, #24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	ffff8001 	.word	0xffff8001

08001b98 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001baa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001bb2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	7b5b      	ldrb	r3, [r3, #13]
 8001bc0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bc2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7b9b      	ldrb	r3, [r3, #14]
 8001bc8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7bdb      	ldrb	r3, [r3, #15]
 8001bd0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bd2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	7c12      	ldrb	r2, [r2, #16]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0x4a>
 8001bdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x4c>
 8001be2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001be4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	7c52      	ldrb	r2, [r2, #17]
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d102      	bne.n	8001bf4 <ETH_SetMACConfig+0x5c>
 8001bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf2:	e000      	b.n	8001bf6 <ETH_SetMACConfig+0x5e>
 8001bf4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bf6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	7c9b      	ldrb	r3, [r3, #18]
 8001bfc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bfe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c04:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001c0a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	7f1b      	ldrb	r3, [r3, #28]
 8001c10:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c12:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7f5b      	ldrb	r3, [r3, #29]
 8001c18:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c1a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	7f92      	ldrb	r2, [r2, #30]
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d102      	bne.n	8001c2a <ETH_SetMACConfig+0x92>
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0x94>
 8001c2a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c2c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7fdb      	ldrb	r3, [r3, #31]
 8001c32:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c34:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d102      	bne.n	8001c46 <ETH_SetMACConfig+0xae>
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0xb0>
 8001c46:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c48:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c4e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c56:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c58:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <ETH_SetMACConfig+0x22c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c84:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c8e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c96:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c98:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d102      	bne.n	8001caa <ETH_SetMACConfig+0x112>
 8001ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x114>
 8001caa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001cac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <ETH_SetMACConfig+0x230>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <ETH_SetMACConfig+0x234>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cf4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cfa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d101      	bne.n	8001d0a <ETH_SetMACConfig+0x172>
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	e000      	b.n	8001d0c <ETH_SetMACConfig+0x174>
 8001d0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d0c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f023 0103 	bic.w	r1, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d101      	bne.n	8001d86 <ETH_SetMACConfig+0x1ee>
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	e000      	b.n	8001d88 <ETH_SetMACConfig+0x1f0>
 8001d86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d88:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d92:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001da8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	00048083 	.word	0x00048083
 8001dc8:	c0f88000 	.word	0xc0f88000
 8001dcc:	fffffef0 	.word	0xfffffef0

08001dd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <ETH_SetDMAConfig+0xf8>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
 8001e08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e16:	4413      	add	r3, r2
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <ETH_SetDMAConfig+0xfc>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e2a:	440b      	add	r3, r1
 8001e2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	7b5b      	ldrb	r3, [r3, #13]
 8001e32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <ETH_SetDMAConfig+0x100>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e56:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7d1b      	ldrb	r3, [r3, #20]
 8001e60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e62:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7f5b      	ldrb	r3, [r3, #29]
 8001e68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e76:	4413      	add	r3, r2
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <ETH_SetDMAConfig+0x104>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e8a:	440b      	add	r3, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <ETH_SetDMAConfig+0x108>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6811      	ldr	r1, [r2, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eb8:	440b      	add	r3, r1
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	ffff87fd 	.word	0xffff87fd
 8001ecc:	ffff2ffe 	.word	0xffff2ffe
 8001ed0:	fffec000 	.word	0xfffec000
 8001ed4:	ffc0efef 	.word	0xffc0efef
 8001ed8:	7fc0ffff 	.word	0x7fc0ffff

08001edc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0a4      	sub	sp, #144	; 0x90
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eea:	2300      	movs	r3, #0
 8001eec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f56:	2300      	movs	r3, #0
 8001f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f74:	2320      	movs	r3, #32
 8001f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fde6 	bl	8001b98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ffc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fee1 	bl	8001dd0 <ETH_SetDMAConfig>
}
 800200e:	bf00      	nop
 8002010:	3790      	adds	r7, #144	; 0x90
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002028:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002030:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002032:	f001 fc0b 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8002036:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d908      	bls.n	8002052 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d804      	bhi.n	8002052 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e027      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d908      	bls.n	800206c <ETH_MAC_MDIO_ClkConfig+0x54>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d204      	bcs.n	800206c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e01a      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d303      	bcc.n	800207c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d911      	bls.n	80020a0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d908      	bls.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d804      	bhi.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e005      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e000      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80020a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	01312cff 	.word	0x01312cff
 80020b8:	02160ebf 	.word	0x02160ebf
 80020bc:	03938700 	.word	0x03938700
 80020c0:	05f5e0ff 	.word	0x05f5e0ff
 80020c4:	08f0d17f 	.word	0x08f0d17f

080020c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e01d      	b.n	8002112 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	3206      	adds	r2, #6
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d9de      	bls.n	80020d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f241 132c 	movw	r3, #4396	; 0x112c
 8002126:	4413      	add	r3, r2
 8002128:	2203      	movs	r2, #3
 800212a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f241 1314 	movw	r3, #4372	; 0x1114
 8002138:	4413      	add	r3, r2
 800213a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e024      	b.n	80021ae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3310      	adds	r3, #16
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d9d7      	bls.n	8002164 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f241 1330 	movw	r3, #4400	; 0x1130
 80021da:	4413      	add	r3, r2
 80021dc:	2203      	movs	r2, #3
 80021de:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80021ec:	4413      	add	r3, r2
 80021ee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002200:	4413      	add	r3, r2
 8002202:	6019      	str	r1, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_GPIO_Init+0x234>)
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002222:	e194      	b.n	800254e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8186 	beq.w	8002548 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x44>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	69b9      	ldr	r1, [r7, #24]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80e0 	beq.w	8002548 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x238>)
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_GPIO_Init+0x238>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_GPIO_Init+0x238>)
 800239a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <HAL_GPIO_Init+0x23c>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x240>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d052      	beq.n	8002478 <HAL_GPIO_Init+0x268>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_GPIO_Init+0x244>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_GPIO_Init+0x248>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_GPIO_Init+0x24c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_GPIO_Init+0x250>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x258>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_GPIO_Init+0x25c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x260>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_GPIO_Init+0x264>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x20e>
 800241a:	2309      	movs	r3, #9
 800241c:	e02d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800241e:	230a      	movs	r3, #10
 8002420:	e02b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002422:	2308      	movs	r3, #8
 8002424:	e029      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002426:	2307      	movs	r3, #7
 8002428:	e027      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242a:	2306      	movs	r3, #6
 800242c:	e025      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242e:	2305      	movs	r3, #5
 8002430:	e023      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002432:	2304      	movs	r3, #4
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002436:	2303      	movs	r3, #3
 8002438:	e01f      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243a:	2302      	movs	r3, #2
 800243c:	e01d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243e:	2301      	movs	r3, #1
 8002440:	e01b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002442:	bf00      	nop
 8002444:	58000080 	.word	0x58000080
 8002448:	58024400 	.word	0x58024400
 800244c:	58000400 	.word	0x58000400
 8002450:	58020000 	.word	0x58020000
 8002454:	58020400 	.word	0x58020400
 8002458:	58020800 	.word	0x58020800
 800245c:	58020c00 	.word	0x58020c00
 8002460:	58021000 	.word	0x58021000
 8002464:	58021400 	.word	0x58021400
 8002468:	58021800 	.word	0x58021800
 800246c:	58021c00 	.word	0x58021c00
 8002470:	58022000 	.word	0x58022000
 8002474:	58022400 	.word	0x58022400
 8002478:	2300      	movs	r3, #0
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248a:	4938      	ldr	r1, [pc, #224]	; (800256c <HAL_GPIO_Init+0x35c>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f ae63 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3724      	adds	r7, #36	; 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58000400 	.word	0x58000400

08002570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025dc:	4a08      	ldr	r2, [pc, #32]	; (8002600 <HAL_HSEM_FastTake+0x2c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3320      	adds	r3, #32
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_HSEM_FastTake+0x30>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58026400 	.word	0x58026400
 8002604:	80000300 	.word	0x80000300

08002608 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002612:	4906      	ldr	r1, [pc, #24]	; (800262c <HAL_HSEM_Release+0x24>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	58026400 	.word	0x58026400

08002630 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b08f      	sub	sp, #60	; 0x3c
 8002634:	af0a      	add	r7, sp, #40	; 0x28
 8002636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e116      	b.n	8002870 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe ff2b 	bl	80014b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fd77 	bl	8006174 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	687e      	ldr	r6, [r7, #4]
 800268e:	466d      	mov	r5, sp
 8002690:	f106 0410 	add.w	r4, r6, #16
 8002694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a4:	1d33      	adds	r3, r6, #4
 80026a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	f003 fcf5 	bl	8006098 <USB_CoreInit>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d7      	b.n	8002870 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fd65 	bl	8006196 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e04a      	b.n	8002768 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	333d      	adds	r3, #61	; 0x3d
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	333c      	adds	r3, #60	; 0x3c
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	b298      	uxth	r0, r3
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3342      	adds	r3, #66	; 0x42
 800270e:	4602      	mov	r2, r0
 8002710:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	333f      	adds	r3, #63	; 0x3f
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3344      	adds	r3, #68	; 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3348      	adds	r3, #72	; 0x48
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3350      	adds	r3, #80	; 0x50
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3af      	bcc.n	80026d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e044      	b.n	8002802 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	3301      	adds	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d3b5      	bcc.n	8002778 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	687e      	ldr	r6, [r7, #4]
 8002814:	466d      	mov	r5, sp
 8002816:	f106 0410 	add.w	r4, r6, #16
 800281a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002826:	e885 0003 	stmia.w	r5, {r0, r1}
 800282a:	1d33      	adds	r3, r6, #4
 800282c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800282e:	6838      	ldr	r0, [r7, #0]
 8002830:	f003 fcfe 	bl	8006230 <USB_DevInit>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e014      	b.n	8002870 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f80a 	bl	8002878 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 feb8 	bl	80065de <USB_DevDisconnect>

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002878 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_PCDEx_ActivateLPM+0x44>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	10000003 	.word	0x10000003

080028c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028c8:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d00a      	beq.n	80028ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028d4:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e040      	b.n	8002968 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e03e      	b.n	8002968 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028f2:	491f      	ldr	r1, [pc, #124]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028fa:	f7fe ff3f 	bl	800177c <HAL_GetTick>
 80028fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002900:	e009      	b.n	8002916 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002902:	f7fe ff3b 	bl	800177c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002910:	d901      	bls.n	8002916 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e028      	b.n	8002968 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d1ee      	bne.n	8002902 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b1e      	cmp	r3, #30
 8002928:	d008      	beq.n	800293c <HAL_PWREx_ConfigSupply+0x7c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b2e      	cmp	r3, #46	; 0x2e
 800292e:	d005      	beq.n	800293c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b1d      	cmp	r3, #29
 8002934:	d002      	beq.n	800293c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b2d      	cmp	r3, #45	; 0x2d
 800293a:	d114      	bne.n	8002966 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800293c:	f7fe ff1e 	bl	800177c <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002942:	e009      	b.n	8002958 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002944:	f7fe ff1a 	bl	800177c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002952:	d901      	bls.n	8002958 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_PWREx_ConfigSupply+0xb0>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d1ee      	bne.n	8002944 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024800 	.word	0x58024800

08002974 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	58024800 	.word	0x58024800

08002994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f000 bc1c 	b.w	80031e0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8087 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c0:	4b9b      	ldr	r3, [pc, #620]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d007      	beq.n	80029dc <HAL_RCC_OscConfig+0x48>
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	2b18      	cmp	r3, #24
 80029d0:	d110      	bne.n	80029f4 <HAL_RCC_OscConfig+0x60>
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b94      	ldr	r3, [pc, #592]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d06c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d168      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e3f5      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x78>
 80029fe:	4b8c      	ldr	r3, [pc, #560]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a8b      	ldr	r2, [pc, #556]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e02e      	b.n	8002a6a <HAL_RCC_OscConfig+0xd6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x9a>
 8002a14:	4b86      	ldr	r3, [pc, #536]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a85      	ldr	r2, [pc, #532]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b83      	ldr	r3, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a82      	ldr	r2, [pc, #520]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e01d      	b.n	8002a6a <HAL_RCC_OscConfig+0xd6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0xbe>
 8002a38:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7c      	ldr	r2, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a79      	ldr	r2, [pc, #484]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0xd6>
 8002a52:	4b77      	ldr	r3, [pc, #476]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a76      	ldr	r2, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a73      	ldr	r2, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d013      	beq.n	8002a9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fe83 	bl	800177c <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fe7f 	bl	800177c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e3a9      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0xe6>
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fe6f 	bl	800177c <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fe6b 	bl	800177c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e395      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x10e>
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ca 	beq.w	8002c66 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ada:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002adc:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_RCC_OscConfig+0x164>
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	d156      	bne.n	8002b9c <HAL_RCC_OscConfig+0x208>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d151      	bne.n	8002b9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x17c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e367      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0219 	bic.w	r2, r3, #25
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4944      	ldr	r1, [pc, #272]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b22:	f7fe fe2b 	bl	800177c <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe fe27 	bl	800177c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e351      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	f7fe fe48 	bl	80017dc <HAL_GetREVID>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d817      	bhi.n	8002b86 <HAL_RCC_OscConfig+0x1f2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCC_OscConfig+0x1dc>
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b66:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b6e:	e07a      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	492c      	ldr	r1, [pc, #176]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	e06f      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4926      	ldr	r1, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9a:	e064      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d047      	beq.n	8002c34 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0219 	bic.w	r2, r3, #25
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	491f      	ldr	r1, [pc, #124]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fde1 	bl	800177c <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fddd 	bl	800177c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e307      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	f7fe fdfe 	bl	80017dc <HAL_GetREVID>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d817      	bhi.n	8002c1a <HAL_RCC_OscConfig+0x286>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x270>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	6053      	str	r3, [r2, #4]
 8002c02:	e030      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	031b      	lsls	r3, r3, #12
 8002c12:	4907      	ldr	r1, [pc, #28]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
 8002c18:	e025      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	061b      	lsls	r3, r3, #24
 8002c28:	4901      	ldr	r1, [pc, #4]	; (8002c30 <HAL_RCC_OscConfig+0x29c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
 8002c2e:	e01a      	b.n	8002c66 <HAL_RCC_OscConfig+0x2d2>
 8002c30:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c34:	4b9e      	ldr	r3, [pc, #632]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a9d      	ldr	r2, [pc, #628]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fd9c 	bl	800177c <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fd98 	bl	800177c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e2c2      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c5a:	4b95      	ldr	r3, [pc, #596]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80a9 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c74:	4b8e      	ldr	r3, [pc, #568]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c7c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d007      	beq.n	8002c9a <HAL_RCC_OscConfig+0x306>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b18      	cmp	r3, #24
 8002c8e:	d13a      	bne.n	8002d06 <HAL_RCC_OscConfig+0x372>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d135      	bne.n	8002d06 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x31e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e296      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb2:	f7fe fd93 	bl	80017dc <HAL_GetREVID>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d817      	bhi.n	8002cf0 <HAL_RCC_OscConfig+0x35c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d108      	bne.n	8002cda <HAL_RCC_OscConfig+0x346>
 8002cc8:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cd8:	e075      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	4971      	ldr	r1, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cee:	e06a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	496c      	ldr	r1, [pc, #432]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d04:	e05f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d042      	beq.n	8002d94 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fd2f 	bl	800177c <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d22:	f7fe fd2b 	bl	800177c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e255      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d40:	f7fe fd4c 	bl	80017dc <HAL_GetREVID>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d817      	bhi.n	8002d7e <HAL_RCC_OscConfig+0x3ea>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3d4>
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d5e:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d64:	6053      	str	r3, [r2, #4]
 8002d66:	e02e      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	069b      	lsls	r3, r3, #26
 8002d76:	494e      	ldr	r1, [pc, #312]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e023      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4948      	ldr	r1, [pc, #288]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
 8002d92:	e018      	b.n	8002dc6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d94:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fcec 	bl	800177c <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002da8:	f7fe fce8 	bl	800177c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e212      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe fcc9 	bl	800177c <HAL_GetTick>
 8002dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fcc5 	bl	800177c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1ef      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x45a>
 8002e0c:	e018      	b.n	8002e40 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fcaf 	bl	800177c <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe fcab 	bl	800177c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1d5      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d039      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d019      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fc8c 	bl	800177c <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e68:	f7fe fc88 	bl	800177c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1b2      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4d4>
 8002e86:	e01b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_RCC_OscConfig+0x51c>)
 8002e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fc72 	bl	800177c <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e9c:	f7fe fc6e 	bl	800177c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d904      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e198      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb4:	4ba3      	ldr	r3, [pc, #652]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ed      	bne.n	8002e9c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8081 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ece:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0x7b4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a9d      	ldr	r2, [pc, #628]	; (8003148 <HAL_RCC_OscConfig+0x7b4>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eda:	f7fe fc4f 	bl	800177c <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fe fc4b 	bl	800177c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e175      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef4:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x7b4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x582>
 8002f08:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a8d      	ldr	r2, [pc, #564]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e02d      	b.n	8002f72 <HAL_RCC_OscConfig+0x5de>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5a4>
 8002f1e:	4b89      	ldr	r3, [pc, #548]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a88      	ldr	r2, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	4b86      	ldr	r3, [pc, #536]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a85      	ldr	r2, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	e01c      	b.n	8002f72 <HAL_RCC_OscConfig+0x5de>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5c6>
 8002f40:	4b80      	ldr	r3, [pc, #512]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a7f      	ldr	r2, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	4b7d      	ldr	r3, [pc, #500]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a7c      	ldr	r2, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	e00b      	b.n	8002f72 <HAL_RCC_OscConfig+0x5de>
 8002f5a:	4b7a      	ldr	r3, [pc, #488]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a79      	ldr	r2, [pc, #484]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	4b77      	ldr	r3, [pc, #476]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a76      	ldr	r2, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fbff 	bl	800177c <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe fbfb 	bl	800177c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e123      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCC_OscConfig+0x5ee>
 8002fa4:	e014      	b.n	8002fd0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fbe9 	bl	800177c <HAL_GetTick>
 8002faa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fbe5 	bl	800177c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10d      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8102 	beq.w	80031de <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fda:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe2:	2b18      	cmp	r3, #24
 8002fe4:	f000 80bd 	beq.w	8003162 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	f040 8095 	bne.w	800311c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8002ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fbbd 	bl	800177c <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe fbb9 	bl	800177c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0e3      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003018:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003028:	4b48      	ldr	r3, [pc, #288]	; (800314c <HAL_RCC_OscConfig+0x7b8>)
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	430a      	orrs	r2, r1
 8003038:	4942      	ldr	r1, [pc, #264]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	628b      	str	r3, [r1, #40]	; 0x28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	3b01      	subs	r3, #1
 8003044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	3b01      	subs	r3, #1
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	b29b      	uxth	r3, r3
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	3b01      	subs	r3, #1
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800306e:	4935      	ldr	r1, [pc, #212]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	4a32      	ldr	r2, [pc, #200]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_RCC_OscConfig+0x7bc>)
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800308c:	00d2      	lsls	r2, r2, #3
 800308e:	492d      	ldr	r1, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f023 020c 	bic.w	r2, r3, #12
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4928      	ldr	r1, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	f023 0202 	bic.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4924      	ldr	r1, [pc, #144]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fb42 	bl	800177c <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe fb3e 	bl	800177c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e068      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x768>
 800311a:	e060      	b.n	80031de <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x7b0>)
 8003122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe fb28 	bl	800177c <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312e:	e011      	b.n	8003154 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fb24 	bl	800177c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d90a      	bls.n	8003154 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e04e      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400
 8003148:	58024800 	.word	0x58024800
 800314c:	fffffc0c 	.word	0xfffffc0c
 8003150:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x854>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e7      	bne.n	8003130 <HAL_RCC_OscConfig+0x79c>
 8003160:	e03d      	b.n	80031de <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_OscConfig+0x854>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_RCC_OscConfig+0x854>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b01      	cmp	r3, #1
 8003174:	d031      	beq.n	80031da <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d12a      	bne.n	80031da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d122      	bne.n	80031da <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d11a      	bne.n	80031da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	0a5b      	lsrs	r3, r3, #9
 80031a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d111      	bne.n	80031da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d108      	bne.n	80031da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0e1b      	lsrs	r3, r3, #24
 80031cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3730      	adds	r7, #48	; 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	58024400 	.word	0x58024400

080031ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e19c      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b8a      	ldr	r3, [pc, #552]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b87      	ldr	r3, [pc, #540]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4985      	ldr	r1, [pc, #532]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b83      	ldr	r3, [pc, #524]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e184      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800324c:	4b78      	ldr	r3, [pc, #480]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	4975      	ldr	r1, [pc, #468]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800325a:	4313      	orrs	r3, r2
 800325c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d010      	beq.n	800328c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003276:	429a      	cmp	r2, r3
 8003278:	d908      	bls.n	800328c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800327a:	4b6d      	ldr	r3, [pc, #436]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	496a      	ldr	r1, [pc, #424]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003288:	4313      	orrs	r3, r2
 800328a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032a8:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	495e      	ldr	r1, [pc, #376]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032d6:	4b56      	ldr	r3, [pc, #344]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4953      	ldr	r1, [pc, #332]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	429a      	cmp	r2, r3
 8003302:	d908      	bls.n	8003316 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f023 020f 	bic.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4947      	ldr	r1, [pc, #284]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003312:	4313      	orrs	r3, r2
 8003314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d055      	beq.n	80033ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003322:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4940      	ldr	r1, [pc, #256]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800333c:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d121      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0f6      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d115      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0ea      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0de      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d6      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f023 0207 	bic.w	r2, r3, #7
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4925      	ldr	r1, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f9ed 	bl	800177c <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7fe f9e9 	bl	800177c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0be      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d1eb      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d208      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	490e      	ldr	r1, [pc, #56]	; (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d214      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 020f 	bic.w	r2, r3, #15
 8003412:	4906      	ldr	r1, [pc, #24]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_ClockConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e086      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
 800342c:	52002000 	.word	0x52002000
 8003430:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344c:	429a      	cmp	r2, r3
 800344e:	d208      	bcs.n	8003462 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003450:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	4939      	ldr	r1, [pc, #228]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 800345e:	4313      	orrs	r3, r2
 8003460:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800347a:	429a      	cmp	r2, r3
 800347c:	d208      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	492e      	ldr	r1, [pc, #184]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d208      	bcs.n	80034be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4922      	ldr	r1, [pc, #136]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d208      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ec:	f000 f834 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	4912      	ldr	r1, [pc, #72]	; (8003548 <HAL_RCC_ClockConfig+0x35c>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x358>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <HAL_RCC_ClockConfig+0x35c>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x360>)
 8003522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x364>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCC_ClockConfig+0x368>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f8da 	bl	80016e8 <HAL_InitTick>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	08006710 	.word	0x08006710
 800354c:	24000004 	.word	0x24000004
 8003550:	24000000 	.word	0x24000000
 8003554:	24000048 	.word	0x24000048

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355e:	4bb3      	ldr	r3, [pc, #716]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003566:	2b18      	cmp	r3, #24
 8003568:	f200 8155 	bhi.w	8003816 <HAL_RCC_GetSysClockFreq+0x2be>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_RCC_GetSysClockFreq+0x1c>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035d9 	.word	0x080035d9
 8003578:	08003817 	.word	0x08003817
 800357c:	08003817 	.word	0x08003817
 8003580:	08003817 	.word	0x08003817
 8003584:	08003817 	.word	0x08003817
 8003588:	08003817 	.word	0x08003817
 800358c:	08003817 	.word	0x08003817
 8003590:	08003817 	.word	0x08003817
 8003594:	080035ff 	.word	0x080035ff
 8003598:	08003817 	.word	0x08003817
 800359c:	08003817 	.word	0x08003817
 80035a0:	08003817 	.word	0x08003817
 80035a4:	08003817 	.word	0x08003817
 80035a8:	08003817 	.word	0x08003817
 80035ac:	08003817 	.word	0x08003817
 80035b0:	08003817 	.word	0x08003817
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003817 	.word	0x08003817
 80035bc:	08003817 	.word	0x08003817
 80035c0:	08003817 	.word	0x08003817
 80035c4:	08003817 	.word	0x08003817
 80035c8:	08003817 	.word	0x08003817
 80035cc:	08003817 	.word	0x08003817
 80035d0:	08003817 	.word	0x08003817
 80035d4:	0800360b 	.word	0x0800360b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d8:	4b94      	ldr	r3, [pc, #592]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035e4:	4b91      	ldr	r3, [pc, #580]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80035f6:	e111      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035f8:	4b8d      	ldr	r3, [pc, #564]	; (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035fa:	61bb      	str	r3, [r7, #24]
    break;
 80035fc:	e10e      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035fe:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003600:	61bb      	str	r3, [r7, #24]
    break;
 8003602:	e10b      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003604:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003606:	61bb      	str	r3, [r7, #24]
    break;
 8003608:	e108      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800360a:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003614:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003620:	4b82      	ldr	r3, [pc, #520]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800362a:	4b80      	ldr	r3, [pc, #512]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80e1 	beq.w	8003810 <HAL_RCC_GetSysClockFreq+0x2b8>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b02      	cmp	r3, #2
 8003652:	f000 8083 	beq.w	800375c <HAL_RCC_GetSysClockFreq+0x204>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b02      	cmp	r3, #2
 800365a:	f200 80a1 	bhi.w	80037a0 <HAL_RCC_GetSysClockFreq+0x248>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x114>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d056      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x1c0>
 800366a:	e099      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800366c:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02d      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003678:	4b6c      	ldr	r3, [pc, #432]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	08db      	lsrs	r3, r3, #3
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a2:	4b62      	ldr	r3, [pc, #392]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036d2:	e087      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003840 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b51      	ldr	r3, [pc, #324]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003716:	e065      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 6a02 	vldr	s12, [r7, #8]
 800373e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800375a:	e043      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2f0>
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003782:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800379e:	e021      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003844 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ee:	3301      	adds	r3, #1
 80037f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003808:	ee17 3a90 	vmov	r3, s15
 800380c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800380e:	e005      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
    break;
 8003814:	e002      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003818:	61bb      	str	r3, [r7, #24]
    break;
 800381a:	bf00      	nop
  }

  return sysclockfreq;
 800381c:	69bb      	ldr	r3, [r7, #24]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
 8003830:	03d09000 	.word	0x03d09000
 8003834:	003d0900 	.word	0x003d0900
 8003838:	007a1200 	.word	0x007a1200
 800383c:	46000000 	.word	0x46000000
 8003840:	4c742400 	.word	0x4c742400
 8003844:	4a742400 	.word	0x4a742400
 8003848:	4af42400 	.word	0x4af42400

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003852:	f7ff fe81 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_RCC_GetHCLKFreq+0x50>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490f      	ldr	r1, [pc, #60]	; (80038a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_GetHCLKFreq+0x50>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	58024400 	.word	0x58024400
 80038a0:	08006710 	.word	0x08006710
 80038a4:	24000004 	.word	0x24000004
 80038a8:	24000000 	.word	0x24000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038b0:	f7ff ffcc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58024400 	.word	0x58024400
 80038d4:	08006710 	.word	0x08006710

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038dc:	f7ff ffb6 	bl	800384c <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4904      	ldr	r1, [pc, #16]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	58024400 	.word	0x58024400
 8003900:	08006710 	.word	0x08006710

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003910:	2300      	movs	r3, #0
 8003912:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d03f      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003928:	d02a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800392a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800392e:	d824      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003934:	d018      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800393a:	d81e      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003944:	d007      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003946:	e018      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003948:	4bab      	ldr	r3, [pc, #684]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4aaa      	ldr	r2, [pc, #680]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003954:	e015      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	2102      	movs	r1, #2
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f9cf 	bl	8004d00 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003966:	e00c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fa78 	bl	8004e64 <RCCEx_PLL3_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
      break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003988:	4b9b      	ldr	r3, [pc, #620]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003994:	4998      	ldr	r1, [pc, #608]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	650b      	str	r3, [r1, #80]	; 0x50
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d826      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039df 	.word	0x080039df
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a88      	ldr	r2, [pc, #544]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f98b 	bl	8004d00 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3324      	adds	r3, #36	; 0x24
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fa34 	bl	8004e64 <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a10:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	4976      	ldr	r1, [pc, #472]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	650b      	str	r3, [r1, #80]	; 0x50
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d042      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d02b      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	d825      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a44:	2bc0      	cmp	r3, #192	; 0xc0
 8003a46:	d028      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a48:	2bc0      	cmp	r3, #192	; 0xc0
 8003a4a:	d821      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d016      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d81d      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a5c:	e018      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5e:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e017      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f944 	bl	8004d00 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a7c:	e00e      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3324      	adds	r3, #36	; 0x24
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f9ed 	bl	8004e64 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003aa2:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	4952      	ldr	r1, [pc, #328]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ab4:	e001      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d049      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad0:	d030      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad6:	d82a      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003adc:	d02c      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003ade:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae2:	d824      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae8:	d018      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aee:	d81e      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af8:	d007      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003afa:	e018      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afc:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b08:	e017      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f8f5 	bl	8004d00 <RCCEx_PLL2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b1a:	e00e      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3324      	adds	r3, #36	; 0x24
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f99e 	bl	8004e64 <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b2c:	e005      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	75fb      	strb	r3, [r7, #23]
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b4e:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	658b      	str	r3, [r1, #88]	; 0x58
 8003b54:	e001      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04c      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b70:	d030      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b76:	d82a      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b82:	d824      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b88:	d018      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b8e:	d81e      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b98:	d007      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b9a:	e018      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e017      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f8a5 	bl	8004d00 <RCCEx_PLL2_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bba:	e00e      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f94e 	bl	8004e64 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bee:	4902      	ldr	r1, [pc, #8]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	658b      	str	r3, [r1, #88]	; 0x58
 8003bf4:	e004      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003bf6:	bf00      	nop
 8003bf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d032      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	2b30      	cmp	r3, #48	; 0x30
 8003c12:	d01c      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d817      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d813      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d10f      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4baf      	ldr	r3, [pc, #700]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4aae      	ldr	r2, [pc, #696]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c34:	e00e      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f85f 	bl	8004d00 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	49a0      	ldr	r1, [pc, #640]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c6c:	e001      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d047      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c86:	d030      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8c:	d82a      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c92:	d02c      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c98:	d824      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d018      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d81e      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d007      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003cb0:	e018      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	4a8c      	ldr	r2, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cbe:	e017      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f81a 	bl	8004d00 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3324      	adds	r3, #36	; 0x24
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f8c3 	bl	8004e64 <RCCEx_PLL3_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	4979      	ldr	r1, [pc, #484]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	650b      	str	r3, [r1, #80]	; 0x50
 8003d08:	e001      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d049      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d22:	d02e      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d828      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d2e:	d02a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d34:	d822      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d3a:	d026      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d40:	d81c      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d46:	d010      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4c:	d816      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01d      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d111      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 ffce 	bl	8004d00 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d68:	e012      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3324      	adds	r3, #36	; 0x24
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 f877 	bl	8004e64 <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d7a:	e009      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d82:	bf00      	nop
 8003d84:	e004      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d86:	bf00      	nop
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d96:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	4951      	ldr	r1, [pc, #324]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	650b      	str	r3, [r1, #80]	; 0x50
 8003da8:	e001      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04b      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc4:	d02e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dca:	d828      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d02a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d822      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ddc:	d026      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003dde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003de2:	d81c      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de8:	d010      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d816      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01d      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df8:	d111      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 ff7d 	bl	8004d00 <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e0a:	e012      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3324      	adds	r3, #36	; 0x24
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f826 	bl	8004e64 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e009      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
      break;
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e24:	bf00      	nop
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e46:	4928      	ldr	r1, [pc, #160]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	658b      	str	r3, [r1, #88]	; 0x58
 8003e4c:	e001      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d02f      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e66:	d00e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6c:	d814      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e76:	d10f      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ff37 	bl	8004d00 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	650b      	str	r3, [r1, #80]	; 0x50
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d033      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d81c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003f13 	.word	0x08003f13
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003efb 	.word	0x08003efb
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4bb8      	ldr	r3, [pc, #736]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4ab7      	ldr	r2, [pc, #732]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ef8:	e00c      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fefd 	bl	8004d00 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f0a:	e003      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f1a:	4bad      	ldr	r3, [pc, #692]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	49aa      	ldr	r1, [pc, #680]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8086 	beq.w	800404c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f40:	4ba4      	ldr	r3, [pc, #656]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4aa3      	ldr	r2, [pc, #652]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd fc16 	bl	800177c <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f52:	e009      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd fc12 	bl	800177c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d902      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	75fb      	strb	r3, [r7, #23]
        break;
 8003f66:	e005      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ef      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d166      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f7a:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f84:	4053      	eors	r3, r2
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8e:	4b90      	ldr	r3, [pc, #576]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	4b8d      	ldr	r3, [pc, #564]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a8c      	ldr	r2, [pc, #560]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa4:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a89      	ldr	r2, [pc, #548]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fb0:	4a87      	ldr	r2, [pc, #540]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc0:	d115      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fbdb 	bl	800177c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd fbd7 	bl	800177c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d902      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	75fb      	strb	r3, [r7, #23]
            break;
 8003fe0:	e005      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe2:	4b7b      	ldr	r3, [pc, #492]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ed      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d126      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004002:	d10d      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004004:	4b72      	ldr	r3, [pc, #456]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004012:	0919      	lsrs	r1, r3, #4
 8004014:	4b70      	ldr	r3, [pc, #448]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004016:	400b      	ands	r3, r1
 8004018:	496d      	ldr	r1, [pc, #436]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	610b      	str	r3, [r1, #16]
 800401e:	e005      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004020:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004026:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800402a:	6113      	str	r3, [r2, #16]
 800402c:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800402e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	4965      	ldr	r1, [pc, #404]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	670b      	str	r3, [r1, #112]	; 0x70
 8004040:	e004      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	75bb      	strb	r3, [r7, #22]
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d07e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	2b28      	cmp	r3, #40	; 0x28
 800405e:	d867      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004137 	.word	0x08004137
 800406c:	08004131 	.word	0x08004131
 8004070:	08004131 	.word	0x08004131
 8004074:	08004131 	.word	0x08004131
 8004078:	08004131 	.word	0x08004131
 800407c:	08004131 	.word	0x08004131
 8004080:	08004131 	.word	0x08004131
 8004084:	08004131 	.word	0x08004131
 8004088:	0800410d 	.word	0x0800410d
 800408c:	08004131 	.word	0x08004131
 8004090:	08004131 	.word	0x08004131
 8004094:	08004131 	.word	0x08004131
 8004098:	08004131 	.word	0x08004131
 800409c:	08004131 	.word	0x08004131
 80040a0:	08004131 	.word	0x08004131
 80040a4:	08004131 	.word	0x08004131
 80040a8:	0800411f 	.word	0x0800411f
 80040ac:	08004131 	.word	0x08004131
 80040b0:	08004131 	.word	0x08004131
 80040b4:	08004131 	.word	0x08004131
 80040b8:	08004131 	.word	0x08004131
 80040bc:	08004131 	.word	0x08004131
 80040c0:	08004131 	.word	0x08004131
 80040c4:	08004131 	.word	0x08004131
 80040c8:	08004137 	.word	0x08004137
 80040cc:	08004131 	.word	0x08004131
 80040d0:	08004131 	.word	0x08004131
 80040d4:	08004131 	.word	0x08004131
 80040d8:	08004131 	.word	0x08004131
 80040dc:	08004131 	.word	0x08004131
 80040e0:	08004131 	.word	0x08004131
 80040e4:	08004131 	.word	0x08004131
 80040e8:	08004137 	.word	0x08004137
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004131 	.word	0x08004131
 80040f4:	08004131 	.word	0x08004131
 80040f8:	08004131 	.word	0x08004131
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004131 	.word	0x08004131
 8004104:	08004131 	.word	0x08004131
 8004108:	08004137 	.word	0x08004137
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	2101      	movs	r1, #1
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fdf4 	bl	8004d00 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800411c:	e00c      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fe9d 	bl	8004e64 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	4921      	ldr	r1, [pc, #132]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	654b      	str	r3, [r1, #84]	; 0x54
 8004150:	e001      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	2b05      	cmp	r3, #5
 8004168:	d820      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041b3 	.word	0x080041b3
 8004174:	08004189 	.word	0x08004189
 8004178:	0800419b 	.word	0x0800419b
 800417c:	080041b3 	.word	0x080041b3
 8004180:	080041b3 	.word	0x080041b3
 8004184:	080041b3 	.word	0x080041b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fdb6 	bl	8004d00 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004198:	e00c      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3324      	adds	r3, #36	; 0x24
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fe5f 	bl	8004e64 <RCCEx_PLL3_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041aa:	e003      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
      break;
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80041b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d110      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f023 0207 	bic.w	r2, r3, #7
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	4902      	ldr	r1, [pc, #8]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	654b      	str	r3, [r1, #84]	; 0x54
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	58024800 	.word	0x58024800
 80041d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d039      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d820      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	0800423f 	.word	0x0800423f
 8004200:	08004215 	.word	0x08004215
 8004204:	08004227 	.word	0x08004227
 8004208:	0800423f 	.word	0x0800423f
 800420c:	0800423f 	.word	0x0800423f
 8004210:	0800423f 	.word	0x0800423f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd70 	bl	8004d00 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004224:	e00c      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fe19 	bl	8004e64 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004236:	e003      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e000      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800423e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004246:	4bb7      	ldr	r3, [pc, #732]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	49b3      	ldr	r1, [pc, #716]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004256:	4313      	orrs	r3, r2
 8004258:	658b      	str	r3, [r1, #88]	; 0x58
 800425a:	e001      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d04b      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004276:	d02e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800427c:	d828      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d02a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d822      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800428a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800428e:	d026      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004290:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004294:	d81c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429a:	d010      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800429c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a0:	d816      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01d      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80042a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042aa:	d111      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fd24 	bl	8004d00 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042bc:	e012      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fdcd 	bl	8004e64 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042ce:	e009      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042d6:	bf00      	nop
 80042d8:	e004      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ea:	4b8e      	ldr	r3, [pc, #568]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f8:	498a      	ldr	r1, [pc, #552]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	654b      	str	r3, [r1, #84]	; 0x54
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d04b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004316:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800431c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004320:	d828      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	d02a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432c:	d822      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800432e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004332:	d026      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004338:	d81c      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d010      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004344:	d816      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01d      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d111      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fcd2 	bl	8004d00 <RCCEx_PLL2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004360:	e012      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3324      	adds	r3, #36	; 0x24
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fd7b 	bl	8004e64 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004372:	e009      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	75fb      	strb	r3, [r7, #23]
      break;
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800437a:	bf00      	nop
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800438e:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439c:	4961      	ldr	r1, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	658b      	str	r3, [r1, #88]	; 0x58
 80043a2:	e001      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d04b      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043be:	d02e      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80043c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043c4:	d828      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ca:	d02a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d822      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043d6:	d026      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80043d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043dc:	d81c      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e2:	d010      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80043e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e8:	d816      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01d      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	d111      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fc80 	bl	8004d00 <RCCEx_PLL2_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004404:	e012      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3324      	adds	r3, #36	; 0x24
 800440a:	2102      	movs	r1, #2
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fd29 	bl	8004e64 <RCCEx_PLL3_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004416:	e009      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
      break;
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800441e:	bf00      	nop
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800442a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004432:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004440:	4938      	ldr	r1, [pc, #224]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004442:	4313      	orrs	r3, r2
 8004444:	658b      	str	r3, [r1, #88]	; 0x58
 8004446:	e001      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004462:	d10a      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3324      	adds	r3, #36	; 0x24
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fcfa 	bl	8004e64 <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004488:	4926      	ldr	r1, [pc, #152]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800448a:	4313      	orrs	r3, r2
 800448c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a4:	d10a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3324      	adds	r3, #36	; 0x24
 80044aa:	2102      	movs	r1, #2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fcd9 	bl	8004e64 <RCCEx_PLL3_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ca:	4916      	ldr	r1, [pc, #88]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d036      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d01f      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80044e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ec:	d817      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80044f8:	e011      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fbfd 	bl	8004d00 <RCCEx_PLL2_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800450a:	e00e      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fca6 	bl	8004e64 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	e002      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004524:	58024400 	.word	0x58024400
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004530:	4b93      	ldr	r3, [pc, #588]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800453e:	4990      	ldr	r1, [pc, #576]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	658b      	str	r3, [r1, #88]	; 0x58
 8004544:	e001      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d033      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004560:	d01c      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004566:	d816      	bhi.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800456e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004572:	d007      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004574:	e00f      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004576:	4b82      	ldr	r3, [pc, #520]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4a81      	ldr	r2, [pc, #516]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004582:	e00c      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fc6a 	bl	8004e64 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
      break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800459c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a4:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	4973      	ldr	r1, [pc, #460]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	654b      	str	r3, [r1, #84]	; 0x54
 80045b8:	e001      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d029      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d007      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80045d8:	e00f      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045da:	4b69      	ldr	r3, [pc, #420]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a68      	ldr	r2, [pc, #416]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045e6:	e00b      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb86 	bl	8004d00 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045f8:	e002      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
      break;
 80045fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004606:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	495b      	ldr	r1, [pc, #364]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004618:	e001      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3324      	adds	r3, #36	; 0x24
 800462e:	2102      	movs	r1, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fc17 	bl	8004e64 <RCCEx_PLL3_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d030      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004654:	d017      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d811      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d013      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d80b      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	d106      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a42      	ldr	r2, [pc, #264]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800467e:	e007      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	e004      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800468e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004696:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	4937      	ldr	r1, [pc, #220]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	654b      	str	r3, [r1, #84]	; 0x54
 80046a8:	e001      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	492e      	ldr	r1, [pc, #184]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e6:	4926      	ldr	r1, [pc, #152]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004704:	491e      	ldr	r1, [pc, #120]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004716:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	4a19      	ldr	r2, [pc, #100]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800471c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004720:	6113      	str	r3, [r2, #16]
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800472c:	4914      	ldr	r1, [pc, #80]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	da08      	bge.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	490e      	ldr	r1, [pc, #56]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	4906      	ldr	r1, [pc, #24]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004768:	4313      	orrs	r3, r2
 800476a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800476c:	7dbb      	ldrb	r3, [r7, #22]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024400 	.word	0x58024400

08004784 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004788:	f7ff f860 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	; (80047ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	58024400 	.word	0x58024400
 80047ac:	08006710 	.word	0x08006710

080047b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b8:	4ba1      	ldr	r3, [pc, #644]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80047c2:	4b9f      	ldr	r3, [pc, #636]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	0b1b      	lsrs	r3, r3, #12
 80047c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ce:	4b9c      	ldr	r3, [pc, #624]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80047da:	4b99      	ldr	r3, [pc, #612]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8111 	beq.w	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f000 8083 	beq.w	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b02      	cmp	r3, #2
 800480a:	f200 80a1 	bhi.w	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d056      	beq.n	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800481a:	e099      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800481c:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02d      	beq.n	8004884 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004828:	4b85      	ldr	r3, [pc, #532]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	08db      	lsrs	r3, r3, #3
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	4a84      	ldr	r2, [pc, #528]	; (8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004882:	e087      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048c6:	e065      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800490a:	e043      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800494e:	e021      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a03 	vldr	s12, [r7, #12]
 8004976:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004992:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	0a5b      	lsrs	r3, r3, #9
 800499a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ba:	ee17 2a90 	vmov	r2, s15
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e8:	ee17 2a90 	vmov	r2, s15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a1e:	e008      	b.n	8004a32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
}
 8004a32:	bf00      	nop
 8004a34:	3724      	adds	r7, #36	; 0x24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	03d09000 	.word	0x03d09000
 8004a48:	46000000 	.word	0x46000000
 8004a4c:	4c742400 	.word	0x4c742400
 8004a50:	4a742400 	.word	0x4a742400
 8004a54:	4af42400 	.word	0x4af42400

08004a58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a60:	4ba1      	ldr	r3, [pc, #644]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a6a:	4b9f      	ldr	r3, [pc, #636]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	0d1b      	lsrs	r3, r3, #20
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a76:	4b9c      	ldr	r3, [pc, #624]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a82:	4b99      	ldr	r3, [pc, #612]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8111 	beq.w	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f000 8083 	beq.w	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f200 80a1 	bhi.w	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d056      	beq.n	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ac2:	e099      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac4:	4b88      	ldr	r3, [pc, #544]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02d      	beq.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ad0:	4b85      	ldr	r3, [pc, #532]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	4a84      	ldr	r2, [pc, #528]	; (8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b2a:	e087      	b.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b6e:	e065      	b.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bb2:	e043      	b.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bf6:	e021      	b.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0a:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 2a90 	vmov	r2, s15
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c90:	ee17 2a90 	vmov	r2, s15
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	0e1b      	lsrs	r3, r3, #24
 8004c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbe:	ee17 2a90 	vmov	r2, s15
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cc6:	e008      	b.n	8004cda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	3724      	adds	r7, #36	; 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	03d09000 	.word	0x03d09000
 8004cf0:	46000000 	.word	0x46000000
 8004cf4:	4c742400 	.word	0x4c742400
 8004cf8:	4a742400 	.word	0x4a742400
 8004cfc:	4af42400 	.word	0x4af42400

08004d00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0e:	4b53      	ldr	r3, [pc, #332]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d101      	bne.n	8004d1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e099      	b.n	8004e52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4e      	ldr	r2, [pc, #312]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fd27 	bl	800177c <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d32:	f7fc fd23 	bl	800177c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e086      	b.n	8004e52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d50:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	493f      	ldr	r1, [pc, #252]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	628b      	str	r3, [r1, #40]	; 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d94:	4931      	ldr	r1, [pc, #196]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	492d      	ldr	r1, [pc, #180]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	f023 0220 	bic.w	r2, r3, #32
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4928      	ldr	r1, [pc, #160]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	f023 0310 	bic.w	r3, r3, #16
 8004dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <RCCEx_PLL2_Config+0x160>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	69d2      	ldr	r2, [r2, #28]
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4920      	ldr	r1, [pc, #128]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004de4:	f043 0310 	orr.w	r3, r3, #16
 8004de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004df6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dfc:	e00f      	b.n	8004e1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e04:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e10:	e005      	b.n	8004e1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fca7 	bl	800177c <HAL_GetTick>
 8004e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e32:	f7fc fca3 	bl	800177c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <RCCEx_PLL2_Config+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	ffff0007 	.word	0xffff0007

08004e64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e72:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d101      	bne.n	8004e82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e099      	b.n	8004fb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e82:	4b4f      	ldr	r3, [pc, #316]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fc75 	bl	800177c <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e94:	e008      	b.n	8004ea8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e96:	f7fc fc71 	bl	800177c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e086      	b.n	8004fb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea8:	4b45      	ldr	r3, [pc, #276]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eb4:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	051b      	lsls	r3, r3, #20
 8004ec2:	493f      	ldr	r1, [pc, #252]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	025b      	lsls	r3, r3, #9
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	041b      	lsls	r3, r3, #16
 8004ee6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ef8:	4931      	ldr	r1, [pc, #196]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004efe:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	492d      	ldr	r1, [pc, #180]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	4928      	ldr	r1, [pc, #160]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	4a26      	ldr	r2, [pc, #152]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <RCCEx_PLL3_Config+0x160>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	69d2      	ldr	r2, [r2, #28]
 8004f3a:	00d2      	lsls	r2, r2, #3
 8004f3c:	4920      	ldr	r1, [pc, #128]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f42:	4b1f      	ldr	r3, [pc, #124]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f60:	e00f      	b.n	8004f82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f74:	e005      	b.n	8004f82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a11      	ldr	r2, [pc, #68]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a0e      	ldr	r2, [pc, #56]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8e:	f7fc fbf5 	bl	800177c <HAL_GetTick>
 8004f92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f94:	e008      	b.n	8004fa8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f96:	f7fc fbf1 	bl	800177c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e006      	b.n	8004fb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <RCCEx_PLL3_Config+0x15c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	ffff0007 	.word	0xffff0007

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e042      	b.n	8005060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fc f9fd 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2224      	movs	r2, #36	; 0x24
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f82c 	bl	8005068 <UART_SetConfig>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e022      	b.n	8005060 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fd80 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fe07 	bl	8005c6c <UART_CheckIdleState>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	b5b0      	push	{r4, r5, r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4bbf      	ldr	r3, [pc, #764]	; (8005394 <UART_SetConfig+0x32c>)
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800509e:	430b      	orrs	r3, r1
 80050a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4ab5      	ldr	r2, [pc, #724]	; (8005398 <UART_SetConfig+0x330>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ce:	4313      	orrs	r3, r2
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4bb0      	ldr	r3, [pc, #704]	; (800539c <UART_SetConfig+0x334>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050e2:	430b      	orrs	r3, r1
 80050e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f023 010f 	bic.w	r1, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4aa7      	ldr	r2, [pc, #668]	; (80053a0 <UART_SetConfig+0x338>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d176      	bne.n	80051f4 <UART_SetConfig+0x18c>
 8005106:	4ba7      	ldr	r3, [pc, #668]	; (80053a4 <UART_SetConfig+0x33c>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510e:	2b28      	cmp	r3, #40	; 0x28
 8005110:	d86c      	bhi.n	80051ec <UART_SetConfig+0x184>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0xb0>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	080051bd 	.word	0x080051bd
 800511c:	080051ed 	.word	0x080051ed
 8005120:	080051ed 	.word	0x080051ed
 8005124:	080051ed 	.word	0x080051ed
 8005128:	080051ed 	.word	0x080051ed
 800512c:	080051ed 	.word	0x080051ed
 8005130:	080051ed 	.word	0x080051ed
 8005134:	080051ed 	.word	0x080051ed
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051ed 	.word	0x080051ed
 8005140:	080051ed 	.word	0x080051ed
 8005144:	080051ed 	.word	0x080051ed
 8005148:	080051ed 	.word	0x080051ed
 800514c:	080051ed 	.word	0x080051ed
 8005150:	080051ed 	.word	0x080051ed
 8005154:	080051ed 	.word	0x080051ed
 8005158:	080051cd 	.word	0x080051cd
 800515c:	080051ed 	.word	0x080051ed
 8005160:	080051ed 	.word	0x080051ed
 8005164:	080051ed 	.word	0x080051ed
 8005168:	080051ed 	.word	0x080051ed
 800516c:	080051ed 	.word	0x080051ed
 8005170:	080051ed 	.word	0x080051ed
 8005174:	080051ed 	.word	0x080051ed
 8005178:	080051d5 	.word	0x080051d5
 800517c:	080051ed 	.word	0x080051ed
 8005180:	080051ed 	.word	0x080051ed
 8005184:	080051ed 	.word	0x080051ed
 8005188:	080051ed 	.word	0x080051ed
 800518c:	080051ed 	.word	0x080051ed
 8005190:	080051ed 	.word	0x080051ed
 8005194:	080051ed 	.word	0x080051ed
 8005198:	080051dd 	.word	0x080051dd
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080051ed 	.word	0x080051ed
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051ed 	.word	0x080051ed
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	e222      	b.n	800560a <UART_SetConfig+0x5a2>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ca:	e21e      	b.n	800560a <UART_SetConfig+0x5a2>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d2:	e21a      	b.n	800560a <UART_SetConfig+0x5a2>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051da:	e216      	b.n	800560a <UART_SetConfig+0x5a2>
 80051dc:	2320      	movs	r3, #32
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e2:	e212      	b.n	800560a <UART_SetConfig+0x5a2>
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ea:	e20e      	b.n	800560a <UART_SetConfig+0x5a2>
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f2:	e20a      	b.n	800560a <UART_SetConfig+0x5a2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a6b      	ldr	r2, [pc, #428]	; (80053a8 <UART_SetConfig+0x340>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d130      	bne.n	8005260 <UART_SetConfig+0x1f8>
 80051fe:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <UART_SetConfig+0x33c>)
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b05      	cmp	r3, #5
 8005208:	d826      	bhi.n	8005258 <UART_SetConfig+0x1f0>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x1a8>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005229 	.word	0x08005229
 8005214:	08005231 	.word	0x08005231
 8005218:	08005239 	.word	0x08005239
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e1ec      	b.n	800560a <UART_SetConfig+0x5a2>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e1e8      	b.n	800560a <UART_SetConfig+0x5a2>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e1e4      	b.n	800560a <UART_SetConfig+0x5a2>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e1e0      	b.n	800560a <UART_SetConfig+0x5a2>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e1dc      	b.n	800560a <UART_SetConfig+0x5a2>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e1d8      	b.n	800560a <UART_SetConfig+0x5a2>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e1d4      	b.n	800560a <UART_SetConfig+0x5a2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a51      	ldr	r2, [pc, #324]	; (80053ac <UART_SetConfig+0x344>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x264>
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <UART_SetConfig+0x33c>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x25c>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x214>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	e1b6      	b.n	800560a <UART_SetConfig+0x5a2>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a2:	e1b2      	b.n	800560a <UART_SetConfig+0x5a2>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052aa:	e1ae      	b.n	800560a <UART_SetConfig+0x5a2>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e1aa      	b.n	800560a <UART_SetConfig+0x5a2>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e1a6      	b.n	800560a <UART_SetConfig+0x5a2>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e1a2      	b.n	800560a <UART_SetConfig+0x5a2>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e19e      	b.n	800560a <UART_SetConfig+0x5a2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a37      	ldr	r2, [pc, #220]	; (80053b0 <UART_SetConfig+0x348>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x2d0>
 80052d6:	4b33      	ldr	r3, [pc, #204]	; (80053a4 <UART_SetConfig+0x33c>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x2c8>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x280>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	e180      	b.n	800560a <UART_SetConfig+0x5a2>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530e:	e17c      	b.n	800560a <UART_SetConfig+0x5a2>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e178      	b.n	800560a <UART_SetConfig+0x5a2>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e174      	b.n	800560a <UART_SetConfig+0x5a2>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e170      	b.n	800560a <UART_SetConfig+0x5a2>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e16c      	b.n	800560a <UART_SetConfig+0x5a2>
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e168      	b.n	800560a <UART_SetConfig+0x5a2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <UART_SetConfig+0x34c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d142      	bne.n	80053c8 <UART_SetConfig+0x360>
 8005342:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <UART_SetConfig+0x33c>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d838      	bhi.n	80053c0 <UART_SetConfig+0x358>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x2ec>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	080053b9 	.word	0x080053b9
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e14a      	b.n	800560a <UART_SetConfig+0x5a2>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e146      	b.n	800560a <UART_SetConfig+0x5a2>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e142      	b.n	800560a <UART_SetConfig+0x5a2>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e13e      	b.n	800560a <UART_SetConfig+0x5a2>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e13a      	b.n	800560a <UART_SetConfig+0x5a2>
 8005394:	cfff69f3 	.word	0xcfff69f3
 8005398:	58000c00 	.word	0x58000c00
 800539c:	11fff4ff 	.word	0x11fff4ff
 80053a0:	40011000 	.word	0x40011000
 80053a4:	58024400 	.word	0x58024400
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004800 	.word	0x40004800
 80053b0:	40004c00 	.word	0x40004c00
 80053b4:	40005000 	.word	0x40005000
 80053b8:	2340      	movs	r3, #64	; 0x40
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e124      	b.n	800560a <UART_SetConfig+0x5a2>
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e120      	b.n	800560a <UART_SetConfig+0x5a2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4acc      	ldr	r2, [pc, #816]	; (8005700 <UART_SetConfig+0x698>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d176      	bne.n	80054c0 <UART_SetConfig+0x458>
 80053d2:	4bcc      	ldr	r3, [pc, #816]	; (8005704 <UART_SetConfig+0x69c>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053da:	2b28      	cmp	r3, #40	; 0x28
 80053dc:	d86c      	bhi.n	80054b8 <UART_SetConfig+0x450>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x37c>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005489 	.word	0x08005489
 80053e8:	080054b9 	.word	0x080054b9
 80053ec:	080054b9 	.word	0x080054b9
 80053f0:	080054b9 	.word	0x080054b9
 80053f4:	080054b9 	.word	0x080054b9
 80053f8:	080054b9 	.word	0x080054b9
 80053fc:	080054b9 	.word	0x080054b9
 8005400:	080054b9 	.word	0x080054b9
 8005404:	08005491 	.word	0x08005491
 8005408:	080054b9 	.word	0x080054b9
 800540c:	080054b9 	.word	0x080054b9
 8005410:	080054b9 	.word	0x080054b9
 8005414:	080054b9 	.word	0x080054b9
 8005418:	080054b9 	.word	0x080054b9
 800541c:	080054b9 	.word	0x080054b9
 8005420:	080054b9 	.word	0x080054b9
 8005424:	08005499 	.word	0x08005499
 8005428:	080054b9 	.word	0x080054b9
 800542c:	080054b9 	.word	0x080054b9
 8005430:	080054b9 	.word	0x080054b9
 8005434:	080054b9 	.word	0x080054b9
 8005438:	080054b9 	.word	0x080054b9
 800543c:	080054b9 	.word	0x080054b9
 8005440:	080054b9 	.word	0x080054b9
 8005444:	080054a1 	.word	0x080054a1
 8005448:	080054b9 	.word	0x080054b9
 800544c:	080054b9 	.word	0x080054b9
 8005450:	080054b9 	.word	0x080054b9
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054b9 	.word	0x080054b9
 800545c:	080054b9 	.word	0x080054b9
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054a9 	.word	0x080054a9
 8005468:	080054b9 	.word	0x080054b9
 800546c:	080054b9 	.word	0x080054b9
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054b9 	.word	0x080054b9
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e0bc      	b.n	800560a <UART_SetConfig+0x5a2>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e0b8      	b.n	800560a <UART_SetConfig+0x5a2>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e0b4      	b.n	800560a <UART_SetConfig+0x5a2>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e0b0      	b.n	800560a <UART_SetConfig+0x5a2>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e0ac      	b.n	800560a <UART_SetConfig+0x5a2>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e0a8      	b.n	800560a <UART_SetConfig+0x5a2>
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e0a4      	b.n	800560a <UART_SetConfig+0x5a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a90      	ldr	r2, [pc, #576]	; (8005708 <UART_SetConfig+0x6a0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <UART_SetConfig+0x4c4>
 80054ca:	4b8e      	ldr	r3, [pc, #568]	; (8005704 <UART_SetConfig+0x69c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d826      	bhi.n	8005524 <UART_SetConfig+0x4bc>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x474>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005505 	.word	0x08005505
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e086      	b.n	800560a <UART_SetConfig+0x5a2>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e082      	b.n	800560a <UART_SetConfig+0x5a2>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e07e      	b.n	800560a <UART_SetConfig+0x5a2>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e07a      	b.n	800560a <UART_SetConfig+0x5a2>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e076      	b.n	800560a <UART_SetConfig+0x5a2>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e072      	b.n	800560a <UART_SetConfig+0x5a2>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e06e      	b.n	800560a <UART_SetConfig+0x5a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a76      	ldr	r2, [pc, #472]	; (800570c <UART_SetConfig+0x6a4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x530>
 8005536:	4b73      	ldr	r3, [pc, #460]	; (8005704 <UART_SetConfig+0x69c>)
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x528>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x4e0>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e050      	b.n	800560a <UART_SetConfig+0x5a2>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e04c      	b.n	800560a <UART_SetConfig+0x5a2>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e048      	b.n	800560a <UART_SetConfig+0x5a2>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e044      	b.n	800560a <UART_SetConfig+0x5a2>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e040      	b.n	800560a <UART_SetConfig+0x5a2>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e03c      	b.n	800560a <UART_SetConfig+0x5a2>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e038      	b.n	800560a <UART_SetConfig+0x5a2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5c      	ldr	r2, [pc, #368]	; (8005710 <UART_SetConfig+0x6a8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d130      	bne.n	8005604 <UART_SetConfig+0x59c>
 80055a2:	4b58      	ldr	r3, [pc, #352]	; (8005704 <UART_SetConfig+0x69c>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d826      	bhi.n	80055fc <UART_SetConfig+0x594>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x54c>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	2302      	movs	r3, #2
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e01a      	b.n	800560a <UART_SetConfig+0x5a2>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e016      	b.n	800560a <UART_SetConfig+0x5a2>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e012      	b.n	800560a <UART_SetConfig+0x5a2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e00e      	b.n	800560a <UART_SetConfig+0x5a2>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e00a      	b.n	800560a <UART_SetConfig+0x5a2>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e006      	b.n	800560a <UART_SetConfig+0x5a2>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x5a2>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a40      	ldr	r2, [pc, #256]	; (8005710 <UART_SetConfig+0x6a8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	f040 80ef 	bne.w	80057f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800561a:	2b20      	cmp	r3, #32
 800561c:	dc46      	bgt.n	80056ac <UART_SetConfig+0x644>
 800561e:	2b02      	cmp	r3, #2
 8005620:	f2c0 8081 	blt.w	8005726 <UART_SetConfig+0x6be>
 8005624:	3b02      	subs	r3, #2
 8005626:	2b1e      	cmp	r3, #30
 8005628:	d87d      	bhi.n	8005726 <UART_SetConfig+0x6be>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x5c8>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	080056b3 	.word	0x080056b3
 8005634:	08005727 	.word	0x08005727
 8005638:	080056bb 	.word	0x080056bb
 800563c:	08005727 	.word	0x08005727
 8005640:	08005727 	.word	0x08005727
 8005644:	08005727 	.word	0x08005727
 8005648:	080056cb 	.word	0x080056cb
 800564c:	08005727 	.word	0x08005727
 8005650:	08005727 	.word	0x08005727
 8005654:	08005727 	.word	0x08005727
 8005658:	08005727 	.word	0x08005727
 800565c:	08005727 	.word	0x08005727
 8005660:	08005727 	.word	0x08005727
 8005664:	08005727 	.word	0x08005727
 8005668:	080056db 	.word	0x080056db
 800566c:	08005727 	.word	0x08005727
 8005670:	08005727 	.word	0x08005727
 8005674:	08005727 	.word	0x08005727
 8005678:	08005727 	.word	0x08005727
 800567c:	08005727 	.word	0x08005727
 8005680:	08005727 	.word	0x08005727
 8005684:	08005727 	.word	0x08005727
 8005688:	08005727 	.word	0x08005727
 800568c:	08005727 	.word	0x08005727
 8005690:	08005727 	.word	0x08005727
 8005694:	08005727 	.word	0x08005727
 8005698:	08005727 	.word	0x08005727
 800569c:	08005727 	.word	0x08005727
 80056a0:	08005727 	.word	0x08005727
 80056a4:	08005727 	.word	0x08005727
 80056a8:	08005719 	.word	0x08005719
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d036      	beq.n	800571e <UART_SetConfig+0x6b6>
 80056b0:	e039      	b.n	8005726 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056b2:	f7ff f867 	bl	8004784 <HAL_RCCEx_GetD3PCLK1Freq>
 80056b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056b8:	e03b      	b.n	8005732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ba:	f107 0314 	add.w	r3, r7, #20
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f876 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056c8:	e033      	b.n	8005732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f9c2 	bl	8004a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056d8:	e02b      	b.n	8005732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <UART_SetConfig+0x69c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <UART_SetConfig+0x69c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <UART_SetConfig+0x6ac>)
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f8:	e01b      	b.n	8005732 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <UART_SetConfig+0x6ac>)
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056fe:	e018      	b.n	8005732 <UART_SetConfig+0x6ca>
 8005700:	40011400 	.word	0x40011400
 8005704:	58024400 	.word	0x58024400
 8005708:	40007800 	.word	0x40007800
 800570c:	40007c00 	.word	0x40007c00
 8005710:	58000c00 	.word	0x58000c00
 8005714:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005718:	4bc4      	ldr	r3, [pc, #784]	; (8005a2c <UART_SetConfig+0x9c4>)
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800571c:	e009      	b.n	8005732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005724:	e005      	b.n	8005732 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 81da 	beq.w	8005aee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	4abc      	ldr	r2, [pc, #752]	; (8005a30 <UART_SetConfig+0x9c8>)
 8005740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005744:	461a      	mov	r2, r3
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	fbb3 f3f2 	udiv	r3, r3, r2
 800574c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	429a      	cmp	r2, r3
 800575c:	d305      	bcc.n	800576a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	429a      	cmp	r2, r3
 8005768:	d903      	bls.n	8005772 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005770:	e1bd      	b.n	8005aee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	4618      	mov	r0, r3
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	4aac      	ldr	r2, [pc, #688]	; (8005a30 <UART_SetConfig+0x9c8>)
 8005780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005784:	b29a      	uxth	r2, r3
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	f7fa fda5 	bl	80002d8 <__aeabi_uldivmod>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	020b      	lsls	r3, r1, #8
 80057a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057a4:	0202      	lsls	r2, r0, #8
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	6849      	ldr	r1, [r1, #4]
 80057aa:	0849      	lsrs	r1, r1, #1
 80057ac:	4608      	mov	r0, r1
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	1814      	adds	r4, r2, r0
 80057b4:	eb43 0501 	adc.w	r5, r3, r1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	461a      	mov	r2, r3
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	4620      	mov	r0, r4
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7fa fd87 	bl	80002d8 <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4613      	mov	r3, r2
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d8:	d308      	bcc.n	80057ec <UART_SetConfig+0x784>
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e0:	d204      	bcs.n	80057ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e180      	b.n	8005aee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057f2:	e17c      	b.n	8005aee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fc:	f040 80be 	bne.w	800597c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8005800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005804:	2b20      	cmp	r3, #32
 8005806:	dc49      	bgt.n	800589c <UART_SetConfig+0x834>
 8005808:	2b00      	cmp	r3, #0
 800580a:	db7c      	blt.n	8005906 <UART_SetConfig+0x89e>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d87a      	bhi.n	8005906 <UART_SetConfig+0x89e>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0x7b0>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058ab 	.word	0x080058ab
 8005820:	08005907 	.word	0x08005907
 8005824:	08005907 	.word	0x08005907
 8005828:	080058b3 	.word	0x080058b3
 800582c:	08005907 	.word	0x08005907
 8005830:	08005907 	.word	0x08005907
 8005834:	08005907 	.word	0x08005907
 8005838:	080058c3 	.word	0x080058c3
 800583c:	08005907 	.word	0x08005907
 8005840:	08005907 	.word	0x08005907
 8005844:	08005907 	.word	0x08005907
 8005848:	08005907 	.word	0x08005907
 800584c:	08005907 	.word	0x08005907
 8005850:	08005907 	.word	0x08005907
 8005854:	08005907 	.word	0x08005907
 8005858:	080058d3 	.word	0x080058d3
 800585c:	08005907 	.word	0x08005907
 8005860:	08005907 	.word	0x08005907
 8005864:	08005907 	.word	0x08005907
 8005868:	08005907 	.word	0x08005907
 800586c:	08005907 	.word	0x08005907
 8005870:	08005907 	.word	0x08005907
 8005874:	08005907 	.word	0x08005907
 8005878:	08005907 	.word	0x08005907
 800587c:	08005907 	.word	0x08005907
 8005880:	08005907 	.word	0x08005907
 8005884:	08005907 	.word	0x08005907
 8005888:	08005907 	.word	0x08005907
 800588c:	08005907 	.word	0x08005907
 8005890:	08005907 	.word	0x08005907
 8005894:	08005907 	.word	0x08005907
 8005898:	080058f9 	.word	0x080058f9
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d02e      	beq.n	80058fe <UART_SetConfig+0x896>
 80058a0:	e031      	b.n	8005906 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a2:	f7fe f803 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80058a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058a8:	e033      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058aa:	f7fe f815 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 80058ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058b0:	e02f      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b2:	f107 0314 	add.w	r3, r7, #20
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe ff7a 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058c0:	e027      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f8c6 	bl	8004a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058d0:	e01f      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d2:	4b58      	ldr	r3, [pc, #352]	; (8005a34 <UART_SetConfig+0x9cc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058de:	4b55      	ldr	r3, [pc, #340]	; (8005a34 <UART_SetConfig+0x9cc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	4a53      	ldr	r2, [pc, #332]	; (8005a38 <UART_SetConfig+0x9d0>)
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058f0:	e00f      	b.n	8005912 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80058f2:	4b51      	ldr	r3, [pc, #324]	; (8005a38 <UART_SetConfig+0x9d0>)
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f6:	e00c      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <UART_SetConfig+0x9c4>)
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80ea 	beq.w	8005aee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	4a44      	ldr	r2, [pc, #272]	; (8005a30 <UART_SetConfig+0x9c8>)
 8005920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005924:	461a      	mov	r2, r3
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	fbb3 f3f2 	udiv	r3, r3, r2
 800592c:	005a      	lsls	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d916      	bls.n	8005974 <UART_SetConfig+0x90c>
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d212      	bcs.n	8005974 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	b29b      	uxth	r3, r3
 8005952:	f023 030f 	bic.w	r3, r3, #15
 8005956:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	b29b      	uxth	r3, r3
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	b29a      	uxth	r2, r3
 8005964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005966:	4313      	orrs	r3, r2
 8005968:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e0bc      	b.n	8005aee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800597a:	e0b8      	b.n	8005aee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800597c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005980:	2b20      	cmp	r3, #32
 8005982:	dc4b      	bgt.n	8005a1c <UART_SetConfig+0x9b4>
 8005984:	2b00      	cmp	r3, #0
 8005986:	f2c0 8087 	blt.w	8005a98 <UART_SetConfig+0xa30>
 800598a:	2b20      	cmp	r3, #32
 800598c:	f200 8084 	bhi.w	8005a98 <UART_SetConfig+0xa30>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x930>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	08005a23 	.word	0x08005a23
 800599c:	08005a3d 	.word	0x08005a3d
 80059a0:	08005a99 	.word	0x08005a99
 80059a4:	08005a99 	.word	0x08005a99
 80059a8:	08005a45 	.word	0x08005a45
 80059ac:	08005a99 	.word	0x08005a99
 80059b0:	08005a99 	.word	0x08005a99
 80059b4:	08005a99 	.word	0x08005a99
 80059b8:	08005a55 	.word	0x08005a55
 80059bc:	08005a99 	.word	0x08005a99
 80059c0:	08005a99 	.word	0x08005a99
 80059c4:	08005a99 	.word	0x08005a99
 80059c8:	08005a99 	.word	0x08005a99
 80059cc:	08005a99 	.word	0x08005a99
 80059d0:	08005a99 	.word	0x08005a99
 80059d4:	08005a99 	.word	0x08005a99
 80059d8:	08005a65 	.word	0x08005a65
 80059dc:	08005a99 	.word	0x08005a99
 80059e0:	08005a99 	.word	0x08005a99
 80059e4:	08005a99 	.word	0x08005a99
 80059e8:	08005a99 	.word	0x08005a99
 80059ec:	08005a99 	.word	0x08005a99
 80059f0:	08005a99 	.word	0x08005a99
 80059f4:	08005a99 	.word	0x08005a99
 80059f8:	08005a99 	.word	0x08005a99
 80059fc:	08005a99 	.word	0x08005a99
 8005a00:	08005a99 	.word	0x08005a99
 8005a04:	08005a99 	.word	0x08005a99
 8005a08:	08005a99 	.word	0x08005a99
 8005a0c:	08005a99 	.word	0x08005a99
 8005a10:	08005a99 	.word	0x08005a99
 8005a14:	08005a99 	.word	0x08005a99
 8005a18:	08005a8b 	.word	0x08005a8b
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d037      	beq.n	8005a90 <UART_SetConfig+0xa28>
 8005a20:	e03a      	b.n	8005a98 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a22:	f7fd ff43 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005a26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a28:	e03c      	b.n	8005aa4 <UART_SetConfig+0xa3c>
 8005a2a:	bf00      	nop
 8005a2c:	003d0900 	.word	0x003d0900
 8005a30:	08006720 	.word	0x08006720
 8005a34:	58024400 	.word	0x58024400
 8005a38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fd ff4c 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005a40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a42:	e02f      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe feb1 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a52:	e027      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a54:	f107 0308 	add.w	r3, r7, #8
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fffd 	bl	8004a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a62:	e01f      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a64:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <UART_SetConfig+0xab0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a70:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <UART_SetConfig+0xab0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	4a28      	ldr	r2, [pc, #160]	; (8005b1c <UART_SetConfig+0xab4>)
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <UART_SetConfig+0xab4>)
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a88:	e00c      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a8a:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <UART_SetConfig+0xab8>)
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a8e:	e009      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a96:	e005      	b.n	8005aa4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d021      	beq.n	8005aee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <UART_SetConfig+0xabc>)
 8005ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	441a      	add	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2b0f      	cmp	r3, #15
 8005ad2:	d909      	bls.n	8005ae8 <UART_SetConfig+0xa80>
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ada:	d205      	bcs.n	8005ae8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	e002      	b.n	8005aee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3738      	adds	r7, #56	; 0x38
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bdb0      	pop	{r4, r5, r7, pc}
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	03d09000 	.word	0x03d09000
 8005b20:	003d0900 	.word	0x003d0900
 8005b24:	08006720 	.word	0x08006720

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c26:	d10a      	bne.n	8005c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fb fd7e 	bl	800177c <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10e      	bne.n	8005cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82f 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e025      	b.n	8005cfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d10e      	bne.n	8005cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f819 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00f      	b.n	8005cfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b09c      	sub	sp, #112	; 0x70
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	e0a9      	b.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	f000 80a5 	beq.w	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fb fd2d 	bl	800177c <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d140      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d48:	667b      	str	r3, [r7, #100]	; 0x64
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e6      	bne.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e069      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d051      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd2:	d149      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ddc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3308      	adds	r3, #8
 8005e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e30:	623a      	str	r2, [r7, #32]
 8005e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	69f9      	ldr	r1, [r7, #28]
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e010      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	f43f af46 	beq.w	8005d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3770      	adds	r7, #112	; 0x70
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e027      	b.n	8005ef8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e02d      	b.n	8005f78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f84f 	bl	8005ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e02d      	b.n	8005ff4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f811 	bl	8005ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	2b00      	cmp	r3, #0
 800600a:	d108      	bne.n	800601e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800601c:	e031      	b.n	8006082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800601e:	2310      	movs	r3, #16
 8006020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006022:	2310      	movs	r3, #16
 8006024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	0e5b      	lsrs	r3, r3, #25
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	0f5b      	lsrs	r3, r3, #29
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	7b3a      	ldrb	r2, [r7, #12]
 800604a:	4911      	ldr	r1, [pc, #68]	; (8006090 <UARTEx_SetNbDataToProcess+0x94>)
 800604c:	5c8a      	ldrb	r2, [r1, r2]
 800604e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006052:	7b3a      	ldrb	r2, [r7, #12]
 8006054:	490f      	ldr	r1, [pc, #60]	; (8006094 <UARTEx_SetNbDataToProcess+0x98>)
 8006056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006058:	fb93 f3f2 	sdiv	r3, r3, r2
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	7b7a      	ldrb	r2, [r7, #13]
 8006068:	4909      	ldr	r1, [pc, #36]	; (8006090 <UARTEx_SetNbDataToProcess+0x94>)
 800606a:	5c8a      	ldrb	r2, [r1, r2]
 800606c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006070:	7b7a      	ldrb	r2, [r7, #13]
 8006072:	4908      	ldr	r1, [pc, #32]	; (8006094 <UARTEx_SetNbDataToProcess+0x98>)
 8006074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006076:	fb93 f3f2 	sdiv	r3, r3, r2
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	08006738 	.word	0x08006738
 8006094:	08006740 	.word	0x08006740

08006098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d120      	bne.n	80060f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	4b2a      	ldr	r3, [pc, #168]	; (800616c <USB_CoreInit+0xd4>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 faa8 	bl	800663c <USB_CoreReset>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e01a      	b.n	8006128 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa9c 	bl	800663c <USB_CoreReset>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
 800611a:	e005      	b.n	8006128 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2b01      	cmp	r3, #1
 800612c:	d116      	bne.n	800615c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <USB_CoreInit+0xd8>)
 800613e:	4313      	orrs	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f043 0206 	orr.w	r2, r3, #6
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006168:	b004      	add	sp, #16
 800616a:	4770      	bx	lr
 800616c:	ffbdffbf 	.word	0xffbdffbf
 8006170:	03ee0000 	.word	0x03ee0000

08006174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f023 0201 	bic.w	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d115      	bne.n	80061e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061c4:	2001      	movs	r0, #1
 80061c6:	f7fb fae5 	bl	8001794 <HAL_Delay>
      ms++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3301      	adds	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa25 	bl	8006620 <USB_GetMode>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d01e      	beq.n	800621a <USB_SetCurrentMode+0x84>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b31      	cmp	r3, #49	; 0x31
 80061e0:	d9f0      	bls.n	80061c4 <USB_SetCurrentMode+0x2e>
 80061e2:	e01a      	b.n	800621a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d115      	bne.n	8006216 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061f6:	2001      	movs	r0, #1
 80061f8:	f7fb facc 	bl	8001794 <HAL_Delay>
      ms++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa0c 	bl	8006620 <USB_GetMode>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <USB_SetCurrentMode+0x84>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b31      	cmp	r3, #49	; 0x31
 8006212:	d9f0      	bls.n	80061f6 <USB_SetCurrentMode+0x60>
 8006214:	e001      	b.n	800621a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e005      	b.n	8006226 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b32      	cmp	r3, #50	; 0x32
 800621e:	d101      	bne.n	8006224 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006230:	b084      	sub	sp, #16
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e009      	b.n	8006264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3340      	adds	r3, #64	; 0x40
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b0e      	cmp	r3, #14
 8006268:	d9f2      	bls.n	8006250 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11c      	bne.n	80062aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e005      	b.n	80062b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c8:	4619      	mov	r1, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	461a      	mov	r2, r3
 80062d2:	680b      	ldr	r3, [r1, #0]
 80062d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10c      	bne.n	80062f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f961 	bl	80065ac <USB_SetDevSpeed>
 80062ea:	e008      	b.n	80062fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062ec:	2101      	movs	r1, #1
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f95c 	bl	80065ac <USB_SetDevSpeed>
 80062f4:	e003      	b.n	80062fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062f6:	2103      	movs	r1, #3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f957 	bl	80065ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062fe:	2110      	movs	r1, #16
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8f3 	bl	80064ec <USB_FlushTxFifo>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f91d 	bl	8006550 <USB_FlushRxFifo>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	461a      	mov	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	e043      	b.n	80063d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800635c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006360:	d118      	bne.n	8006394 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e013      	b.n	80063a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638a:	461a      	mov	r2, r3
 800638c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e008      	b.n	80063a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	2300      	movs	r3, #0
 80063b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	461a      	mov	r2, r3
 80063c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3301      	adds	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d3b7      	bcc.n	800634a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e043      	b.n	8006468 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f6:	d118      	bne.n	800642a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e013      	b.n	800643c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e008      	b.n	800643c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	2300      	movs	r3, #0
 800644c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	461a      	mov	r2, r3
 800645c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3301      	adds	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d3b7      	bcc.n	80063e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f043 0210 	orr.w	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <USB_DevInit+0x2b4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f043 0208 	orr.w	r2, r3, #8
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d105      	bne.n	80064d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <USB_DevInit+0x2b8>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e0:	b004      	add	sp, #16
 80064e2:	4770      	bx	lr
 80064e4:	803c3800 	.word	0x803c3800
 80064e8:	40000004 	.word	0x40000004

080064ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	4a12      	ldr	r2, [pc, #72]	; (800654c <USB_FlushTxFifo+0x60>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e01a      	b.n	8006540 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	daf3      	bge.n	80064fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	4a08      	ldr	r2, [pc, #32]	; (800654c <USB_FlushTxFifo+0x60>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e006      	b.n	8006540 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d0f1      	beq.n	8006522 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	00030d40 	.word	0x00030d40

08006550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <USB_FlushRxFifo+0x58>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e017      	b.n	800659c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	daf3      	bge.n	800655c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2210      	movs	r2, #16
 800657c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3301      	adds	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <USB_FlushRxFifo+0x58>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e006      	b.n	800659c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b10      	cmp	r3, #16
 8006598:	d0f1      	beq.n	800657e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	00030d40 	.word	0x00030d40

080065ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065cc:	4313      	orrs	r3, r2
 80065ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065f8:	f023 0303 	bic.w	r3, r3, #3
 80065fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660c:	f043 0302 	orr.w	r3, r3, #2
 8006610:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0301 	and.w	r3, r3, #1
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	4a13      	ldr	r2, [pc, #76]	; (800669c <USB_CoreReset+0x60>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e01a      	b.n	800668e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	daf3      	bge.n	8006648 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f043 0201 	orr.w	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <USB_CoreReset+0x60>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d0f1      	beq.n	8006670 <USB_CoreReset+0x34>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	00030d40 	.word	0x00030d40

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4d0d      	ldr	r5, [pc, #52]	; (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	; (80066dc <__libc_init_array+0x3c>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2600      	movs	r6, #0
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4d0b      	ldr	r5, [pc, #44]	; (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	; (80066e4 <__libc_init_array+0x44>)
 80066b4:	f000 f820 	bl	80066f8 <_init>
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2600      	movs	r6, #0
 80066be:	42a6      	cmp	r6, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c8:	4798      	blx	r3
 80066ca:	3601      	adds	r6, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d2:	4798      	blx	r3
 80066d4:	3601      	adds	r6, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	08006750 	.word	0x08006750
 80066dc:	08006750 	.word	0x08006750
 80066e0:	08006750 	.word	0x08006750
 80066e4:	08006754 	.word	0x08006754

080066e8 <memset>:
 80066e8:	4402      	add	r2, r0
 80066ea:	4603      	mov	r3, r0
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d100      	bne.n	80066f2 <memset+0xa>
 80066f0:	4770      	bx	lr
 80066f2:	f803 1b01 	strb.w	r1, [r3], #1
 80066f6:	e7f9      	b.n	80066ec <memset+0x4>

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
