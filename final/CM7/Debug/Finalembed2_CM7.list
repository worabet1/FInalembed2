
Finalembed2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001400  0800ab38  0800ab38  0001ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf38  0800bf38  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf40  0800bf40  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf40  0800bf40  0001bf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf44  0800bf44  0001bf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800bf48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800bfa8  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800c008  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000898  24000120  0800c068  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240009b8  0800c068  000209b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c916  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004163  00000000  00000000  0004ca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00050bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001358  00000000  00000000  00052060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ba98  00000000  00000000  000533b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c179  00000000  00000000  0008ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001859b4  00000000  00000000  000aafc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0023097d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005784  00000000  00000000  002309d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ab20 	.word	0x0800ab20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	0800ab20 	.word	0x0800ab20

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af02      	add	r7, sp, #8
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000722:	88f8      	ldrh	r0, [r7, #6]
 8000724:	88b9      	ldrh	r1, [r7, #4]
 8000726:	887a      	ldrh	r2, [r7, #2]
 8000728:	883c      	ldrh	r4, [r7, #0]
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f000 fa8c 	bl	8000c4c <ST7735_FillRectangle>
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <fillScreen+0x2c>)
 8000748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <fillScreen+0x30>)
 800074e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	460b      	mov	r3, r1
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffd2 	bl	8000704 <fillRect>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000182 	.word	0x24000182
 800076c:	24000186 	.word	0x24000186

08000770 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <ST7735_Select+0x14>)
 800077c:	f004 fe42 	bl	8005404 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00

08000788 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <ST7735_Unselect+0x14>)
 8000794:	f004 fe36 	bl	8005404 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58020c00 	.word	0x58020c00

080007a0 <ST7735_Reset>:

void ST7735_Reset()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_Reset+0x28>)
 80007ac:	f004 fe2a 	bl	8005404 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f001 ffef 	bl	8002794 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ST7735_Reset+0x28>)
 80007be:	f004 fe21 	bl	8005404 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58021800 	.word	0x58021800

080007cc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <ST7735_WriteCommand+0x2c>)
 80007de:	f004 fe11 	bl	8005404 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ST7735_WriteCommand+0x30>)
 80007ec:	f007 fc24 	bl	8008038 <HAL_SPI_Transmit>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	2400073c 	.word	0x2400073c

08000800 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <ST7735_WriteData+0x30>)
 8000812:	f004 fdf7 	bl	8005404 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <ST7735_WriteData+0x34>)
 8000822:	f007 fc09 	bl	8008038 <HAL_SPI_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58020c00 	.word	0x58020c00
 8000834:	2400073c 	.word	0x2400073c

08000838 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800084a:	e034      	b.n	80008b6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffb7 	bl	80007cc <ST7735_WriteCommand>

        numArgs = *addr++;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	b29b      	uxth	r3, r3
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000878:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800087a:	7abb      	ldrb	r3, [r7, #10]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffbb 	bl	8000800 <ST7735_WriteData>
            addr += numArgs;
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00e      	beq.n	80008b6 <DisplayInit+0x7e>
            ms = *addr++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d102      	bne.n	80008ae <DisplayInit+0x76>
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 ff6f 	bl	8002794 <HAL_Delay>
    while(numCommands--) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	73fa      	strb	r2, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1c5      	bne.n	800084c <DisplayInit+0x14>
        }
    }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4604      	mov	r4, r0
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4623      	mov	r3, r4
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4603      	mov	r3, r0
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	717b      	strb	r3, [r7, #5]
 80008e6:	4613      	mov	r3, r2
 80008e8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f7ff ff6e 	bl	80007cc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008f0:	2300      	movs	r3, #0
 80008f2:	733b      	strb	r3, [r7, #12]
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <ST7735_SetAddressWindow+0x88>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff72 	bl	8000800 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800091c:	202b      	movs	r0, #43	; 0x2b
 800091e:	f7ff ff55 	bl	80007cc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_SetAddressWindow+0x8c>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000946:	202c      	movs	r0, #44	; 0x2c
 8000948:	f7ff ff40 	bl	80007cc <ST7735_WriteCommand>
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	2400017a 	.word	0x2400017a
 8000958:	2400017e 	.word	0x2400017e

0800095c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000966:	f7ff ff03 	bl	8000770 <ST7735_Select>
    ST7735_Reset();
 800096a:	f7ff ff19 	bl	80007a0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <ST7735_Init+0x44>)
 8000970:	f7ff ff62 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds2);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <ST7735_Init+0x48>)
 8000976:	f7ff ff5f 	bl	8000838 <DisplayInit>
    DisplayInit(init_cmds3);
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ST7735_Init+0x4c>)
 800097c:	f7ff ff5c 	bl	8000838 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <ST7735_Init+0x50>)
 8000982:	2202      	movs	r2, #2
 8000984:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <ST7735_Init+0x54>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f810 	bl	80009b4 <ST7735_SetRotation>
    ST7735_Unselect();
 8000994:	f7ff fef8 	bl	8000788 <ST7735_Unselect>

}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800ab48 	.word	0x0800ab48
 80009a4:	0800ab80 	.word	0x0800ab80
 80009a8:	0800ab90 	.word	0x0800ab90
 80009ac:	2400017b 	.word	0x2400017b
 80009b0:	2400017f 	.word	0x2400017f

080009b4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009cc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <ST7735_SetRotation+0xe4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d84e      	bhi.n	8000a74 <ST7735_SetRotation+0xc0>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <ST7735_SetRotation+0x28>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a0f 	.word	0x08000a0f
 80009e4:	08000a31 	.word	0x08000a31
 80009e8:	08000a53 	.word	0x08000a53
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <ST7735_SetRotation+0xe8>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <ST7735_SetRotation+0xec>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a02:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a0a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a0c:	e032      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a24:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a2e:	e021      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a46:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a50:	e010      	b.n	8000a74 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <ST7735_SetRotation+0xec>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <ST7735_SetRotation+0xe8>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <ST7735_SetRotation+0xf0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ST7735_SetRotation+0xfc>)
 8000a68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <ST7735_SetRotation+0xf8>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <ST7735_SetRotation+0xf4>)
 8000a70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a72:	bf00      	nop
  }
  ST7735_Select();
 8000a74:	f7ff fe7c 	bl	8000770 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f7ff fea7 	bl	80007cc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff febb 	bl	8000800 <ST7735_WriteData>
  ST7735_Unselect();
 8000a8a:	f7ff fe7d 	bl	8000788 <ST7735_Unselect>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	24000180 	.word	0x24000180
 8000a9c:	24000186 	.word	0x24000186
 8000aa0:	24000182 	.word	0x24000182
 8000aa4:	2400017b 	.word	0x2400017b
 8000aa8:	2400017a 	.word	0x2400017a
 8000aac:	2400017f 	.word	0x2400017f
 8000ab0:	2400017e 	.word	0x2400017e

08000ab4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b089      	sub	sp, #36	; 0x24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2d8      	uxtb	r0, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2dc      	uxtb	r4, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4622      	mov	r2, r4
 8000af4:	f7ff feea 	bl	80008cc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	e043      	b.n	8000b86 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	3b20      	subs	r3, #32
 8000b04:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e029      	b.n	8000b74 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	743b      	strb	r3, [r7, #16]
 8000b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe5a 	bl	8000800 <ST7735_WriteData>
 8000b4c:	e00f      	b.n	8000b6e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe49 	bl	8000800 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b78:	461a      	mov	r2, r3
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d3cf      	bcc.n	8000b20 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3301      	adds	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d3b5      	bcc.n	8000afe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3724      	adds	r7, #36	; 0x24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
	...

08000ba4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af04      	add	r7, sp, #16
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000bb8:	f7ff fdda 	bl	8000770 <ST7735_Select>

    while(*str) {
 8000bbc:	e033      	b.n	8000c26 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	7d3a      	ldrb	r2, [r7, #20]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <ST7735_WriteString+0xa0>)
 8000bc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	db16      	blt.n	8000bfc <ST7735_WriteString+0x58>
            x = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	7d7a      	ldrb	r2, [r7, #21]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <ST7735_WriteString+0xa4>)
 8000be4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	da21      	bge.n	8000c30 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d103      	bne.n	8000bfc <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
                continue;
 8000bfa:	e014      	b.n	8000c26 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	88b9      	ldrh	r1, [r7, #4]
 8000c02:	88f8      	ldrh	r0, [r7, #6]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	8bbb      	ldrh	r3, [r7, #28]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f7ff ff4f 	bl	8000ab4 <ST7735_WriteChar>
        x += font.width;
 8000c16:	7d3b      	ldrb	r3, [r7, #20]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1c7      	bne.n	8000bbe <ST7735_WriteString+0x1a>
 8000c2e:	e000      	b.n	8000c32 <ST7735_WriteString+0x8e>
                break;
 8000c30:	bf00      	nop
    }

    ST7735_Unselect();
 8000c32:	f7ff fda9 	bl	8000788 <ST7735_Unselect>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c40:	b002      	add	sp, #8
 8000c42:	4770      	bx	lr
 8000c44:	24000182 	.word	0x24000182
 8000c48:	24000186 	.word	0x24000186

08000c4c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	da67      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	da61      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd06      	ble.n	8000ca0 <ST7735_FillRectangle+0x54>
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd06      	ble.n	8000cbe <ST7735_FillRectangle+0x72>
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cbe:	f7ff fd57 	bl	8000770 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2dc      	uxtb	r4, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4622      	mov	r2, r4
 8000cec:	f7ff fdee 	bl	80008cc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf0:	8c3b      	ldrh	r3, [r7, #32]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	733b      	strb	r3, [r7, #12]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <ST7735_FillRectangle+0x10c>)
 8000d08:	f004 fb7c 	bl	8005404 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	e013      	b.n	8000d3a <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e00a      	b.n	8000d2e <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ST7735_FillRectangle+0x110>)
 8000d24:	f007 f988 	bl	8008038 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000d40:	f7ff fd22 	bl	8000788 <ST7735_Unselect>
 8000d44:	e000      	b.n	8000d48 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000182 	.word	0x24000182
 8000d54:	24000186 	.word	0x24000186
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	2400073c 	.word	0x2400073c

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af04      	add	r7, sp, #16
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000d6c:	bf00      	nop
 8000d6e:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <main+0x264>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <main+0x24>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	60fa      	str	r2, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0xe>
		;
	if (timeout < 0) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x2e>
		Error_Handler();
 8000d8a:	f001 f86c 	bl	8001e66 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f001 fc6f 	bl	8002670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 fa1d 	bl	80011d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d96:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <main+0x264>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a89      	ldr	r2, [pc, #548]	; (8000fc4 <main+0x264>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b87      	ldr	r3, [pc, #540]	; (8000fc4 <main+0x264>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 fb3f 	bl	8005438 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f004 fb55 	bl	800546c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000dc8:	bf00      	nop
 8000dca:	4b7e      	ldr	r3, [pc, #504]	; (8000fc4 <main+0x264>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x80>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	60fa      	str	r2, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dcf4      	bgt.n	8000dca <main+0x6a>
		;
	if (timeout < 0) {
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da01      	bge.n	8000dea <main+0x8a>
		Error_Handler();
 8000de6:	f001 f83e 	bl	8001e66 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 fc1f 	bl	800162c <MX_GPIO_Init>
  MX_ETH_Init();
 8000dee:	f000 fa73 	bl	80012d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000df2:	f000 fb6d 	bl	80014d0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000df6:	f000 fbe9 	bl	80015cc <MX_DMA_Init>
  MX_SPI1_Init();
 8000dfa:	f000 fab9 	bl	8001370 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 fbb3 	bl	8001568 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000e02:	f000 fb0d 	bl	8001420 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	ST7735_Init(2);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff fda8 	bl	800095c <ST7735_Init>
	fillScreen(BLACK);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fc95 	bl	800073c <fillScreen>
	    Write_MFRC522(0x2A, 0x80);
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	202a      	movs	r0, #42	; 0x2a
 8000e16:	f000 fe97 	bl	8001b48 <Write_MFRC522>
	    Write_MFRC522(0x2B, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000e1a:	21a9      	movs	r1, #169	; 0xa9
 8000e1c:	202b      	movs	r0, #43	; 0x2b
 8000e1e:	f000 fe93 	bl	8001b48 <Write_MFRC522>
	    Write_MFRC522(0x2D, 0x03); //30);
 8000e22:	2103      	movs	r1, #3
 8000e24:	202d      	movs	r0, #45	; 0x2d
 8000e26:	f000 fe8f 	bl	8001b48 <Write_MFRC522>
	    Write_MFRC522(0x2C, 0xE8); //0);
 8000e2a:	21e8      	movs	r1, #232	; 0xe8
 8000e2c:	202c      	movs	r0, #44	; 0x2c
 8000e2e:	f000 fe8b 	bl	8001b48 <Write_MFRC522>
	    Write_MFRC522(0x15, 0x40);     // force 100% ASK modulation
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	2015      	movs	r0, #21
 8000e36:	f000 fe87 	bl	8001b48 <Write_MFRC522>
	    Write_MFRC522(0x11, 0x3D);       // CRC Initial value 0x6363
 8000e3a:	213d      	movs	r1, #61	; 0x3d
 8000e3c:	2011      	movs	r0, #17
 8000e3e:	f000 fe83 	bl	8001b48 <Write_MFRC522>
	    char tmp1;
	    tmp1 = Read_MFRC522(0x14);
 8000e42:	2014      	movs	r0, #20
 8000e44:	f000 feb2 	bl	8001bac <Read_MFRC522>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
	    Write_MFRC522(0x14, tmp1 | 0x03); // antenna on
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4619      	mov	r1, r3
 8000e56:	2014      	movs	r0, #20
 8000e58:	f000 fe76 	bl	8001b48 <Write_MFRC522>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
				for (int i = 0; i < 16; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	e007      	b.n	8000e72 <main+0x112>
						  cardstr[i] = 0;
 8000e62:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <main+0x268>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2100      	movs	r1, #0
 8000e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 16; i++) {
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	ddf4      	ble.n	8000e62 <main+0x102>
					  }
				findcard = MFRC522_Request(0x26,cardstr);
 8000e78:	4953      	ldr	r1, [pc, #332]	; (8000fc8 <main+0x268>)
 8000e7a:	2026      	movs	r0, #38	; 0x26
 8000e7c:	f000 ff93 	bl	8001da6 <MFRC522_Request>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b51      	ldr	r3, [pc, #324]	; (8000fcc <main+0x26c>)
 8000e86:	601a      	str	r2, [r3, #0]
		numbercar[0] = password[0] + 48;
 8000e88:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <main+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3330      	adds	r3, #48	; 0x30
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <main+0x274>)
 8000e94:	701a      	strb	r2, [r3, #0]
		numbercar[2] = password[1] + 48;
 8000e96:	4b4e      	ldr	r3, [pc, #312]	; (8000fd0 <main+0x270>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3330      	adds	r3, #48	; 0x30
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <main+0x274>)
 8000ea2:	709a      	strb	r2, [r3, #2]
		numbercar[4] = password[2] + 48;
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <main+0x270>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3330      	adds	r3, #48	; 0x30
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <main+0x274>)
 8000eb0:	711a      	strb	r2, [r3, #4]
		numbercar[6] = password[3] + 48;
 8000eb2:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <main+0x270>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <main+0x274>)
 8000ebe:	719a      	strb	r2, [r3, #6]
		//		ST7735_WriteString(0, 51, "_ _ _ _", Font_16x26, YELLOW,BLACK);
		ST7735_WriteString(0, 50, numbercar, Font_16x26, YELLOW, BLACK);
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <main+0x278>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	9202      	str	r2, [sp, #8]
 8000ec6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <main+0x274>)
 8000ed4:	2132      	movs	r1, #50	; 0x32
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fe64 	bl	8000ba4 <ST7735_WriteString>
		ButtonMatrixUpdate();
 8000edc:	f000 fcfe 	bl	80018dc <ButtonMatrixUpdate>
		press[0] = ButtonMatrixState;
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <main+0x27c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <main+0x280>)
 8000ee8:	601a      	str	r2, [r3, #0]
		if (press[0] != press[1] && press[0] != 0) {
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <main+0x280>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <main+0x280>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	f000 8156 	beq.w	80011a4 <main+0x444>
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <main+0x280>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 8151 	beq.w	80011a4 <main+0x444>
			if (state == 0) {
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <main+0x284>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d110      	bne.n	8000f2c <main+0x1cc>
				if (ButtonMatrixState != 0b100000000000) {
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <main+0x27c>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f12:	d074      	beq.n	8000ffe <main+0x29e>
					password[0] = Button(ButtonMatrixState);
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <main+0x27c>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fd71 	bl	8001a00 <Button>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a2b      	ldr	r2, [pc, #172]	; (8000fd0 <main+0x270>)
 8000f22:	6013      	str	r3, [r2, #0]
					state = 1;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <main+0x284>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e068      	b.n	8000ffe <main+0x29e>
				}
			} else if (state == 1) {
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <main+0x284>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d118      	bne.n	8000f66 <main+0x206>
				if (ButtonMatrixState == 0b100000000000) {
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <main+0x27c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f3c:	d107      	bne.n	8000f4e <main+0x1ee>
					password[0] = -16;
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <main+0x270>)
 8000f40:	f06f 020f 	mvn.w	r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
					state = 0;
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <main+0x284>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e057      	b.n	8000ffe <main+0x29e>
				} else {
					password[1] = Button(ButtonMatrixState);
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <main+0x27c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fd54 	bl	8001a00 <Button>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <main+0x270>)
 8000f5c:	6053      	str	r3, [r2, #4]
					state = 2;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <main+0x284>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e04b      	b.n	8000ffe <main+0x29e>
				}
			} else if (state == 2) {
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <main+0x284>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d118      	bne.n	8000fa0 <main+0x240>
				if (ButtonMatrixState == 0b100000000000) {
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <main+0x27c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f76:	d107      	bne.n	8000f88 <main+0x228>
					password[1] = -16;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <main+0x270>)
 8000f7a:	f06f 020f 	mvn.w	r2, #15
 8000f7e:	605a      	str	r2, [r3, #4]
					state = 1;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <main+0x284>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e03a      	b.n	8000ffe <main+0x29e>
				} else {
					password[2] = Button(ButtonMatrixState);
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <main+0x27c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fd37 	bl	8001a00 <Button>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <main+0x270>)
 8000f96:	6093      	str	r3, [r2, #8]
					state = 3;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <main+0x284>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e02e      	b.n	8000ffe <main+0x29e>
				}
			} else if (state == 3) {
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <main+0x284>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d12a      	bne.n	8000ffe <main+0x29e>
				if (ButtonMatrixState == 0b100000000000) {
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <main+0x27c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb0:	d11a      	bne.n	8000fe8 <main+0x288>
					password[2] = -16;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <main+0x270>)
 8000fb4:	f06f 020f 	mvn.w	r2, #15
 8000fb8:	609a      	str	r2, [r3, #8]
					state = 2;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <main+0x284>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e01d      	b.n	8000ffe <main+0x29e>
 8000fc2:	bf00      	nop
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	24000974 	.word	0x24000974
 8000fcc:	240007c4 	.word	0x240007c4
 8000fd0:	24000010 	.word	0x24000010
 8000fd4:	24000020 	.word	0x24000020
 8000fd8:	24000008 	.word	0x24000008
 8000fdc:	2400013c 	.word	0x2400013c
 8000fe0:	24000734 	.word	0x24000734
 8000fe4:	24000140 	.word	0x24000140
				} else {
					password[3] = Button(ButtonMatrixState);
 8000fe8:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <main+0x450>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fd07 	bl	8001a00 <Button>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a6f      	ldr	r2, [pc, #444]	; (80011b4 <main+0x454>)
 8000ff6:	60d3      	str	r3, [r2, #12]
					state = 4;
 8000ff8:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <main+0x458>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
				}
			}
			if (state == 4) {
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <main+0x458>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	f040 80ce 	bne.w	80011a4 <main+0x444>
				if (setpassword == 3) {
 8001008:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <main+0x45c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d12e      	bne.n	800106e <main+0x30e>
					if (password[0] == verify[0] && password[1] == verify[1]
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <main+0x454>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <main+0x460>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d121      	bne.n	8001060 <main+0x300>
 800101c:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <main+0x454>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <main+0x460>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	d11b      	bne.n	8001060 <main+0x300>
							&& password[2] == verify[2]
 8001028:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <main+0x454>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <main+0x460>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	d115      	bne.n	8001060 <main+0x300>
							&& password[3] == verify[3]) {
 8001034:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <main+0x454>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <main+0x460>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d10f      	bne.n	8001060 <main+0x300>
						key[0] = verify[0];
 8001040:	4b5f      	ldr	r3, [pc, #380]	; (80011c0 <main+0x460>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a5f      	ldr	r2, [pc, #380]	; (80011c4 <main+0x464>)
 8001046:	6013      	str	r3, [r2, #0]
						key[1] = verify[1];
 8001048:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <main+0x460>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a5d      	ldr	r2, [pc, #372]	; (80011c4 <main+0x464>)
 800104e:	6053      	str	r3, [r2, #4]
						key[2] = verify[2];
 8001050:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <main+0x460>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a5b      	ldr	r2, [pc, #364]	; (80011c4 <main+0x464>)
 8001056:	6093      	str	r3, [r2, #8]
						key[3] = verify[3];
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <main+0x460>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a59      	ldr	r2, [pc, #356]	; (80011c4 <main+0x464>)
 800105e:	60d3      	str	r3, [r2, #12]
					}
					setpassword = 0;
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <main+0x45c>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
					state = 0;
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <main+0x458>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e08a      	b.n	8001184 <main+0x424>
				} else if (setpassword == 2) {
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <main+0x45c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d116      	bne.n	80010a4 <main+0x344>
					verify[0] = password[0];
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <main+0x454>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <main+0x460>)
 800107c:	6013      	str	r3, [r2, #0]
					verify[1] = password[1];
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <main+0x454>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <main+0x460>)
 8001084:	6053      	str	r3, [r2, #4]
					verify[2] = password[2];
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x454>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <main+0x460>)
 800108c:	6093      	str	r3, [r2, #8]
					verify[3] = password[3];
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <main+0x454>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <main+0x460>)
 8001094:	60d3      	str	r3, [r2, #12]
					setpassword = 3;
 8001096:	4b49      	ldr	r3, [pc, #292]	; (80011bc <main+0x45c>)
 8001098:	2203      	movs	r2, #3
 800109a:	601a      	str	r2, [r3, #0]
					state = 0;
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <main+0x458>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e06f      	b.n	8001184 <main+0x424>
				} else if (setpassword == 1) {
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <main+0x45c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d122      	bne.n	80010f2 <main+0x392>
					if (password[0] == key[0] && password[1] == key[1]
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <main+0x454>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <main+0x464>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d115      	bne.n	80010e4 <main+0x384>
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <main+0x454>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <main+0x464>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d10f      	bne.n	80010e4 <main+0x384>
							&& password[2] == key[3] && password[3] == key[4]) {
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <main+0x454>)
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <main+0x464>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d109      	bne.n	80010e4 <main+0x384>
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <main+0x454>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <main+0x464>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d103      	bne.n	80010e4 <main+0x384>
						setpassword = 2;
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <main+0x45c>)
 80010de:	2202      	movs	r2, #2
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e002      	b.n	80010ea <main+0x38a>
					} else {
						setpassword = 0;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <main+0x45c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
					}
					state = 0;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <main+0x458>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e048      	b.n	8001184 <main+0x424>
				} else if (password[0] == 15 && password[1] == 1
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <main+0x454>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d112      	bne.n	8001120 <main+0x3c0>
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <main+0x454>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d10e      	bne.n	8001120 <main+0x3c0>
						&& password[2] == 2 && password[3] == 3) {
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <main+0x454>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10a      	bne.n	8001120 <main+0x3c0>
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <main+0x454>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d106      	bne.n	8001120 <main+0x3c0>
					state = 0;
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <main+0x458>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
					setpassword = 1;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <main+0x45c>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e031      	b.n	8001184 <main+0x424>
				} else if (password[0] == 15 && password[1] == 4
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <main+0x454>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d10b      	bne.n	8001140 <main+0x3e0>
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <main+0x454>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d107      	bne.n	8001140 <main+0x3e0>
						&& password[2] == 5 && password[3] == 6) {
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <main+0x454>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d103      	bne.n	8001140 <main+0x3e0>
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <main+0x454>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b06      	cmp	r3, #6
 800113e:	d021      	beq.n	8001184 <main+0x424>
					//	RFID
				} else if (password[0] == key[0] && password[1] == key[1]
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <main+0x454>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <main+0x464>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d118      	bne.n	800117e <main+0x41e>
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <main+0x454>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <main+0x464>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	d112      	bne.n	800117e <main+0x41e>
						&& password[2] == key[3] && password[3] == key[4]) {
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0x454>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <main+0x464>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10c      	bne.n	800117e <main+0x41e>
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <main+0x454>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <main+0x464>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d106      	bne.n	800117e <main+0x41e>
					lock = 1;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <main+0x468>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
					state = 0;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0x458>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e002      	b.n	8001184 <main+0x424>
				} else {
					state = 0;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <main+0x458>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
				}
				password[0] = -16;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <main+0x454>)
 8001186:	f06f 020f 	mvn.w	r2, #15
 800118a:	601a      	str	r2, [r3, #0]
				password[1] = -16;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <main+0x454>)
 800118e:	f06f 020f 	mvn.w	r2, #15
 8001192:	605a      	str	r2, [r3, #4]
				password[2] = -16;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <main+0x454>)
 8001196:	f06f 020f 	mvn.w	r2, #15
 800119a:	609a      	str	r2, [r3, #8]
				password[3] = -16;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <main+0x454>)
 800119e:	f06f 020f 	mvn.w	r2, #15
 80011a2:	60da      	str	r2, [r3, #12]
			}
		}

		press[1] = press[0];
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <main+0x46c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <main+0x46c>)
 80011aa:	6053      	str	r3, [r2, #4]
				for (int i = 0; i < 16; i++) {
 80011ac:	e656      	b.n	8000e5c <main+0xfc>
 80011ae:	bf00      	nop
 80011b0:	2400013c 	.word	0x2400013c
 80011b4:	24000010 	.word	0x24000010
 80011b8:	24000140 	.word	0x24000140
 80011bc:	24000158 	.word	0x24000158
 80011c0:	2400015c 	.word	0x2400015c
 80011c4:	24000144 	.word	0x24000144
 80011c8:	24000154 	.word	0x24000154
 80011cc:	24000734 	.word	0x24000734

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	; 0x70
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	224c      	movs	r2, #76	; 0x4c
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fc96 	bl	800ab10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2220      	movs	r2, #32
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fc90 	bl	800ab10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011f0:	2004      	movs	r0, #4
 80011f2:	f004 fa97 	bl	8005724 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <SystemClock_Config+0xfc>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a33      	ldr	r2, [pc, #204]	; (80012cc <SystemClock_Config+0xfc>)
 8001200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <SystemClock_Config+0xfc>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <SystemClock_Config+0x100>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <SystemClock_Config+0x100>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <SystemClock_Config+0x100>)
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <SystemClock_Config+0xfc>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <SystemClock_Config+0x104>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f023 0303 	bic.w	r3, r3, #3
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <SystemClock_Config+0x104>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800124c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800125a:	2301      	movs	r3, #1
 800125c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800125e:	2378      	movs	r3, #120	; 0x78
 8001260:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001266:	2306      	movs	r3, #6
 8001268:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800126e:	230c      	movs	r3, #12
 8001270:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001272:	2300      	movs	r3, #0
 8001274:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4618      	mov	r0, r3
 8001280:	f004 faba 	bl	80057f8 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800128a:	f000 fdec 	bl	8001e66 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	233f      	movs	r3, #63	; 0x3f
 8001290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2303      	movs	r3, #3
 8001294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800129a:	2308      	movs	r3, #8
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800129e:	2340      	movs	r3, #64	; 0x40
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2104      	movs	r1, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fecb 	bl	8006050 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80012c0:	f000 fdd1 	bl	8001e66 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3770      	adds	r7, #112	; 0x70
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	58024800 	.word	0x58024800
 80012d0:	58000400 	.word	0x58000400
 80012d4:	58024400 	.word	0x58024400

080012d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_ETH_Init+0x80>)
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <MX_ETH_Init+0x84>)
 80012e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_ETH_Init+0x88>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ETH_Init+0x88>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_ETH_Init+0x88>)
 80012f0:	22e1      	movs	r2, #225	; 0xe1
 80012f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_ETH_Init+0x88>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_ETH_Init+0x88>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_ETH_Init+0x88>)
 8001302:	2200      	movs	r2, #0
 8001304:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_ETH_Init+0x80>)
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <MX_ETH_Init+0x88>)
 800130a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_ETH_Init+0x80>)
 800130e:	2201      	movs	r2, #1
 8001310:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_ETH_Init+0x80>)
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_ETH_Init+0x8c>)
 8001316:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_ETH_Init+0x80>)
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <MX_ETH_Init+0x90>)
 800131c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_ETH_Init+0x80>)
 8001320:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001324:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_ETH_Init+0x80>)
 8001328:	f003 fa8e 	bl	8004848 <HAL_ETH_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001332:	f000 fd98 	bl	8001e66 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001336:	2234      	movs	r2, #52	; 0x34
 8001338:	2100      	movs	r1, #0
 800133a:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ETH_Init+0x94>)
 800133c:	f009 fbe8 	bl	800ab10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_ETH_Init+0x94>)
 8001342:	2221      	movs	r2, #33	; 0x21
 8001344:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_ETH_Init+0x94>)
 8001348:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800134c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_ETH_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000840 	.word	0x24000840
 800135c:	40028000 	.word	0x40028000
 8001360:	24000174 	.word	0x24000174
 8001364:	240000c0 	.word	0x240000c0
 8001368:	24000060 	.word	0x24000060
 800136c:	240008c8 	.word	0x240008c8

08001370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001376:	4a29      	ldr	r2, [pc, #164]	; (800141c <MX_SPI1_Init+0xac>)
 8001378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_SPI1_Init+0xa8>)
 800137c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001388:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_SPI1_Init+0xa8>)
 800138c:	2207      	movs	r2, #7
 800138e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_SPI1_Init+0xa8>)
 800139e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013a6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80013aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SPI1_Init+0xa8>)
 80013f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001400:	2200      	movs	r2, #0
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_SPI1_Init+0xa8>)
 8001406:	f006 fd11 	bl	8007e2c <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001410:	f000 fd29 	bl	8001e66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2400073c 	.word	0x2400073c
 800141c:	40013000 	.word	0x40013000

08001420 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001426:	4a29      	ldr	r2, [pc, #164]	; (80014cc <MX_SPI2_Init+0xac>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800142c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800143a:	2207      	movs	r2, #7
 800143c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800144c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001450:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001458:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001482:	2200      	movs	r2, #0
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001488:	2200      	movs	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_SPI2_Init+0xa8>)
 8001494:	2200      	movs	r2, #0
 8001496:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_SPI2_Init+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_SPI2_Init+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_SPI2_Init+0xa8>)
 80014a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SPI2_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_SPI2_Init+0xa8>)
 80014b4:	f006 fcba 	bl	8007e2c <HAL_SPI_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80014be:	f000 fcd2 	bl	8001e66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400018c 	.word	0x2400018c
 80014cc:	40003800 	.word	0x40003800

080014d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <MX_USART3_UART_Init+0x94>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_USART3_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_USART3_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_USART3_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_USART3_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_USART3_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001518:	4811      	ldr	r0, [pc, #68]	; (8001560 <MX_USART3_UART_Init+0x90>)
 800151a:	f007 ff68 	bl	80093ee <HAL_UART_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001524:	f000 fc9f 	bl	8001e66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_USART3_UART_Init+0x90>)
 800152c:	f008 fefe 	bl	800a32c <HAL_UARTEx_SetTxFifoThreshold>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001536:	f000 fc96 	bl	8001e66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <MX_USART3_UART_Init+0x90>)
 800153e:	f008 ff33 	bl	800a3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001548:	f000 fc8d 	bl	8001e66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_USART3_UART_Init+0x90>)
 800154e:	f008 feb4 	bl	800a2ba <HAL_UARTEx_DisableFifoMode>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001558:	f000 fc85 	bl	8001e66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24000214 	.word	0x24000214
 8001564:	40004800 	.word	0x40004800

08001568 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001570:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001574:	2209      	movs	r2, #9
 8001576:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157a:	2202      	movs	r2, #2
 800157c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001586:	2202      	movs	r2, #2
 8001588:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b0:	f003 ff70 	bl	8005494 <HAL_PCD_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80015ba:	f000 fc54 	bl	8001e66 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	240002a4 	.word	0x240002a4
 80015c8:	40080000 	.word	0x40080000

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_DMA_Init+0x5c>)
 80015d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_DMA_Init+0x5c>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_DMA_Init+0x5c>)
 80015e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	200b      	movs	r0, #11
 80015f6:	f001 f9ec 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015fa:	200b      	movs	r0, #11
 80015fc:	f001 fa03 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	200c      	movs	r0, #12
 8001606:	f001 f9e4 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800160a:	200c      	movs	r0, #12
 800160c:	f001 f9fb 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	200d      	movs	r0, #13
 8001616:	f001 f9dc 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800161a:	200d      	movs	r0, #13
 800161c:	f001 f9f3 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	4b9f      	ldr	r3, [pc, #636]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a9d      	ldr	r2, [pc, #628]	; (80018c0 <MX_GPIO_Init+0x294>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b9b      	ldr	r3, [pc, #620]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001660:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	4a96      	ldr	r2, [pc, #600]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001670:	4b93      	ldr	r3, [pc, #588]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b90      	ldr	r3, [pc, #576]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a8e      	ldr	r2, [pc, #568]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <MX_GPIO_Init+0x294>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a87      	ldr	r2, [pc, #540]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a7f      	ldr	r2, [pc, #508]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a78      	ldr	r2, [pc, #480]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b75      	ldr	r3, [pc, #468]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f6:	4b72      	ldr	r3, [pc, #456]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a70      	ldr	r2, [pc, #448]	; (80018c0 <MX_GPIO_Init+0x294>)
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <MX_GPIO_Init+0x294>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f244 0101 	movw	r1, #16385	; 0x4001
 800171a:	486a      	ldr	r0, [pc, #424]	; (80018c4 <MX_GPIO_Init+0x298>)
 800171c:	f003 fe72 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|RFIDreset_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001726:	4868      	ldr	r0, [pc, #416]	; (80018c8 <MX_GPIO_Init+0x29c>)
 8001728:	f003 fe6c 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFIDcs_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8001732:	4864      	ldr	r0, [pc, #400]	; (80018c4 <MX_GPIO_Init+0x298>)
 8001734:	f003 fe66 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|LCDc_d_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800173e:	4863      	ldr	r0, [pc, #396]	; (80018cc <MX_GPIO_Init+0x2a0>)
 8001740:	f003 fe60 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDcs_GPIO_Port, LCDcs_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174a:	4860      	ldr	r0, [pc, #384]	; (80018cc <MX_GPIO_Init+0x2a0>)
 800174c:	f003 fe5a 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCDreset_Pin|GPIO_PIN_14, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8001756:	485e      	ldr	r0, [pc, #376]	; (80018d0 <MX_GPIO_Init+0x2a4>)
 8001758:	f003 fe54 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	4859      	ldr	r0, [pc, #356]	; (80018c8 <MX_GPIO_Init+0x29c>)
 8001762:	f003 fe4f 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4856      	ldr	r0, [pc, #344]	; (80018d4 <MX_GPIO_Init+0x2a8>)
 800177c:	f003 fc7a 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin RFIDcs_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|RFIDcs_Pin|LD3_Pin;
 8001780:	f644 0301 	movw	r3, #18433	; 0x4801
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	484a      	ldr	r0, [pc, #296]	; (80018c4 <MX_GPIO_Init+0x298>)
 800179a:	f003 fc6b 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 800179e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4845      	ldr	r0, [pc, #276]	; (80018c8 <MX_GPIO_Init+0x29c>)
 80017b4:	f003 fc5e 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017be:	2311      	movs	r3, #17
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	483d      	ldr	r0, [pc, #244]	; (80018c8 <MX_GPIO_Init+0x29c>)
 80017d2:	f003 fc4f 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFIDreset_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RFIDreset_Pin|LD2_Pin;
 80017d6:	f248 0302 	movw	r3, #32770	; 0x8002
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4836      	ldr	r0, [pc, #216]	; (80018c8 <MX_GPIO_Init+0x29c>)
 80017f0:	f003 fc40 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin LCDcs_Pin LCDc_d_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|LCDcs_Pin|LCDc_d_Pin;
 80017f4:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	482f      	ldr	r0, [pc, #188]	; (80018cc <MX_GPIO_Init+0x2a0>)
 800180e:	f003 fc31 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <MX_GPIO_Init+0x2a4>)
 8001828:	f003 fc24 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4825      	ldr	r0, [pc, #148]	; (80018d8 <MX_GPIO_Init+0x2ac>)
 8001842:	f003 fc17 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDreset_Pin */
  GPIO_InitStruct.Pin = LCDreset_Pin;
 8001846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDreset_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <MX_GPIO_Init+0x2a4>)
 8001860:	f003 fc08 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <MX_GPIO_Init+0x2a4>)
 800187a:	f003 fbfb 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800187e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001884:	2311      	movs	r3, #17
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_GPIO_Init+0x2a4>)
 8001898:	f003 fbec 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018a0:	2311      	movs	r3, #17
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_GPIO_Init+0x298>)
 80018b4:	f003 fbde 	bl	8005074 <HAL_GPIO_Init>

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58020400 	.word	0x58020400
 80018c8:	58021000 	.word	0x58021000
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021800 	.word	0x58021800
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58020000 	.word	0x58020000

080018dc <ButtonMatrixUpdate>:
uint16_t ButtonMatrixPin[8] = { GPIO_PIN_12, GPIO_PIN_8, GPIO_PIN_11,
GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_14,
GPIO_PIN_6, GPIO_PIN_7 };

uint8_t ButtonMatrixRow = 0;  //What  R Now
void ButtonMatrixUpdate() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ButtonMatrixTimestamp >= 50) {
 80018e2:	f000 ff4b 	bl	800277c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <ButtonMatrixUpdate+0x10c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b31      	cmp	r3, #49	; 0x31
 80018f0:	d975      	bls.n	80019de <ButtonMatrixUpdate+0x102>
		x = x + 1;
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <ButtonMatrixUpdate+0x110>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a3c      	ldr	r2, [pc, #240]	; (80019ec <ButtonMatrixUpdate+0x110>)
 80018fa:	6013      	str	r3, [r2, #0]
		ButtonMatrixTimestamp = HAL_GetTick();
 80018fc:	f000 ff3e 	bl	800277c <HAL_GetTick>
 8001900:	4603      	mov	r3, r0
 8001902:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <ButtonMatrixUpdate+0x10c>)
 8001904:	6013      	str	r3, [r2, #0]
		int i;
		for (i = 0; i < 4; i += 1) { //0-3
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e038      	b.n	800197e <ButtonMatrixUpdate+0xa2>
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i],
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <ButtonMatrixUpdate+0x114>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001914:	4937      	ldr	r1, [pc, #220]	; (80019f4 <ButtonMatrixUpdate+0x118>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f003 fd58 	bl	80053d4 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	707b      	strb	r3, [r7, #1]
					ButtonMatrixPin[i]);
			if (PinState == GPIO_PIN_RESET) // Button Press
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d111      	bne.n	8001952 <ButtonMatrixUpdate+0x76>
					{
				ButtonMatrixState |= (uint16_t) 1 << (i + ButtonMatrixRow * 4);
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	009a      	lsls	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	2201      	movs	r2, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	b21a      	sxth	r2, r3
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <ButtonMatrixUpdate+0x120>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b21b      	sxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b21b      	sxth	r3, r3
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <ButtonMatrixUpdate+0x120>)
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	e012      	b.n	8001978 <ButtonMatrixUpdate+0x9c>
			} else {
				ButtonMatrixState &=
						~((uint16_t) 1 << (i + ButtonMatrixRow * 4));
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
				ButtonMatrixState &=
 8001962:	b21b      	sxth	r3, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	b21a      	sxth	r2, r3
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <ButtonMatrixUpdate+0x120>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4013      	ands	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <ButtonMatrixUpdate+0x120>)
 8001976:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 4; i += 1) { //0-3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3301      	adds	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b03      	cmp	r3, #3
 8001982:	ddc3      	ble.n	800190c <ButtonMatrixUpdate+0x30>
			}
		}
		uint8_t NowOutputPin = ButtonMatrixRow + 4;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3304      	adds	r3, #4
 800198a:	70fb      	strb	r3, [r7, #3]
		//SET Rn
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin],
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <ButtonMatrixUpdate+0x114>)
 8001990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <ButtonMatrixUpdate+0x118>)
 8001998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199c:	2201      	movs	r2, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	f003 fd30 	bl	8005404 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
		// update New Row
		ButtonMatrixRow = (ButtonMatrixRow + 1) % 4;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	425a      	negs	r2, r3
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	bf58      	it	pl
 80019b6:	4253      	negpl	r3, r2
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 80019bc:	701a      	strb	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixRow + 4;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <ButtonMatrixUpdate+0x11c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3304      	adds	r3, #4
 80019c4:	70bb      	strb	r3, [r7, #2]
		//Reset Rn+1
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin],
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <ButtonMatrixUpdate+0x114>)
 80019ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <ButtonMatrixUpdate+0x118>)
 80019d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	f003 fd13 	bl	8005404 <HAL_GPIO_WritePin>
				ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);

	}
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2400016c 	.word	0x2400016c
 80019ec:	24000188 	.word	0x24000188
 80019f0:	24000028 	.word	0x24000028
 80019f4:	24000048 	.word	0x24000048
 80019f8:	24000170 	.word	0x24000170
 80019fc:	2400013c 	.word	0x2400013c

08001a00 <Button>:
int Button( ButtonMatrixState) {
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	int pass = -16;
 8001a08:	f06f 030f 	mvn.w	r3, #15
 8001a0c:	60fb      	str	r3, [r7, #12]
	switch (ButtonMatrixState) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	f000 808d 	beq.w	8001b32 <Button+0x132>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	f300 808b 	bgt.w	8001b38 <Button+0x138>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	f000 8080 	beq.w	8001b2c <Button+0x12c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a32:	f300 8081 	bgt.w	8001b38 <Button+0x138>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d073      	beq.n	8001b26 <Button+0x126>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a44:	dc78      	bgt.n	8001b38 <Button+0x138>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d069      	beq.n	8001b20 <Button+0x120>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	dc72      	bgt.n	8001b38 <Button+0x138>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	dc49      	bgt.n	8001aec <Button+0xec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd6c      	ble.n	8001b38 <Button+0x138>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	2b1f      	cmp	r3, #31
 8001a64:	d868      	bhi.n	8001b38 <Button+0x138>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <Button+0x6c>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001af5 	.word	0x08001af5
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001b39 	.word	0x08001b39
 8001a78:	08001b01 	.word	0x08001b01
 8001a7c:	08001b39 	.word	0x08001b39
 8001a80:	08001b39 	.word	0x08001b39
 8001a84:	08001b39 	.word	0x08001b39
 8001a88:	08001b07 	.word	0x08001b07
 8001a8c:	08001b39 	.word	0x08001b39
 8001a90:	08001b39 	.word	0x08001b39
 8001a94:	08001b39 	.word	0x08001b39
 8001a98:	08001b39 	.word	0x08001b39
 8001a9c:	08001b39 	.word	0x08001b39
 8001aa0:	08001b39 	.word	0x08001b39
 8001aa4:	08001b39 	.word	0x08001b39
 8001aa8:	08001b0f 	.word	0x08001b0f
 8001aac:	08001b39 	.word	0x08001b39
 8001ab0:	08001b39 	.word	0x08001b39
 8001ab4:	08001b39 	.word	0x08001b39
 8001ab8:	08001b39 	.word	0x08001b39
 8001abc:	08001b39 	.word	0x08001b39
 8001ac0:	08001b39 	.word	0x08001b39
 8001ac4:	08001b39 	.word	0x08001b39
 8001ac8:	08001b39 	.word	0x08001b39
 8001acc:	08001b39 	.word	0x08001b39
 8001ad0:	08001b39 	.word	0x08001b39
 8001ad4:	08001b39 	.word	0x08001b39
 8001ad8:	08001b39 	.word	0x08001b39
 8001adc:	08001b39 	.word	0x08001b39
 8001ae0:	08001b39 	.word	0x08001b39
 8001ae4:	08001b39 	.word	0x08001b39
 8001ae8:	08001b15 	.word	0x08001b15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d013      	beq.n	8001b1a <Button+0x11a>
		break;
	case 0b10000000000:
		pass = 9;
		break;
	default:
		break;
 8001af2:	e021      	b.n	8001b38 <Button+0x138>
		pass = 1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
		break;
 8001af8:	e01f      	b.n	8001b3a <Button+0x13a>
		pass = 4;
 8001afa:	2304      	movs	r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
		break;
 8001afe:	e01c      	b.n	8001b3a <Button+0x13a>
		pass = 7;
 8001b00:	2307      	movs	r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
		break;
 8001b04:	e019      	b.n	8001b3a <Button+0x13a>
		pass = -6;
 8001b06:	f06f 0305 	mvn.w	r3, #5
 8001b0a:	60fb      	str	r3, [r7, #12]
		break;
 8001b0c:	e015      	b.n	8001b3a <Button+0x13a>
		pass = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
		break;
 8001b12:	e012      	b.n	8001b3a <Button+0x13a>
		pass = 5;
 8001b14:	2305      	movs	r3, #5
 8001b16:	60fb      	str	r3, [r7, #12]
		break;
 8001b18:	e00f      	b.n	8001b3a <Button+0x13a>
		pass = 8;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	60fb      	str	r3, [r7, #12]
		break;
 8001b1e:	e00c      	b.n	8001b3a <Button+0x13a>
		pass = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
		break;
 8001b24:	e009      	b.n	8001b3a <Button+0x13a>
		pass = 3;
 8001b26:	2303      	movs	r3, #3
 8001b28:	60fb      	str	r3, [r7, #12]
		break;
 8001b2a:	e006      	b.n	8001b3a <Button+0x13a>
		pass = 6;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	60fb      	str	r3, [r7, #12]
		break;
 8001b30:	e003      	b.n	8001b3a <Button+0x13a>
		pass = 9;
 8001b32:	2309      	movs	r3, #9
 8001b34:	60fb      	str	r3, [r7, #12]
		break;
 8001b36:	e000      	b.n	8001b3a <Button+0x13a>
		break;
 8001b38:	bf00      	nop
	}
	return pass;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <Write_MFRC522>:

void Write_MFRC522(char addr, char val) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
	char addr_bits = (((addr<<1) & 0x7E));
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <Write_MFRC522+0x5c>)
 8001b6e:	f003 fc49 	bl	8005404 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001b72:	f107 010f 	add.w	r1, r7, #15
 8001b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <Write_MFRC522+0x60>)
 8001b7e:	f006 fa5b 	bl	8008038 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001b82:	1db9      	adds	r1, r7, #6
 8001b84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <Write_MFRC522+0x60>)
 8001b8c:	f006 fa54 	bl	8008038 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <Write_MFRC522+0x5c>)
 8001b98:	f003 fc34 	bl	8005404 <HAL_GPIO_WritePin>
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58020400 	.word	0x58020400
 8001ba8:	2400018c 	.word	0x2400018c

08001bac <Read_MFRC522>:
char Read_MFRC522(char addr) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  char rx_bits;
  char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd2:	480f      	ldr	r0, [pc, #60]	; (8001c10 <Read_MFRC522+0x64>)
 8001bd4:	f003 fc16 	bl	8005404 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001bd8:	f107 010e 	add.w	r1, r7, #14
 8001bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001be0:	2201      	movs	r2, #1
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <Read_MFRC522+0x68>)
 8001be4:	f006 fa28 	bl	8008038 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001be8:	f107 010f 	add.w	r1, r7, #15
 8001bec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <Read_MFRC522+0x68>)
 8001bf4:	f006 fc12 	bl	800841c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfe:	4804      	ldr	r0, [pc, #16]	; (8001c10 <Read_MFRC522+0x64>)
 8001c00:	f003 fc00 	bl	8005404 <HAL_GPIO_WritePin>
  return (char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	58020400 	.word	0x58020400
 8001c14:	2400018c 	.word	0x2400018c

08001c18 <MFRC522_ToCard>:
char MFRC522_ToCard(char command, char *sendData, char sendLen, char *backData, int *backLen)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	4613      	mov	r3, r2
 8001c28:	73bb      	strb	r3, [r7, #14]
  char status = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	77fb      	strb	r3, [r7, #31]
  char irqEn = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	77bb      	strb	r3, [r7, #30]
  char waitIRq = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	777b      	strb	r3, [r7, #29]
  char lastBits;
  char n;
  int i;

  switch (command)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d006      	beq.n	8001c4a <MFRC522_ToCard+0x32>
 8001c3c:	2b0e      	cmp	r3, #14
 8001c3e:	d109      	bne.n	8001c54 <MFRC522_ToCard+0x3c>
  {
    case 0x0E:     // Certification cards close
      {
        irqEn = 0x12;
 8001c40:	2312      	movs	r3, #18
 8001c42:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8001c44:	2310      	movs	r3, #16
 8001c46:	777b      	strb	r3, [r7, #29]
        break;
 8001c48:	e005      	b.n	8001c56 <MFRC522_ToCard+0x3e>
      }
    case 0x0C:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001c4a:	2377      	movs	r3, #119	; 0x77
 8001c4c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	777b      	strb	r3, [r7, #29]
        break;
 8001c52:	e000      	b.n	8001c56 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8001c54:	bf00      	nop
  }

  Write_MFRC522(0x02, irqEn|0x80);  // Interrupt request
 8001c56:	7fbb      	ldrb	r3, [r7, #30]
 8001c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2002      	movs	r0, #2
 8001c62:	f7ff ff71 	bl	8001b48 <Write_MFRC522>
  ClearBitMask(0x04, 0x80);         // Clear all interrupt request bit
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f000 f8c1 	bl	8001df0 <ClearBitMask>
  SetBitMask(0x0A, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	200a      	movs	r0, #10
 8001c72:	f000 f8dd 	bl	8001e30 <SetBitMask>

  Write_MFRC522(0x01, 0x00);    // NO action; Cancel the current command
 8001c76:	2100      	movs	r1, #0
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ff65 	bl	8001b48 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	e00a      	b.n	8001c9a <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(0x09, sendData[i]);
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2009      	movs	r0, #9
 8001c90:	f7ff ff5a 	bl	8001b48 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(0x01, command);
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff ff4e 	bl	8001b48 <Write_MFRC522>
  if (command == 0x0C)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d103      	bne.n	8001cba <MFRC522_ToCard+0xa2>
  {
    SetBitMask(0x0D, 0x80);      // StartSend=1,transmission of data starts
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	200d      	movs	r0, #13
 8001cb6:	f000 f8bb 	bl	8001e30 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001cba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cbe:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(0x04);
 8001cc0:	2004      	movs	r0, #4
 8001cc2:	f7ff ff73 	bl	8001bac <Read_MFRC522>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	773b      	strb	r3, [r7, #28]
    i--;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <MFRC522_ToCard+0xd4>
 8001cd6:	7f3b      	ldrb	r3, [r7, #28]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <MFRC522_ToCard+0xd4>
 8001ce0:	7f3a      	ldrb	r2, [r7, #28]
 8001ce2:	7f7b      	ldrb	r3, [r7, #29]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0e9      	beq.n	8001cc0 <MFRC522_ToCard+0xa8>

  ClearBitMask(0x0D, 0x80);      // StartSend=0
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	200d      	movs	r0, #13
 8001cf0:	f000 f87e 	bl	8001df0 <ClearBitMask>

  if (i != 0)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d050      	beq.n	8001d9c <MFRC522_ToCard+0x184>
  {
    if(!(Read_MFRC522(0x06) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	f7ff ff56 	bl	8001bac <Read_MFRC522>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 031b 	and.w	r3, r3, #27
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d146      	bne.n	8001d98 <MFRC522_ToCard+0x180>
    {
      status = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8001d0e:	7f3a      	ldrb	r2, [r7, #28]
 8001d10:	7fbb      	ldrb	r3, [r7, #30]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MFRC522_ToCard+0x10a>
      {
        status = 1;             // ??
 8001d1e:	2301      	movs	r3, #1
 8001d20:	77fb      	strb	r3, [r7, #31]
      }

      if (command == 0x0C)
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d139      	bne.n	8001d9c <MFRC522_ToCard+0x184>
      {
        n = Read_MFRC522(0x0A);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f7ff ff3f 	bl	8001bac <Read_MFRC522>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(0x0C) & 0x07;
 8001d32:	200c      	movs	r0, #12
 8001d34:	f7ff ff3a 	bl	8001bac <Read_MFRC522>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <MFRC522_ToCard+0x13e>
        {
          *backLen = (n-1)*8 + lastBits;
 8001d46:	7f3b      	ldrb	r3, [r7, #28]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	00da      	lsls	r2, r3, #3
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	441a      	add	r2, r3
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e003      	b.n	8001d5e <MFRC522_ToCard+0x146>
        }
        else
        {
          *backLen = n*8;
 8001d56:	7f3b      	ldrb	r3, [r7, #28]
 8001d58:	00da      	lsls	r2, r3, #3
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001d5e:	7f3b      	ldrb	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <MFRC522_ToCard+0x150>
        {
          n = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	773b      	strb	r3, [r7, #28]
        }
        if (n > 16)
 8001d68:	7f3b      	ldrb	r3, [r7, #28]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d901      	bls.n	8001d72 <MFRC522_ToCard+0x15a>
        {
          n = 16;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e00a      	b.n	8001d8e <MFRC522_ToCard+0x176>
        {
          backData[i] = Read_MFRC522(0x09);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	18d4      	adds	r4, r2, r3
 8001d7e:	2009      	movs	r0, #9
 8001d80:	f7ff ff14 	bl	8001bac <Read_MFRC522>
 8001d84:	4603      	mov	r3, r0
 8001d86:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	7f3b      	ldrb	r3, [r7, #28]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dbf0      	blt.n	8001d78 <MFRC522_ToCard+0x160>
 8001d96:	e001      	b.n	8001d9c <MFRC522_ToCard+0x184>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = 2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}

08001da6 <MFRC522_Request>:
char MFRC522_Request(char reqMode, char *TagType)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af02      	add	r7, sp, #8
 8001dac:	4603      	mov	r3, r0
 8001dae:	6039      	str	r1, [r7, #0]
 8001db0:	71fb      	strb	r3, [r7, #7]
  char status;
  int backBits; // The received data bits

  Write_MFRC522(0x0D, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001db2:	2107      	movs	r1, #7
 8001db4:	200d      	movs	r0, #13
 8001db6:	f7ff fec7 	bl	8001b48 <Write_MFRC522>

  TagType[0] = reqMode;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(0x0C, TagType, 1, TagType, &backBits);
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	200c      	movs	r0, #12
 8001dce:	f7ff ff23 	bl	8001c18 <MFRC522_ToCard>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  if ((status != 0) || (backBits != 0x10)) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <MFRC522_Request+0x3c>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d001      	beq.n	8001de6 <MFRC522_Request+0x40>
    status = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <ClearBitMask>:
void ClearBitMask(char reg, char mask)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	460a      	mov	r2, r1
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71bb      	strb	r3, [r7, #6]
    char tmp;
    tmp = Read_MFRC522(reg);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fed2 	bl	8001bac <Read_MFRC522>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001e0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	b25a      	sxtb	r2, r3
 8001e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe90 	bl	8001b48 <Write_MFRC522>
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <SetBitMask>:
void SetBitMask(char reg, char mask)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
    char tmp;
    tmp = Read_MFRC522(reg);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff feb2 	bl	8001bac <Read_MFRC522>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe75 	bl	8001b48 <Write_MFRC522>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6a:	b672      	cpsid	i
}
 8001e6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e6e:	e7fe      	b.n	8001e6e <Error_Handler+0x8>

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_MspInit+0x30>)
 8001e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x30>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x30>)
 8001e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a59      	ldr	r2, [pc, #356]	; (8002028 <HAL_ETH_MspInit+0x184>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	f040 80ab 	bne.w	800201e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ec8:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ece:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ed8:	4b54      	ldr	r3, [pc, #336]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001eda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001ee6:	4b51      	ldr	r3, [pc, #324]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eec:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ef6:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001f04:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f0a:	4a48      	ldr	r2, [pc, #288]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f14:	4b45      	ldr	r3, [pc, #276]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	4a40      	ldr	r2, [pc, #256]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	4a39      	ldr	r2, [pc, #228]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_ETH_MspInit+0x188>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f9a:	2332      	movs	r3, #50	; 0x32
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001faa:	230b      	movs	r3, #11
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481e      	ldr	r0, [pc, #120]	; (8002030 <HAL_ETH_MspInit+0x18c>)
 8001fb6:	f003 f85d 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001fba:	2386      	movs	r3, #134	; 0x86
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fca:	230b      	movs	r3, #11
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4817      	ldr	r0, [pc, #92]	; (8002034 <HAL_ETH_MspInit+0x190>)
 8001fd6:	f003 f84d 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fec:	230b      	movs	r3, #11
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <HAL_ETH_MspInit+0x194>)
 8001ff8:	f003 f83c 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ffc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800200e:	230b      	movs	r3, #11
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	4619      	mov	r1, r3
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <HAL_ETH_MspInit+0x198>)
 800201a:	f003 f82b 	bl	8005074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3738      	adds	r7, #56	; 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40028000 	.word	0x40028000
 800202c:	58024400 	.word	0x58024400
 8002030:	58020800 	.word	0x58020800
 8002034:	58020000 	.word	0x58020000
 8002038:	58020400 	.word	0x58020400
 800203c:	58021800 	.word	0x58021800

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0bc      	sub	sp, #240	; 0xf0
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	22bc      	movs	r2, #188	; 0xbc
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f008 fd55 	bl	800ab10 <memset>
  if(hspi->Instance==SPI1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4abb      	ldr	r2, [pc, #748]	; (8002358 <HAL_SPI_MspInit+0x318>)
 800206c:	4293      	cmp	r3, r2
 800206e:	f040 809d 	bne.w	80021ac <HAL_SPI_MspInit+0x16c>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002078:	2300      	movs	r3, #0
 800207a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fb71 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800208c:	f7ff feeb 	bl	8001e66 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002090:	4bb2      	ldr	r3, [pc, #712]	; (800235c <HAL_SPI_MspInit+0x31c>)
 8002092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002096:	4ab1      	ldr	r2, [pc, #708]	; (800235c <HAL_SPI_MspInit+0x31c>)
 8002098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020a0:	4bae      	ldr	r3, [pc, #696]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4aa9      	ldr	r2, [pc, #676]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4ba7      	ldr	r3, [pc, #668]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4ba3      	ldr	r3, [pc, #652]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d2:	4aa2      	ldr	r2, [pc, #648]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020dc:	4b9f      	ldr	r3, [pc, #636]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ea:	2320      	movs	r3, #32
 80020ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002102:	2305      	movs	r3, #5
 8002104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800210c:	4619      	mov	r1, r3
 800210e:	4894      	ldr	r0, [pc, #592]	; (8002360 <HAL_SPI_MspInit+0x320>)
 8002110:	f002 ffb0 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002114:	2320      	movs	r3, #32
 8002116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212c:	2305      	movs	r3, #5
 800212e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002136:	4619      	mov	r1, r3
 8002138:	488a      	ldr	r0, [pc, #552]	; (8002364 <HAL_SPI_MspInit+0x324>)
 800213a:	f002 ff9b 	bl	8005074 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800213e:	4b8a      	ldr	r3, [pc, #552]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002140:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_SPI_MspInit+0x32c>)
 8002142:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002144:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002146:	2226      	movs	r2, #38	; 0x26
 8002148:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800214a:	4b87      	ldr	r3, [pc, #540]	; (8002368 <HAL_SPI_MspInit+0x328>)
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002156:	4b84      	ldr	r3, [pc, #528]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002164:	4b80      	ldr	r3, [pc, #512]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_SPI_MspInit+0x328>)
 800216c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002170:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002172:	4b7d      	ldr	r3, [pc, #500]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_SPI_MspInit+0x328>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800217e:	487a      	ldr	r0, [pc, #488]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002180:	f000 fc5c 	bl	8002a3c <HAL_DMA_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800218a:	f7ff fe6c 	bl	8001e66 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002192:	679a      	str	r2, [r3, #120]	; 0x78
 8002194:	4a74      	ldr	r2, [pc, #464]	; (8002368 <HAL_SPI_MspInit+0x328>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2023      	movs	r0, #35	; 0x23
 80021a0:	f000 fc17 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021a4:	2023      	movs	r0, #35	; 0x23
 80021a6:	f000 fc2e 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021aa:	e0d0      	b.n	800234e <HAL_SPI_MspInit+0x30e>
  else if(hspi->Instance==SPI2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6f      	ldr	r2, [pc, #444]	; (8002370 <HAL_SPI_MspInit+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	f040 80cb 	bne.w	800234e <HAL_SPI_MspInit+0x30e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021be:	2300      	movs	r3, #0
 80021c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 face 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_SPI_MspInit+0x196>
      Error_Handler();
 80021d2:	f7ff fe48 	bl	8001e66 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021d6:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80021d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021dc:	4a5f      	ldr	r2, [pc, #380]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_SPI_MspInit+0x31c>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_SPI_MspInit+0x31c>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_SPI_MspInit+0x31c>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_SPI_MspInit+0x31c>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_SPI_MspInit+0x31c>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002230:	230c      	movs	r3, #12
 8002232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002248:	2305      	movs	r3, #5
 800224a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002252:	4619      	mov	r1, r3
 8002254:	4847      	ldr	r0, [pc, #284]	; (8002374 <HAL_SPI_MspInit+0x334>)
 8002256:	f002 ff0d 	bl	8005074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800225a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002274:	2305      	movs	r3, #5
 8002276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800227e:	4619      	mov	r1, r3
 8002280:	4838      	ldr	r0, [pc, #224]	; (8002364 <HAL_SPI_MspInit+0x324>)
 8002282:	f002 fef7 	bl	8005074 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8002286:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <HAL_SPI_MspInit+0x338>)
 8002288:	4a3c      	ldr	r2, [pc, #240]	; (800237c <HAL_SPI_MspInit+0x33c>)
 800228a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_SPI_MspInit+0x338>)
 800228e:	2228      	movs	r2, #40	; 0x28
 8002290:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_SPI_MspInit+0x338>)
 8002294:	2240      	movs	r2, #64	; 0x40
 8002296:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_SPI_MspInit+0x338>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80022c6:	482c      	ldr	r0, [pc, #176]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022c8:	f000 fbb8 	bl	8002a3c <HAL_DMA_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 80022d2:	f7ff fdc8 	bl	8001e66 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022da:	679a      	str	r2, [r3, #120]	; 0x78
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_SPI_MspInit+0x338>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_SPI_MspInit+0x340>)
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_SPI_MspInit+0x344>)
 80022e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_SPI_MspInit+0x340>)
 80022ea:	2227      	movs	r2, #39	; 0x27
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_SPI_MspInit+0x340>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_SPI_MspInit+0x340>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_SPI_MspInit+0x340>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_SPI_MspInit+0x340>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_SPI_MspInit+0x340>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_SPI_MspInit+0x340>)
 8002310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002314:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_SPI_MspInit+0x340>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_SPI_MspInit+0x340>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002322:	4817      	ldr	r0, [pc, #92]	; (8002380 <HAL_SPI_MspInit+0x340>)
 8002324:	f000 fb8a 	bl	8002a3c <HAL_DMA_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_SPI_MspInit+0x2f2>
      Error_Handler();
 800232e:	f7ff fd9a 	bl	8001e66 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_SPI_MspInit+0x340>)
 8002336:	67da      	str	r2, [r3, #124]	; 0x7c
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_SPI_MspInit+0x340>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2024      	movs	r0, #36	; 0x24
 8002344:	f000 fb45 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002348:	2024      	movs	r0, #36	; 0x24
 800234a:	f000 fb5c 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	37f0      	adds	r7, #240	; 0xf0
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40013000 	.word	0x40013000
 800235c:	58024400 	.word	0x58024400
 8002360:	58020000 	.word	0x58020000
 8002364:	58020400 	.word	0x58020400
 8002368:	240008fc 	.word	0x240008fc
 800236c:	40020010 	.word	0x40020010
 8002370:	40003800 	.word	0x40003800
 8002374:	58020800 	.word	0x58020800
 8002378:	240007c8 	.word	0x240007c8
 800237c:	40020028 	.word	0x40020028
 8002380:	240006ac 	.word	0x240006ac
 8002384:	40020040 	.word	0x40020040

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0b8      	sub	sp, #224	; 0xe0
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	22bc      	movs	r2, #188	; 0xbc
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 fbb1 	bl	800ab10 <memset>
  if(huart->Instance==USART3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_UART_MspInit+0xc0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d142      	bne.n	800243e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b8:	2302      	movs	r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 f9ce 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023d2:	f7ff fd48 	bl	8001e66 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_UART_MspInit+0xc4>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_UART_MspInit+0xc4>)
 80023de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0xc4>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0xc4>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_UART_MspInit+0xc4>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0xc4>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0xc8>)
 800243a:	f002 fe1b 	bl	8005074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	37e0      	adds	r7, #224	; 0xe0
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004800 	.word	0x40004800
 800244c:	58024400 	.word	0x58024400
 8002450:	58020c00 	.word	0x58020c00

08002454 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b8      	sub	sp, #224	; 0xe0
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	22bc      	movs	r2, #188	; 0xbc
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f008 fb4b 	bl	800ab10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_PCD_MspInit+0x104>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d165      	bne.n	8002550 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002488:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800248e:	2318      	movs	r3, #24
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002492:	2302      	movs	r3, #2
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002496:	2304      	movs	r3, #4
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800249a:	2302      	movs	r3, #2
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800249e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80024a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f957 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80024c0:	f7ff fcd1 	bl	8001e66 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024c4:	f003 f988 	bl	80057d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_PCD_MspInit+0x108>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	4a23      	ldr	r2, [pc, #140]	; (800255c <HAL_PCD_MspInit+0x108>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_PCD_MspInit+0x108>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024fe:	4619      	mov	r1, r3
 8002500:	4817      	ldr	r0, [pc, #92]	; (8002560 <HAL_PCD_MspInit+0x10c>)
 8002502:	f002 fdb7 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002506:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800250a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002520:	230a      	movs	r3, #10
 8002522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <HAL_PCD_MspInit+0x10c>)
 800252e:	f002 fda1 	bl	8005074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_PCD_MspInit+0x108>)
 8002534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_PCD_MspInit+0x108>)
 800253a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800253e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_PCD_MspInit+0x108>)
 8002544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002550:	bf00      	nop
 8002552:	37e0      	adds	r7, #224	; 0xe0
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40080000 	.word	0x40080000
 800255c:	58024400 	.word	0x58024400
 8002560:	58020000 	.word	0x58020000

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <NMI_Handler+0x4>

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b0:	f000 f8d0 	bl	8002754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <DMA1_Stream0_IRQHandler+0x10>)
 80025be:	f000 ffdd 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	240008fc 	.word	0x240008fc

080025cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Stream1_IRQHandler+0x10>)
 80025d2:	f000 ffd3 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	240007c8 	.word	0x240007c8

080025e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Stream2_IRQHandler+0x10>)
 80025e6:	f000 ffc9 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	240006ac 	.word	0x240006ac

080025f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <SPI1_IRQHandler+0x10>)
 80025fa:	f006 fbed 	bl	8008dd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2400073c 	.word	0x2400073c

08002608 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <SPI2_IRQHandler+0x10>)
 800260e:	f006 fbe3 	bl	8008dd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2400018c 	.word	0x2400018c

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002620:	f7fd ffd6 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002624:	480c      	ldr	r0, [pc, #48]	; (8002658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002626:	490d      	ldr	r1, [pc, #52]	; (800265c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800263c:	4c0a      	ldr	r4, [pc, #40]	; (8002668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264a:	f008 fa3d 	bl	800aac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7fe fb87 	bl	8000d60 <main>
  bx  lr
 8002652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002654:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002658:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800265c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002660:	0800bf48 	.word	0x0800bf48
  ldr r2, =_sbss
 8002664:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002668:	240009b8 	.word	0x240009b8

0800266c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC3_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002676:	2003      	movs	r0, #3
 8002678:	f000 f9a0 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800267c:	f003 fe9e 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_Init+0x68>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	4913      	ldr	r1, [pc, #76]	; (80026dc <HAL_Init+0x6c>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_Init+0x68>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_Init+0x6c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_Init+0x70>)
 80026b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <HAL_Init+0x74>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f814 	bl	80026e8 <HAL_InitTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e002      	b.n	80026d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ca:	f7ff fbd1 	bl	8001e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58024400 	.word	0x58024400
 80026dc:	0800ab38 	.word	0x0800ab38
 80026e0:	24000004 	.word	0x24000004
 80026e4:	24000000 	.word	0x24000000

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_InitTick+0x60>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e021      	b.n	8002740 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_InitTick+0x64>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_InitTick+0x60>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f985 	bl	8002a22 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f000 f94f 	bl	80029d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <HAL_InitTick+0x68>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2400005c 	.word	0x2400005c
 800274c:	24000000 	.word	0x24000000
 8002750:	24000058 	.word	0x24000058

08002754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_IncTick+0x20>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_IncTick+0x24>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2400005c 	.word	0x2400005c
 8002778:	240009b4 	.word	0x240009b4

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	240009b4 	.word	0x240009b4

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffde 	bl	800277c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2400005c 	.word	0x2400005c

080027dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_GetREVID+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0c1b      	lsrs	r3, r3, #16
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	5c001000 	.word	0x5c001000

080027f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	58000400 	.word	0x58000400

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	05fa0000 	.word	0x05fa0000

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff29 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff40 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff90 	bl	8002910 <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5f 	bl	80028bc <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff33 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa4 	bl	8002978 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fe9a 	bl	800277c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e316      	b.n	8003082 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a66      	ldr	r2, [pc, #408]	; (8002bf4 <HAL_DMA_Init+0x1b8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <HAL_DMA_Init+0x1bc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_DMA_Init+0x1c0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a62      	ldr	r2, [pc, #392]	; (8002c00 <HAL_DMA_Init+0x1c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a60      	ldr	r2, [pc, #384]	; (8002c04 <HAL_DMA_Init+0x1c8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5f      	ldr	r2, [pc, #380]	; (8002c08 <HAL_DMA_Init+0x1cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5d      	ldr	r2, [pc, #372]	; (8002c0c <HAL_DMA_Init+0x1d0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5c      	ldr	r2, [pc, #368]	; (8002c10 <HAL_DMA_Init+0x1d4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_DMA_Init+0x1d8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a59      	ldr	r2, [pc, #356]	; (8002c18 <HAL_DMA_Init+0x1dc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a57      	ldr	r2, [pc, #348]	; (8002c1c <HAL_DMA_Init+0x1e0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a56      	ldr	r2, [pc, #344]	; (8002c20 <HAL_DMA_Init+0x1e4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_DMA_Init+0x1e8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_DMA_Init+0x1ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_DMA_Init+0x1f0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a50      	ldr	r2, [pc, #320]	; (8002c30 <HAL_DMA_Init+0x1f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Init+0xbc>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_DMA_Init+0xbe>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 813b 	beq.w	8002d76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <HAL_DMA_Init+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <HAL_DMA_Init+0x1bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_DMA_Init+0x1c0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <HAL_DMA_Init+0x1c4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_DMA_Init+0x1c8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_DMA_Init+0x1cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2e      	ldr	r2, [pc, #184]	; (8002c0c <HAL_DMA_Init+0x1d0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_DMA_Init+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_DMA_Init+0x1d8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_DMA_Init+0x1dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_DMA_Init+0x1e0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <HAL_DMA_Init+0x1e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <HAL_DMA_Init+0x1e8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <HAL_DMA_Init+0x1ec>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_DMA_Init+0x1f0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_DMA_Init+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <HAL_DMA_Init+0x186>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_DMA_Init+0x196>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bd2:	e02f      	b.n	8002c34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd4:	f7ff fdd2 	bl	800277c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d928      	bls.n	8002c34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e246      	b.n	8003082 <HAL_DMA_Init+0x646>
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1c8      	bne.n	8002bd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <HAL_DMA_Init+0x420>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c98:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <HAL_DMA_Init+0x424>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b71      	ldr	r3, [pc, #452]	; (8002e64 <HAL_DMA_Init+0x428>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d328      	bcc.n	8002cf8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b28      	cmp	r3, #40	; 0x28
 8002cac:	d903      	bls.n	8002cb6 <HAL_DMA_Init+0x27a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb4:	d917      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b3e      	cmp	r3, #62	; 0x3e
 8002cbc:	d903      	bls.n	8002cc6 <HAL_DMA_Init+0x28a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b42      	cmp	r3, #66	; 0x42
 8002cc4:	d90f      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b46      	cmp	r3, #70	; 0x46
 8002ccc:	d903      	bls.n	8002cd6 <HAL_DMA_Init+0x29a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b48      	cmp	r3, #72	; 0x48
 8002cd4:	d907      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b4e      	cmp	r3, #78	; 0x4e
 8002cdc:	d905      	bls.n	8002cea <HAL_DMA_Init+0x2ae>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b52      	cmp	r3, #82	; 0x52
 8002ce4:	d801      	bhi.n	8002cea <HAL_DMA_Init+0x2ae>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_Init+0x2b0>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d117      	bne.n	8002d52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fbfd 	bl	8004534 <DMA_CheckFifoParam>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2240      	movs	r2, #64	; 0x40
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e197      	b.n	8003082 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f001 fb38 	bl	80043d0 <DMA_CalcBaseAndBitshift>
 8002d60:	4603      	mov	r3, r0
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	223f      	movs	r2, #63	; 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e0cd      	b.n	8002f12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <HAL_DMA_Init+0x42c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_DMA_Init+0x430>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <HAL_DMA_Init+0x434>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <HAL_DMA_Init+0x438>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <HAL_DMA_Init+0x43c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <HAL_DMA_Init+0x440>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_DMA_Init+0x444>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_DMA_Init+0x448>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Init+0x38e>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_Init+0x390>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_DMA_Init+0x42c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d021      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_DMA_Init+0x430>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01c      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <HAL_DMA_Init+0x434>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d017      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_DMA_Init+0x438>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d012      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_DMA_Init+0x43c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_DMA_Init+0x440>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d008      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_DMA_Init+0x444>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_DMA_Init+0x448>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_DMA_Init+0x44c>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d020      	beq.n	8002e8c <HAL_DMA_Init+0x450>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d102      	bne.n	8002e58 <HAL_DMA_Init+0x41c>
 8002e52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e56:	e01a      	b.n	8002e8e <HAL_DMA_Init+0x452>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e018      	b.n	8002e8e <HAL_DMA_Init+0x452>
 8002e5c:	fe10803f 	.word	0xfe10803f
 8002e60:	5c001000 	.word	0x5c001000
 8002e64:	ffff0000 	.word	0xffff0000
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494
 8002e88:	fffe000f 	.word	0xfffe000f
 8002e8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68d2      	ldr	r2, [r2, #12]
 8002e92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ebc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b6e      	ldr	r3, [pc, #440]	; (800308c <HAL_DMA_Init+0x650>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	; (8003090 <HAL_DMA_Init+0x654>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f001 fa73 	bl	80043d0 <DMA_CalcBaseAndBitshift>
 8002eea:	4603      	mov	r3, r0
 8002eec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e008      	b.n	8002f12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0b7      	b.n	8003082 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5f      	ldr	r2, [pc, #380]	; (8003094 <HAL_DMA_Init+0x658>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d072      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5d      	ldr	r2, [pc, #372]	; (8003098 <HAL_DMA_Init+0x65c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d06d      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a5c      	ldr	r2, [pc, #368]	; (800309c <HAL_DMA_Init+0x660>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d068      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_DMA_Init+0x664>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d063      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <HAL_DMA_Init+0x668>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a57      	ldr	r2, [pc, #348]	; (80030a8 <HAL_DMA_Init+0x66c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d059      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_DMA_Init+0x670>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d054      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a54      	ldr	r2, [pc, #336]	; (80030b0 <HAL_DMA_Init+0x674>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04f      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a53      	ldr	r2, [pc, #332]	; (80030b4 <HAL_DMA_Init+0x678>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_DMA_Init+0x67c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_DMA_Init+0x680>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4e      	ldr	r2, [pc, #312]	; (80030c0 <HAL_DMA_Init+0x684>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4d      	ldr	r2, [pc, #308]	; (80030c4 <HAL_DMA_Init+0x688>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <HAL_DMA_Init+0x68c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <HAL_DMA_Init+0x690>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <HAL_DMA_Init+0x694>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <HAL_DMA_Init+0x698>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <HAL_DMA_Init+0x69c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a44      	ldr	r2, [pc, #272]	; (80030dc <HAL_DMA_Init+0x6a0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_DMA_Init+0x6a4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a41      	ldr	r2, [pc, #260]	; (80030e4 <HAL_DMA_Init+0x6a8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <HAL_DMA_Init+0x6ac>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <HAL_DMA_Init+0x6b0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_DMA_Init+0x6b4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Init+0x5ca>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_DMA_Init+0x5cc>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d032      	beq.n	8003072 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 fb0d 	bl	800462c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d102      	bne.n	8003020 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003034:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_DMA_Init+0x624>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d80c      	bhi.n	8003060 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fb8a 	bl	8004760 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	e008      	b.n	8003072 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	a7fdabf8 	.word	0xa7fdabf8
 8003090:	cccccccd 	.word	0xcccccccd
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
 80030d4:	58025408 	.word	0x58025408
 80030d8:	5802541c 	.word	0x5802541c
 80030dc:	58025430 	.word	0x58025430
 80030e0:	58025444 	.word	0x58025444
 80030e4:	58025458 	.word	0x58025458
 80030e8:	5802546c 	.word	0x5802546c
 80030ec:	58025480 	.word	0x58025480
 80030f0:	58025494 	.word	0x58025494

080030f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e205      	b.n	8003512 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d004      	beq.n	800311c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e1fa      	b.n	8003512 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a8c      	ldr	r2, [pc, #560]	; (8003354 <HAL_DMA_Abort_IT+0x260>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d04a      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a8b      	ldr	r2, [pc, #556]	; (8003358 <HAL_DMA_Abort_IT+0x264>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d045      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a89      	ldr	r2, [pc, #548]	; (800335c <HAL_DMA_Abort_IT+0x268>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d040      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a88      	ldr	r2, [pc, #544]	; (8003360 <HAL_DMA_Abort_IT+0x26c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d03b      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a86      	ldr	r2, [pc, #536]	; (8003364 <HAL_DMA_Abort_IT+0x270>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d036      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a85      	ldr	r2, [pc, #532]	; (8003368 <HAL_DMA_Abort_IT+0x274>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d031      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a83      	ldr	r2, [pc, #524]	; (800336c <HAL_DMA_Abort_IT+0x278>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d02c      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a82      	ldr	r2, [pc, #520]	; (8003370 <HAL_DMA_Abort_IT+0x27c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d027      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_DMA_Abort_IT+0x280>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d022      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_DMA_Abort_IT+0x284>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d01d      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_DMA_Abort_IT+0x288>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d018      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_DMA_Abort_IT+0x28c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d013      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7a      	ldr	r2, [pc, #488]	; (8003384 <HAL_DMA_Abort_IT+0x290>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a79      	ldr	r2, [pc, #484]	; (8003388 <HAL_DMA_Abort_IT+0x294>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a77      	ldr	r2, [pc, #476]	; (800338c <HAL_DMA_Abort_IT+0x298>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a76      	ldr	r2, [pc, #472]	; (8003390 <HAL_DMA_Abort_IT+0x29c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA_Abort_IT+0xcc>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_DMA_Abort_IT+0xce>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d065      	beq.n	8003292 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_DMA_Abort_IT+0x260>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04a      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <HAL_DMA_Abort_IT+0x264>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d045      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_DMA_Abort_IT+0x268>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d040      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5b      	ldr	r2, [pc, #364]	; (8003360 <HAL_DMA_Abort_IT+0x26c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d03b      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5a      	ldr	r2, [pc, #360]	; (8003364 <HAL_DMA_Abort_IT+0x270>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d036      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_DMA_Abort_IT+0x274>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a57      	ldr	r2, [pc, #348]	; (800336c <HAL_DMA_Abort_IT+0x278>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d02c      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a55      	ldr	r2, [pc, #340]	; (8003370 <HAL_DMA_Abort_IT+0x27c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a54      	ldr	r2, [pc, #336]	; (8003374 <HAL_DMA_Abort_IT+0x280>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <HAL_DMA_Abort_IT+0x284>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01d      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a51      	ldr	r2, [pc, #324]	; (800337c <HAL_DMA_Abort_IT+0x288>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_DMA_Abort_IT+0x28c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <HAL_DMA_Abort_IT+0x290>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4c      	ldr	r2, [pc, #304]	; (8003388 <HAL_DMA_Abort_IT+0x294>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a4b      	ldr	r2, [pc, #300]	; (800338c <HAL_DMA_Abort_IT+0x298>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_DMA_Abort_IT+0x17a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a49      	ldr	r2, [pc, #292]	; (8003390 <HAL_DMA_Abort_IT+0x29c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <HAL_DMA_Abort_IT+0x18c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e147      	b.n	8003510 <HAL_DMA_Abort_IT+0x41c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e13e      	b.n	8003510 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 020e 	bic.w	r2, r2, #14
 80032a0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_DMA_Abort_IT+0x260>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d04a      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_DMA_Abort_IT+0x264>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d045      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_DMA_Abort_IT+0x268>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d040      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_DMA_Abort_IT+0x26c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d03b      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_DMA_Abort_IT+0x270>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d036      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_DMA_Abort_IT+0x274>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_DMA_Abort_IT+0x278>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d02c      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_DMA_Abort_IT+0x27c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d027      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_DMA_Abort_IT+0x280>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_DMA_Abort_IT+0x284>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01d      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_DMA_Abort_IT+0x288>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_DMA_Abort_IT+0x28c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_DMA_Abort_IT+0x290>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_DMA_Abort_IT+0x294>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_DMA_Abort_IT+0x298>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_DMA_Abort_IT+0x29c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d128      	bne.n	8003394 <HAL_DMA_Abort_IT+0x2a0>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e027      	b.n	80033a4 <HAL_DMA_Abort_IT+0x2b0>
 8003354:	40020010 	.word	0x40020010
 8003358:	40020028 	.word	0x40020028
 800335c:	40020040 	.word	0x40020040
 8003360:	40020058 	.word	0x40020058
 8003364:	40020070 	.word	0x40020070
 8003368:	40020088 	.word	0x40020088
 800336c:	400200a0 	.word	0x400200a0
 8003370:	400200b8 	.word	0x400200b8
 8003374:	40020410 	.word	0x40020410
 8003378:	40020428 	.word	0x40020428
 800337c:	40020440 	.word	0x40020440
 8003380:	40020458 	.word	0x40020458
 8003384:	40020470 	.word	0x40020470
 8003388:	40020488 	.word	0x40020488
 800338c:	400204a0 	.word	0x400204a0
 8003390:	400204b8 	.word	0x400204b8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_DMA_Abort_IT+0x428>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d072      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_DMA_Abort_IT+0x42c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d06d      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_DMA_Abort_IT+0x430>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d068      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_DMA_Abort_IT+0x434>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d063      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a56      	ldr	r2, [pc, #344]	; (800352c <HAL_DMA_Abort_IT+0x438>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d05e      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a55      	ldr	r2, [pc, #340]	; (8003530 <HAL_DMA_Abort_IT+0x43c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d059      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_DMA_Abort_IT+0x440>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d054      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_DMA_Abort_IT+0x444>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04f      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a50      	ldr	r2, [pc, #320]	; (800353c <HAL_DMA_Abort_IT+0x448>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d04a      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <HAL_DMA_Abort_IT+0x44c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d045      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4d      	ldr	r2, [pc, #308]	; (8003544 <HAL_DMA_Abort_IT+0x450>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d040      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a4c      	ldr	r2, [pc, #304]	; (8003548 <HAL_DMA_Abort_IT+0x454>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d03b      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a4a      	ldr	r2, [pc, #296]	; (800354c <HAL_DMA_Abort_IT+0x458>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d036      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a49      	ldr	r2, [pc, #292]	; (8003550 <HAL_DMA_Abort_IT+0x45c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d031      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a47      	ldr	r2, [pc, #284]	; (8003554 <HAL_DMA_Abort_IT+0x460>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02c      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a46      	ldr	r2, [pc, #280]	; (8003558 <HAL_DMA_Abort_IT+0x464>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d027      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_DMA_Abort_IT+0x468>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_DMA_Abort_IT+0x46c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d01d      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a41      	ldr	r2, [pc, #260]	; (8003564 <HAL_DMA_Abort_IT+0x470>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <HAL_DMA_Abort_IT+0x474>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_DMA_Abort_IT+0x478>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <HAL_DMA_Abort_IT+0x47c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <HAL_DMA_Abort_IT+0x480>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_DMA_Abort_IT+0x3a0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_DMA_Abort_IT+0x484>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Abort_IT+0x3a4>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_DMA_Abort_IT+0x3a6>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d028      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	58025408 	.word	0x58025408
 8003560:	5802541c 	.word	0x5802541c
 8003564:	58025430 	.word	0x58025430
 8003568:	58025444 	.word	0x58025444
 800356c:	58025458 	.word	0x58025458
 8003570:	5802546c 	.word	0x5802546c
 8003574:	58025480 	.word	0x58025480
 8003578:	58025494 	.word	0x58025494

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003588:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_DMA_IRQHandler+0x1ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a67      	ldr	r2, [pc, #412]	; (800372c <HAL_DMA_IRQHandler+0x1b0>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5f      	ldr	r2, [pc, #380]	; (8003730 <HAL_DMA_IRQHandler+0x1b4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_DMA_IRQHandler+0x1b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <HAL_DMA_IRQHandler+0x1bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5a      	ldr	r2, [pc, #360]	; (800373c <HAL_DMA_IRQHandler+0x1c0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_DMA_IRQHandler+0x1c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMA_IRQHandler+0x1c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_DMA_IRQHandler+0x1cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_DMA_IRQHandler+0x1d0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_DMA_IRQHandler+0x1d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_DMA_IRQHandler+0x1d8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_DMA_IRQHandler+0x1dc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4e      	ldr	r2, [pc, #312]	; (800375c <HAL_DMA_IRQHandler+0x1e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4d      	ldr	r2, [pc, #308]	; (8003760 <HAL_DMA_IRQHandler+0x1e4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_DMA_IRQHandler+0x1e8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_DMA_IRQHandler+0x1ec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_IRQHandler+0xd2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a48      	ldr	r2, [pc, #288]	; (800376c <HAL_DMA_IRQHandler+0x1f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_DMA_IRQHandler+0xd6>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_DMA_IRQHandler+0xd8>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 842b 	beq.w	8003eb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2208      	movs	r2, #8
 8003664:	409a      	lsls	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a2 	beq.w	80037b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_DMA_IRQHandler+0x1b4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_DMA_IRQHandler+0x1b8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d045      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_DMA_IRQHandler+0x1bc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_DMA_IRQHandler+0x1c0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_DMA_IRQHandler+0x1c4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d036      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_DMA_IRQHandler+0x1c8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d031      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_DMA_IRQHandler+0x1cc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_DMA_IRQHandler+0x1d0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d027      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_DMA_IRQHandler+0x1d4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_DMA_IRQHandler+0x1d8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_DMA_IRQHandler+0x1dc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_DMA_IRQHandler+0x1e0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_DMA_IRQHandler+0x1e4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_DMA_IRQHandler+0x1e8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_DMA_IRQHandler+0x1ec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x194>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_DMA_IRQHandler+0x1f0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d12f      	bne.n	8003770 <HAL_DMA_IRQHandler+0x1f4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e02e      	b.n	8003784 <HAL_DMA_IRQHandler+0x208>
 8003726:	bf00      	nop
 8003728:	24000000 	.word	0x24000000
 800372c:	1b4e81b5 	.word	0x1b4e81b5
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2208      	movs	r2, #8
 80037a2:	409a      	lsls	r2, r3
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d06e      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a69      	ldr	r2, [pc, #420]	; (8003974 <HAL_DMA_IRQHandler+0x3f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04a      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a67      	ldr	r2, [pc, #412]	; (8003978 <HAL_DMA_IRQHandler+0x3fc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a66      	ldr	r2, [pc, #408]	; (800397c <HAL_DMA_IRQHandler+0x400>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d040      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a64      	ldr	r2, [pc, #400]	; (8003980 <HAL_DMA_IRQHandler+0x404>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d03b      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_DMA_IRQHandler+0x408>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d036      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a61      	ldr	r2, [pc, #388]	; (8003988 <HAL_DMA_IRQHandler+0x40c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d031      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a60      	ldr	r2, [pc, #384]	; (800398c <HAL_DMA_IRQHandler+0x410>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d02c      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5e      	ldr	r2, [pc, #376]	; (8003990 <HAL_DMA_IRQHandler+0x414>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d027      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_DMA_IRQHandler+0x418>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5b      	ldr	r2, [pc, #364]	; (8003998 <HAL_DMA_IRQHandler+0x41c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5a      	ldr	r2, [pc, #360]	; (800399c <HAL_DMA_IRQHandler+0x420>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_DMA_IRQHandler+0x424>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_DMA_IRQHandler+0x428>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a55      	ldr	r2, [pc, #340]	; (80039a8 <HAL_DMA_IRQHandler+0x42c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a54      	ldr	r2, [pc, #336]	; (80039ac <HAL_DMA_IRQHandler+0x430>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DMA_IRQHandler+0x2ee>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <HAL_DMA_IRQHandler+0x434>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10a      	bne.n	8003880 <HAL_DMA_IRQHandler+0x304>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e003      	b.n	8003888 <HAL_DMA_IRQHandler+0x30c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0202 	orr.w	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2204      	movs	r2, #4
 80038b2:	409a      	lsls	r2, r3
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 808f 	beq.w	80039dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <HAL_DMA_IRQHandler+0x3f8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d04a      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <HAL_DMA_IRQHandler+0x3fc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d045      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a29      	ldr	r2, [pc, #164]	; (800397c <HAL_DMA_IRQHandler+0x400>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d040      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <HAL_DMA_IRQHandler+0x404>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d03b      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <HAL_DMA_IRQHandler+0x408>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d036      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a24      	ldr	r2, [pc, #144]	; (8003988 <HAL_DMA_IRQHandler+0x40c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d031      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a23      	ldr	r2, [pc, #140]	; (800398c <HAL_DMA_IRQHandler+0x410>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d02c      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_DMA_IRQHandler+0x414>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d027      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_DMA_IRQHandler+0x418>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d022      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <HAL_DMA_IRQHandler+0x41c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01d      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_DMA_IRQHandler+0x420>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d018      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_DMA_IRQHandler+0x424>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_DMA_IRQHandler+0x428>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_DMA_IRQHandler+0x42c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_DMA_IRQHandler+0x430>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_DMA_IRQHandler+0x3e2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_DMA_IRQHandler+0x434>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d12a      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x438>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e023      	b.n	80039bc <HAL_DMA_IRQHandler+0x440>
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2204      	movs	r2, #4
 80039ca:	409a      	lsls	r2, r3
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2210      	movs	r2, #16
 80039e6:	409a      	lsls	r2, r3
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a6 	beq.w	8003b3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a85      	ldr	r2, [pc, #532]	; (8003c0c <HAL_DMA_IRQHandler+0x690>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a83      	ldr	r2, [pc, #524]	; (8003c10 <HAL_DMA_IRQHandler+0x694>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a82      	ldr	r2, [pc, #520]	; (8003c14 <HAL_DMA_IRQHandler+0x698>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a80      	ldr	r2, [pc, #512]	; (8003c18 <HAL_DMA_IRQHandler+0x69c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7f      	ldr	r2, [pc, #508]	; (8003c1c <HAL_DMA_IRQHandler+0x6a0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a7d      	ldr	r2, [pc, #500]	; (8003c20 <HAL_DMA_IRQHandler+0x6a4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <HAL_DMA_IRQHandler+0x6a8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_DMA_IRQHandler+0x6ac>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a79      	ldr	r2, [pc, #484]	; (8003c2c <HAL_DMA_IRQHandler+0x6b0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a77      	ldr	r2, [pc, #476]	; (8003c30 <HAL_DMA_IRQHandler+0x6b4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a76      	ldr	r2, [pc, #472]	; (8003c34 <HAL_DMA_IRQHandler+0x6b8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a74      	ldr	r2, [pc, #464]	; (8003c38 <HAL_DMA_IRQHandler+0x6bc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a73      	ldr	r2, [pc, #460]	; (8003c3c <HAL_DMA_IRQHandler+0x6c0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a71      	ldr	r2, [pc, #452]	; (8003c40 <HAL_DMA_IRQHandler+0x6c4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <HAL_DMA_IRQHandler+0x6c8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x516>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <HAL_DMA_IRQHandler+0x6cc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10a      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x52c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e009      	b.n	8003abc <HAL_DMA_IRQHandler+0x540>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03e      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2210      	movs	r2, #16
 8003aca:	409a      	lsls	r2, r3
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d108      	bne.n	8003afe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d024      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4798      	blx	r3
 8003afc:	e01f      	b.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01b      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
 8003b0e:	e016      	b.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0208 	bic.w	r2, r2, #8
 8003b2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2220      	movs	r2, #32
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8110 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <HAL_DMA_IRQHandler+0x690>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_DMA_IRQHandler+0x694>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_DMA_IRQHandler+0x698>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <HAL_DMA_IRQHandler+0x69c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_DMA_IRQHandler+0x6a0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <HAL_DMA_IRQHandler+0x6a4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_DMA_IRQHandler+0x6a8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <HAL_DMA_IRQHandler+0x6ac>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_DMA_IRQHandler+0x6b0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <HAL_DMA_IRQHandler+0x6b4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_DMA_IRQHandler+0x6b8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <HAL_DMA_IRQHandler+0x6bc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <HAL_DMA_IRQHandler+0x6c0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_DMA_IRQHandler+0x6c4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_DMA_IRQHandler+0x6c8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x678>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <HAL_DMA_IRQHandler+0x6cc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d12b      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x6d0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e02a      	b.n	8003c60 <HAL_DMA_IRQHandler+0x6e4>
 8003c0a:	bf00      	nop
 8003c0c:	40020010 	.word	0x40020010
 8003c10:	40020028 	.word	0x40020028
 8003c14:	40020040 	.word	0x40020040
 8003c18:	40020058 	.word	0x40020058
 8003c1c:	40020070 	.word	0x40020070
 8003c20:	40020088 	.word	0x40020088
 8003c24:	400200a0 	.word	0x400200a0
 8003c28:	400200b8 	.word	0x400200b8
 8003c2c:	40020410 	.word	0x40020410
 8003c30:	40020428 	.word	0x40020428
 8003c34:	40020440 	.word	0x40020440
 8003c38:	40020458 	.word	0x40020458
 8003c3c:	40020470 	.word	0x40020470
 8003c40:	40020488 	.word	0x40020488
 8003c44:	400204a0 	.word	0x400204a0
 8003c48:	400204b8 	.word	0x400204b8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8087 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2220      	movs	r2, #32
 8003c70:	409a      	lsls	r2, r3
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d139      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0216 	bic.w	r2, r2, #22
 8003c90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0x736>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0208 	bic.w	r2, r2, #8
 8003cc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 834a 	beq.w	8004380 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
          }
          return;
 8003cf4:	e344      	b.n	8004380 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02c      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
 8003d22:	e027      	b.n	8003d74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e01e      	b.n	8003d74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0210 	bic.w	r2, r2, #16
 8003d52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8306 	beq.w	800438a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8088 	beq.w	8003e9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a7a      	ldr	r2, [pc, #488]	; (8003f84 <HAL_DMA_IRQHandler+0xa08>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04a      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a79      	ldr	r2, [pc, #484]	; (8003f88 <HAL_DMA_IRQHandler+0xa0c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d045      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a77      	ldr	r2, [pc, #476]	; (8003f8c <HAL_DMA_IRQHandler+0xa10>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d040      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a76      	ldr	r2, [pc, #472]	; (8003f90 <HAL_DMA_IRQHandler+0xa14>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d03b      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a74      	ldr	r2, [pc, #464]	; (8003f94 <HAL_DMA_IRQHandler+0xa18>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a73      	ldr	r2, [pc, #460]	; (8003f98 <HAL_DMA_IRQHandler+0xa1c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a71      	ldr	r2, [pc, #452]	; (8003f9c <HAL_DMA_IRQHandler+0xa20>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a70      	ldr	r2, [pc, #448]	; (8003fa0 <HAL_DMA_IRQHandler+0xa24>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d027      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_DMA_IRQHandler+0xa28>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6d      	ldr	r2, [pc, #436]	; (8003fa8 <HAL_DMA_IRQHandler+0xa2c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6b      	ldr	r2, [pc, #428]	; (8003fac <HAL_DMA_IRQHandler+0xa30>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6a      	ldr	r2, [pc, #424]	; (8003fb0 <HAL_DMA_IRQHandler+0xa34>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a68      	ldr	r2, [pc, #416]	; (8003fb4 <HAL_DMA_IRQHandler+0xa38>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a67      	ldr	r2, [pc, #412]	; (8003fb8 <HAL_DMA_IRQHandler+0xa3c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_DMA_IRQHandler+0xa40>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x8b8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a64      	ldr	r2, [pc, #400]	; (8003fc0 <HAL_DMA_IRQHandler+0xa44>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <HAL_DMA_IRQHandler+0x8ca>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e007      	b.n	8003e56 <HAL_DMA_IRQHandler+0x8da>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d307      	bcc.n	8003e72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f2      	bne.n	8003e56 <HAL_DMA_IRQHandler+0x8da>
 8003e70:	e000      	b.n	8003e74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e8a:	e003      	b.n	8003e94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8272 	beq.w	800438a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
 8003eae:	e26c      	b.n	800438a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a43      	ldr	r2, [pc, #268]	; (8003fc4 <HAL_DMA_IRQHandler+0xa48>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a42      	ldr	r2, [pc, #264]	; (8003fc8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a40      	ldr	r2, [pc, #256]	; (8003fcc <HAL_DMA_IRQHandler+0xa50>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <HAL_DMA_IRQHandler+0xa54>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <HAL_DMA_IRQHandler+0xa58>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_DMA_IRQHandler+0xa5c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3a      	ldr	r2, [pc, #232]	; (8003fdc <HAL_DMA_IRQHandler+0xa60>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x984>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <HAL_DMA_IRQHandler+0xa64>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x988>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_DMA_IRQHandler+0x98a>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 823f 	beq.w	800438a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80cd 	beq.w	80040c4 <HAL_DMA_IRQHandler+0xb48>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80c7 	beq.w	80040c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2204      	movs	r2, #4
 8003f40:	409a      	lsls	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d049      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8210 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6c:	e20a      	b.n	8004384 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8206 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f80:	e200      	b.n	8004384 <HAL_DMA_IRQHandler+0xe08>
 8003f82:	bf00      	nop
 8003f84:	40020010 	.word	0x40020010
 8003f88:	40020028 	.word	0x40020028
 8003f8c:	40020040 	.word	0x40020040
 8003f90:	40020058 	.word	0x40020058
 8003f94:	40020070 	.word	0x40020070
 8003f98:	40020088 	.word	0x40020088
 8003f9c:	400200a0 	.word	0x400200a0
 8003fa0:	400200b8 	.word	0x400200b8
 8003fa4:	40020410 	.word	0x40020410
 8003fa8:	40020428 	.word	0x40020428
 8003fac:	40020440 	.word	0x40020440
 8003fb0:	40020458 	.word	0x40020458
 8003fb4:	40020470 	.word	0x40020470
 8003fb8:	40020488 	.word	0x40020488
 8003fbc:	400204a0 	.word	0x400204a0
 8003fc0:	400204b8 	.word	0x400204b8
 8003fc4:	58025408 	.word	0x58025408
 8003fc8:	5802541c 	.word	0x5802541c
 8003fcc:	58025430 	.word	0x58025430
 8003fd0:	58025444 	.word	0x58025444
 8003fd4:	58025458 	.word	0x58025458
 8003fd8:	5802546c 	.word	0x5802546c
 8003fdc:	58025480 	.word	0x58025480
 8003fe0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d160      	bne.n	80040b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a8c      	ldr	r2, [pc, #560]	; (8004224 <HAL_DMA_IRQHandler+0xca8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04a      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a8a      	ldr	r2, [pc, #552]	; (8004228 <HAL_DMA_IRQHandler+0xcac>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d045      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a89      	ldr	r2, [pc, #548]	; (800422c <HAL_DMA_IRQHandler+0xcb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a87      	ldr	r2, [pc, #540]	; (8004230 <HAL_DMA_IRQHandler+0xcb4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d03b      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a86      	ldr	r2, [pc, #536]	; (8004234 <HAL_DMA_IRQHandler+0xcb8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d036      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a84      	ldr	r2, [pc, #528]	; (8004238 <HAL_DMA_IRQHandler+0xcbc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a83      	ldr	r2, [pc, #524]	; (800423c <HAL_DMA_IRQHandler+0xcc0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d02c      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a81      	ldr	r2, [pc, #516]	; (8004240 <HAL_DMA_IRQHandler+0xcc4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a80      	ldr	r2, [pc, #512]	; (8004244 <HAL_DMA_IRQHandler+0xcc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7e      	ldr	r2, [pc, #504]	; (8004248 <HAL_DMA_IRQHandler+0xccc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7d      	ldr	r2, [pc, #500]	; (800424c <HAL_DMA_IRQHandler+0xcd0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a7b      	ldr	r2, [pc, #492]	; (8004250 <HAL_DMA_IRQHandler+0xcd4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7a      	ldr	r2, [pc, #488]	; (8004254 <HAL_DMA_IRQHandler+0xcd8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a78      	ldr	r2, [pc, #480]	; (8004258 <HAL_DMA_IRQHandler+0xcdc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a77      	ldr	r2, [pc, #476]	; (800425c <HAL_DMA_IRQHandler+0xce0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_DMA_IRQHandler+0xb12>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a75      	ldr	r2, [pc, #468]	; (8004260 <HAL_DMA_IRQHandler+0xce4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <HAL_DMA_IRQHandler+0xb24>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0208 	bic.w	r2, r2, #8
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e007      	b.n	80040b0 <HAL_DMA_IRQHandler+0xb34>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0204 	bic.w	r2, r2, #4
 80040ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8165 	beq.w	8004384 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c2:	e15f      	b.n	8004384 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2202      	movs	r2, #2
 80040ce:	409a      	lsls	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80c5 	beq.w	8004264 <HAL_DMA_IRQHandler+0xce8>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80bf 	beq.w	8004264 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2202      	movs	r2, #2
 80040f0:	409a      	lsls	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 813a 	beq.w	8004388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411c:	e134      	b.n	8004388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8130 	beq.w	8004388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004130:	e12a      	b.n	8004388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d168      	bne.n	800420e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a38      	ldr	r2, [pc, #224]	; (8004224 <HAL_DMA_IRQHandler+0xca8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04a      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_DMA_IRQHandler+0xcac>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d045      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a35      	ldr	r2, [pc, #212]	; (800422c <HAL_DMA_IRQHandler+0xcb0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d040      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a34      	ldr	r2, [pc, #208]	; (8004230 <HAL_DMA_IRQHandler+0xcb4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d03b      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a32      	ldr	r2, [pc, #200]	; (8004234 <HAL_DMA_IRQHandler+0xcb8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d036      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a31      	ldr	r2, [pc, #196]	; (8004238 <HAL_DMA_IRQHandler+0xcbc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d031      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2f      	ldr	r2, [pc, #188]	; (800423c <HAL_DMA_IRQHandler+0xcc0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02c      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <HAL_DMA_IRQHandler+0xcc4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d027      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <HAL_DMA_IRQHandler+0xcc8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_DMA_IRQHandler+0xccc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01d      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_DMA_IRQHandler+0xcd0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a28      	ldr	r2, [pc, #160]	; (8004250 <HAL_DMA_IRQHandler+0xcd4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a26      	ldr	r2, [pc, #152]	; (8004254 <HAL_DMA_IRQHandler+0xcd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_DMA_IRQHandler+0xcdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_DMA_IRQHandler+0xce0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc60>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_DMA_IRQHandler+0xce4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_DMA_IRQHandler+0xc72>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0214 	bic.w	r2, r2, #20
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e007      	b.n	80041fe <HAL_DMA_IRQHandler+0xc82>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 020a 	bic.w	r2, r2, #10
 80041fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80b8 	beq.w	8004388 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004220:	e0b2      	b.n	8004388 <HAL_DMA_IRQHandler+0xe0c>
 8004222:	bf00      	nop
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2208      	movs	r2, #8
 800426e:	409a      	lsls	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8088 	beq.w	800438a <HAL_DMA_IRQHandler+0xe0e>
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8082 	beq.w	800438a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a41      	ldr	r2, [pc, #260]	; (8004390 <HAL_DMA_IRQHandler+0xe14>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_DMA_IRQHandler+0xe18>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3e      	ldr	r2, [pc, #248]	; (8004398 <HAL_DMA_IRQHandler+0xe1c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3c      	ldr	r2, [pc, #240]	; (800439c <HAL_DMA_IRQHandler+0xe20>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <HAL_DMA_IRQHandler+0xe24>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a39      	ldr	r2, [pc, #228]	; (80043a4 <HAL_DMA_IRQHandler+0xe28>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a38      	ldr	r2, [pc, #224]	; (80043a8 <HAL_DMA_IRQHandler+0xe2c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a36      	ldr	r2, [pc, #216]	; (80043ac <HAL_DMA_IRQHandler+0xe30>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a35      	ldr	r2, [pc, #212]	; (80043b0 <HAL_DMA_IRQHandler+0xe34>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a33      	ldr	r2, [pc, #204]	; (80043b4 <HAL_DMA_IRQHandler+0xe38>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a32      	ldr	r2, [pc, #200]	; (80043b8 <HAL_DMA_IRQHandler+0xe3c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a30      	ldr	r2, [pc, #192]	; (80043bc <HAL_DMA_IRQHandler+0xe40>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2f      	ldr	r2, [pc, #188]	; (80043c0 <HAL_DMA_IRQHandler+0xe44>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a2d      	ldr	r2, [pc, #180]	; (80043c4 <HAL_DMA_IRQHandler+0xe48>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <HAL_DMA_IRQHandler+0xe4c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_DMA_IRQHandler+0xdaa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <HAL_DMA_IRQHandler+0xe50>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <HAL_DMA_IRQHandler+0xdbc>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 021c 	bic.w	r2, r2, #28
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e007      	b.n	8004348 <HAL_DMA_IRQHandler+0xdcc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 020e 	bic.w	r2, r2, #14
 8004346:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
 800437e:	e004      	b.n	800438a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004380:	bf00      	nop
 8004382:	e002      	b.n	800438a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004384:	bf00      	nop
 8004386:	e000      	b.n	800438a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004388:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40020010 	.word	0x40020010
 8004394:	40020028 	.word	0x40020028
 8004398:	40020040 	.word	0x40020040
 800439c:	40020058 	.word	0x40020058
 80043a0:	40020070 	.word	0x40020070
 80043a4:	40020088 	.word	0x40020088
 80043a8:	400200a0 	.word	0x400200a0
 80043ac:	400200b8 	.word	0x400200b8
 80043b0:	40020410 	.word	0x40020410
 80043b4:	40020428 	.word	0x40020428
 80043b8:	40020440 	.word	0x40020440
 80043bc:	40020458 	.word	0x40020458
 80043c0:	40020470 	.word	0x40020470
 80043c4:	40020488 	.word	0x40020488
 80043c8:	400204a0 	.word	0x400204a0
 80043cc:	400204b8 	.word	0x400204b8

080043d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a42      	ldr	r2, [pc, #264]	; (80044e8 <DMA_CalcBaseAndBitshift+0x118>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04a      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a41      	ldr	r2, [pc, #260]	; (80044ec <DMA_CalcBaseAndBitshift+0x11c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d045      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3f      	ldr	r2, [pc, #252]	; (80044f0 <DMA_CalcBaseAndBitshift+0x120>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d040      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3e      	ldr	r2, [pc, #248]	; (80044f4 <DMA_CalcBaseAndBitshift+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d03b      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <DMA_CalcBaseAndBitshift+0x128>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d036      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <DMA_CalcBaseAndBitshift+0x12c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a39      	ldr	r2, [pc, #228]	; (8004500 <DMA_CalcBaseAndBitshift+0x130>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a38      	ldr	r2, [pc, #224]	; (8004504 <DMA_CalcBaseAndBitshift+0x134>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a36      	ldr	r2, [pc, #216]	; (8004508 <DMA_CalcBaseAndBitshift+0x138>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a35      	ldr	r2, [pc, #212]	; (800450c <DMA_CalcBaseAndBitshift+0x13c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a33      	ldr	r2, [pc, #204]	; (8004510 <DMA_CalcBaseAndBitshift+0x140>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a32      	ldr	r2, [pc, #200]	; (8004514 <DMA_CalcBaseAndBitshift+0x144>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a30      	ldr	r2, [pc, #192]	; (8004518 <DMA_CalcBaseAndBitshift+0x148>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <DMA_CalcBaseAndBitshift+0x14c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2d      	ldr	r2, [pc, #180]	; (8004520 <DMA_CalcBaseAndBitshift+0x150>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <DMA_CalcBaseAndBitshift+0xa8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <DMA_CalcBaseAndBitshift+0x154>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <DMA_CalcBaseAndBitshift+0xac>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <DMA_CalcBaseAndBitshift+0xae>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d024      	beq.n	80044cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b10      	subs	r3, #16
 800448a:	4a27      	ldr	r2, [pc, #156]	; (8004528 <DMA_CalcBaseAndBitshift+0x158>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	4a24      	ldr	r2, [pc, #144]	; (800452c <DMA_CalcBaseAndBitshift+0x15c>)
 800449c:	5cd3      	ldrb	r3, [r2, r3]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d908      	bls.n	80044bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <DMA_CalcBaseAndBitshift+0x160>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58
 80044ba:	e00d      	b.n	80044d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <DMA_CalcBaseAndBitshift+0x160>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6593      	str	r3, [r2, #88]	; 0x58
 80044ca:	e005      	b.n	80044d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	aaaaaaab 	.word	0xaaaaaaab
 800452c:	0800bf08 	.word	0x0800bf08
 8004530:	fffffc00 	.word	0xfffffc00

08004534 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d120      	bne.n	800458a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	2b03      	cmp	r3, #3
 800454e:	d858      	bhi.n	8004602 <DMA_CheckFifoParam+0xce>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <DMA_CheckFifoParam+0x24>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	0800457b 	.word	0x0800457b
 8004560:	08004569 	.word	0x08004569
 8004564:	08004603 	.word	0x08004603
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d048      	beq.n	8004606 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004578:	e045      	b.n	8004606 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004582:	d142      	bne.n	800460a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004588:	e03f      	b.n	800460a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	d123      	bne.n	80045dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b03      	cmp	r3, #3
 800459a:	d838      	bhi.n	800460e <DMA_CheckFifoParam+0xda>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <DMA_CheckFifoParam+0x70>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045bb 	.word	0x080045bb
 80045ac:	080045b5 	.word	0x080045b5
 80045b0:	080045cd 	.word	0x080045cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
        break;
 80045b8:	e030      	b.n	800461c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d025      	beq.n	8004612 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045ca:	e022      	b.n	8004612 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d4:	d11f      	bne.n	8004616 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045da:	e01c      	b.n	8004616 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d902      	bls.n	80045ea <DMA_CheckFifoParam+0xb6>
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d003      	beq.n	80045f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045e8:	e018      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
        break;
 80045ee:	e015      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00e      	beq.n	800461a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004600:	e00b      	b.n	800461a <DMA_CheckFifoParam+0xe6>
        break;
 8004602:	bf00      	nop
 8004604:	e00a      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        break;
 8004606:	bf00      	nop
 8004608:	e008      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        break;
 800460a:	bf00      	nop
 800460c:	e006      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <DMA_CheckFifoParam+0xe8>
        break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <DMA_CheckFifoParam+0xe8>
    break;
 800461a:	bf00      	nop
    }
  }

  return status;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop

0800462c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a38      	ldr	r2, [pc, #224]	; (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a36      	ldr	r2, [pc, #216]	; (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01d      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a35      	ldr	r2, [pc, #212]	; (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a30      	ldr	r2, [pc, #192]	; (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01a      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	3b08      	subs	r3, #8
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4b26      	ldr	r3, [pc, #152]	; (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a24      	ldr	r2, [pc, #144]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046c8:	e024      	b.n	8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3b10      	subs	r3, #16
 80046d2:	4a1e      	ldr	r2, [pc, #120]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d806      	bhi.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d902      	bls.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3308      	adds	r3, #8
 80046f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004704:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	58025408 	.word	0x58025408
 8004724:	5802541c 	.word	0x5802541c
 8004728:	58025430 	.word	0x58025430
 800472c:	58025444 	.word	0x58025444
 8004730:	58025458 	.word	0x58025458
 8004734:	5802546c 	.word	0x5802546c
 8004738:	58025480 	.word	0x58025480
 800473c:	58025494 	.word	0x58025494
 8004740:	cccccccd 	.word	0xcccccccd
 8004744:	16009600 	.word	0x16009600
 8004748:	58025880 	.word	0x58025880
 800474c:	aaaaaaab 	.word	0xaaaaaaab
 8004750:	400204b8 	.word	0x400204b8
 8004754:	4002040f 	.word	0x4002040f
 8004758:	10008200 	.word	0x10008200
 800475c:	40020880 	.word	0x40020880

08004760 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04a      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d847      	bhi.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4b17      	ldr	r3, [pc, #92]	; (8004838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a15      	ldr	r2, [pc, #84]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047e8:	671a      	str	r2, [r3, #112]	; 0x70
 80047ea:	e009      	b.n	8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3b01      	subs	r3, #1
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	58025408 	.word	0x58025408
 800481c:	5802541c 	.word	0x5802541c
 8004820:	58025430 	.word	0x58025430
 8004824:	58025444 	.word	0x58025444
 8004828:	58025458 	.word	0x58025458
 800482c:	5802546c 	.word	0x5802546c
 8004830:	58025480 	.word	0x58025480
 8004834:	58025494 	.word	0x58025494
 8004838:	1600963f 	.word	0x1600963f
 800483c:	58025940 	.word	0x58025940
 8004840:	1000823f 	.word	0x1000823f
 8004844:	40020940 	.word	0x40020940

08004848 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0c6      	b.n	80049e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fb1e 	bl	8001ea4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2223      	movs	r2, #35	; 0x23
 800486c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	4b60      	ldr	r3, [pc, #384]	; (80049f0 <HAL_ETH_Init+0x1a8>)
 8004870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004874:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <HAL_ETH_Init+0x1a8>)
 8004876:	f043 0302 	orr.w	r3, r3, #2
 800487a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800487e:	4b5c      	ldr	r3, [pc, #368]	; (80049f0 <HAL_ETH_Init+0x1a8>)
 8004880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004894:	2000      	movs	r0, #0
 8004896:	f7fd ffad 	bl	80027f4 <HAL_SYSCFG_ETHInterfaceSelect>
 800489a:	e003      	b.n	80048a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800489c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80048a0:	f7fd ffa8 	bl	80027f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048bc:	f7fd ff5e 	bl	800277c <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80048c2:	e00f      	b.n	80048e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80048c4:	f7fd ff5a 	bl	800277c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048d2:	d907      	bls.n	80048e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	22e0      	movs	r2, #224	; 0xe0
 80048de:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e081      	b.n	80049e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e6      	bne.n	80048c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fac0 	bl	8004e7c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80048fc:	f001 fed8 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 8004900:	4603      	mov	r3, r0
 8004902:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <HAL_ETH_Init+0x1ac>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0c9a      	lsrs	r2, r3, #18
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3a01      	subs	r2, #1
 8004910:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa13 	bl	8004d40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004930:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004934:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	22e0      	movs	r2, #224	; 0xe0
 800494c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e04a      	b.n	80049e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f241 1308 	movw	r3, #4360	; 0x1108
 800495a:	4413      	add	r3, r2
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_ETH_Init+0x1b0>)
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6952      	ldr	r2, [r2, #20]
 8004966:	0052      	lsls	r2, r2, #1
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	6809      	ldr	r1, [r1, #0]
 800496c:	431a      	orrs	r2, r3
 800496e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004972:	440b      	add	r3, r1
 8004974:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fad8 	bl	8004f2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb1c 	bl	8004fba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	3305      	adds	r3, #5
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	021a      	lsls	r2, r3, #8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	3303      	adds	r3, #3
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	061a      	lsls	r2, r3, #24
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	3302      	adds	r3, #2
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3301      	adds	r3, #1
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80049ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80049d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2210      	movs	r2, #16
 80049de:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2210      	movs	r2, #16
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	58024400 	.word	0x58024400
 80049f4:	431bde83 	.word	0x431bde83
 80049f8:	ffff8001 	.word	0xffff8001

080049fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004a0e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	791b      	ldrb	r3, [r3, #4]
 8004a14:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004a16:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	7b1b      	ldrb	r3, [r3, #12]
 8004a1c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a1e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	7b5b      	ldrb	r3, [r3, #13]
 8004a24:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a26:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	7b9b      	ldrb	r3, [r3, #14]
 8004a2c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	7bdb      	ldrb	r3, [r3, #15]
 8004a34:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a36:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	7c12      	ldrb	r2, [r2, #16]
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	d102      	bne.n	8004a46 <ETH_SetMACConfig+0x4a>
 8004a40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a44:	e000      	b.n	8004a48 <ETH_SetMACConfig+0x4c>
 8004a46:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a48:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	7c52      	ldrb	r2, [r2, #17]
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d102      	bne.n	8004a58 <ETH_SetMACConfig+0x5c>
 8004a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a56:	e000      	b.n	8004a5a <ETH_SetMACConfig+0x5e>
 8004a58:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a5a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	7c9b      	ldrb	r3, [r3, #18]
 8004a60:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a62:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a68:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004a6e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	7f1b      	ldrb	r3, [r3, #28]
 8004a74:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004a76:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	7f5b      	ldrb	r3, [r3, #29]
 8004a7c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004a7e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	7f92      	ldrb	r2, [r2, #30]
 8004a84:	2a00      	cmp	r2, #0
 8004a86:	d102      	bne.n	8004a8e <ETH_SetMACConfig+0x92>
 8004a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a8c:	e000      	b.n	8004a90 <ETH_SetMACConfig+0x94>
 8004a8e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004a90:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	7fdb      	ldrb	r3, [r3, #31]
 8004a96:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004a98:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	d102      	bne.n	8004aaa <ETH_SetMACConfig+0xae>
 8004aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa8:	e000      	b.n	8004aac <ETH_SetMACConfig+0xb0>
 8004aaa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004aac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ab2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004abc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b56      	ldr	r3, [pc, #344]	; (8004c28 <ETH_SetMACConfig+0x22c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ae6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ae8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004af0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004af2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004afa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004afc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d102      	bne.n	8004b0e <ETH_SetMACConfig+0x112>
 8004b08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b0c:	e000      	b.n	8004b10 <ETH_SetMACConfig+0x114>
 8004b0e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b10:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <ETH_SetMACConfig+0x230>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <ETH_SetMACConfig+0x234>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b5e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b66:	2a00      	cmp	r2, #0
 8004b68:	d101      	bne.n	8004b6e <ETH_SetMACConfig+0x172>
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	e000      	b.n	8004b70 <ETH_SetMACConfig+0x174>
 8004b6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b70:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004b98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ba0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f023 0103 	bic.w	r1, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004bc6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	d101      	bne.n	8004bea <ETH_SetMACConfig+0x1ee>
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	e000      	b.n	8004bec <ETH_SetMACConfig+0x1f0>
 8004bea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004bec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004bf4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004bf6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004bfe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00048083 	.word	0x00048083
 8004c2c:	c0f88000 	.word	0xc0f88000
 8004c30:	fffffef0 	.word	0xfffffef0

08004c34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <ETH_SetDMAConfig+0xf8>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	6809      	ldr	r1, [r1, #0]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004c5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	791b      	ldrb	r3, [r3, #4]
 8004c60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c66:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	7b1b      	ldrb	r3, [r3, #12]
 8004c6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f241 0304 	movw	r3, #4100	; 0x1004
 8004c7a:	4413      	add	r3, r2
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <ETH_SetDMAConfig+0xfc>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	f241 0304 	movw	r3, #4100	; 0x1004
 8004c8e:	440b      	add	r3, r1
 8004c90:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	7b5b      	ldrb	r3, [r3, #13]
 8004c96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <ETH_SetDMAConfig+0x100>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6811      	ldr	r1, [r2, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004cba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	7d1b      	ldrb	r3, [r3, #20]
 8004cc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cc6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	7f5b      	ldrb	r3, [r3, #29]
 8004ccc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	f241 1304 	movw	r3, #4356	; 0x1104
 8004cda:	4413      	add	r3, r2
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <ETH_SetDMAConfig+0x104>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6811      	ldr	r1, [r2, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	f241 1304 	movw	r3, #4356	; 0x1104
 8004cee:	440b      	add	r3, r1
 8004cf0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	7f1b      	ldrb	r3, [r3, #28]
 8004cf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d08:	4413      	add	r3, r2
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <ETH_SetDMAConfig+0x108>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6811      	ldr	r1, [r2, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d1c:	440b      	add	r3, r1
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	ffff87fd 	.word	0xffff87fd
 8004d30:	ffff2ffe 	.word	0xffff2ffe
 8004d34:	fffec000 	.word	0xfffec000
 8004d38:	ffc0efef 	.word	0xffc0efef
 8004d3c:	7fc0ffff 	.word	0x7fc0ffff

08004d40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b0a4      	sub	sp, #144	; 0x90
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004d98:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004da4:	2300      	movs	r3, #0
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004dea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fde6 	bl	80049fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e34:	2301      	movs	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004e60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fee1 	bl	8004c34 <ETH_SetDMAConfig>
}
 8004e72:	bf00      	nop
 8004e74:	3790      	adds	r7, #144	; 0x90
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e96:	f001 fc0b 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 8004e9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d908      	bls.n	8004eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d804      	bhi.n	8004eb6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e027      	b.n	8004f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d908      	bls.n	8004ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d204      	bcs.n	8004ed0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e01a      	b.n	8004f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d303      	bcc.n	8004ee0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d911      	bls.n	8004f04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d908      	bls.n	8004efa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d804      	bhi.n	8004efa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e005      	b.n	8004f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e000      	b.n	8004f06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	01312cff 	.word	0x01312cff
 8004f1c:	02160ebf 	.word	0x02160ebf
 8004f20:	03938700 	.word	0x03938700
 8004f24:	05f5e0ff 	.word	0x05f5e0ff
 8004f28:	08f0d17f 	.word	0x08f0d17f

08004f2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e01d      	b.n	8004f76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68d9      	ldr	r1, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	3206      	adds	r2, #6
 8004f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d9de      	bls.n	8004f3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	f241 132c 	movw	r3, #4396	; 0x112c
 8004f8a:	4413      	add	r3, r2
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	f241 1314 	movw	r3, #4372	; 0x1114
 8004f9c:	4413      	add	r3, r2
 8004f9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e024      	b.n	8005012 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6919      	ldr	r1, [r3, #16]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3310      	adds	r3, #16
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d9d7      	bls.n	8004fc8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f241 1330 	movw	r3, #4400	; 0x1130
 800503e:	4413      	add	r3, r2
 8005040:	2203      	movs	r2, #3
 8005042:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6919      	ldr	r1, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f241 131c 	movw	r3, #4380	; 0x111c
 8005050:	4413      	add	r3, r2
 8005052:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	f241 1328 	movw	r3, #4392	; 0x1128
 8005064:	4413      	add	r3, r2
 8005066:	6019      	str	r1, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	; 0x24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005082:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <HAL_GPIO_Init+0x234>)
 8005084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005086:	e194      	b.n	80053b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2101      	movs	r1, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8186 	beq.w	80053ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d005      	beq.n	80050b8 <HAL_GPIO_Init+0x44>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d130      	bne.n	800511a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	2203      	movs	r2, #3
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ee:	2201      	movs	r2, #1
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 0201 	and.w	r2, r3, #1
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d017      	beq.n	8005156 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2203      	movs	r2, #3
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d123      	bne.n	80051aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	08da      	lsrs	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3208      	adds	r2, #8
 800516a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	220f      	movs	r2, #15
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4313      	orrs	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	08da      	lsrs	r2, r3, #3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3208      	adds	r2, #8
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	2203      	movs	r2, #3
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0203 	and.w	r2, r3, #3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80e0 	beq.w	80053ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <HAL_GPIO_Init+0x238>)
 80051ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051f2:	4a2e      	ldr	r2, [pc, #184]	; (80052ac <HAL_GPIO_Init+0x238>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051fc:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <HAL_GPIO_Init+0x238>)
 80051fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520a:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <HAL_GPIO_Init+0x23c>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <HAL_GPIO_Init+0x240>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d052      	beq.n	80052dc <HAL_GPIO_Init+0x268>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_GPIO_Init+0x244>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_GPIO_Init+0x22e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <HAL_GPIO_Init+0x248>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02b      	beq.n	800529e <HAL_GPIO_Init+0x22a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <HAL_GPIO_Init+0x24c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d025      	beq.n	800529a <HAL_GPIO_Init+0x226>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <HAL_GPIO_Init+0x250>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01f      	beq.n	8005296 <HAL_GPIO_Init+0x222>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_GPIO_Init+0x254>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d019      	beq.n	8005292 <HAL_GPIO_Init+0x21e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_GPIO_Init+0x258>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_GPIO_Init+0x21a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_GPIO_Init+0x25c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00d      	beq.n	800528a <HAL_GPIO_Init+0x216>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_GPIO_Init+0x260>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_GPIO_Init+0x212>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_GPIO_Init+0x264>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_GPIO_Init+0x20e>
 800527e:	2309      	movs	r3, #9
 8005280:	e02d      	b.n	80052de <HAL_GPIO_Init+0x26a>
 8005282:	230a      	movs	r3, #10
 8005284:	e02b      	b.n	80052de <HAL_GPIO_Init+0x26a>
 8005286:	2308      	movs	r3, #8
 8005288:	e029      	b.n	80052de <HAL_GPIO_Init+0x26a>
 800528a:	2307      	movs	r3, #7
 800528c:	e027      	b.n	80052de <HAL_GPIO_Init+0x26a>
 800528e:	2306      	movs	r3, #6
 8005290:	e025      	b.n	80052de <HAL_GPIO_Init+0x26a>
 8005292:	2305      	movs	r3, #5
 8005294:	e023      	b.n	80052de <HAL_GPIO_Init+0x26a>
 8005296:	2304      	movs	r3, #4
 8005298:	e021      	b.n	80052de <HAL_GPIO_Init+0x26a>
 800529a:	2303      	movs	r3, #3
 800529c:	e01f      	b.n	80052de <HAL_GPIO_Init+0x26a>
 800529e:	2302      	movs	r3, #2
 80052a0:	e01d      	b.n	80052de <HAL_GPIO_Init+0x26a>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01b      	b.n	80052de <HAL_GPIO_Init+0x26a>
 80052a6:	bf00      	nop
 80052a8:	58000080 	.word	0x58000080
 80052ac:	58024400 	.word	0x58024400
 80052b0:	58000400 	.word	0x58000400
 80052b4:	58020000 	.word	0x58020000
 80052b8:	58020400 	.word	0x58020400
 80052bc:	58020800 	.word	0x58020800
 80052c0:	58020c00 	.word	0x58020c00
 80052c4:	58021000 	.word	0x58021000
 80052c8:	58021400 	.word	0x58021400
 80052cc:	58021800 	.word	0x58021800
 80052d0:	58021c00 	.word	0x58021c00
 80052d4:	58022000 	.word	0x58022000
 80052d8:	58022400 	.word	0x58022400
 80052dc:	2300      	movs	r3, #0
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	f002 0203 	and.w	r2, r2, #3
 80052e4:	0092      	lsls	r2, r2, #2
 80052e6:	4093      	lsls	r3, r2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ee:	4938      	ldr	r1, [pc, #224]	; (80053d0 <HAL_GPIO_Init+0x35c>)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	3302      	adds	r3, #2
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f47f ae63 	bne.w	8005088 <HAL_GPIO_Init+0x14>
  }
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	3724      	adds	r7, #36	; 0x24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	58000400 	.word	0x58000400

080053d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	e001      	b.n	80053f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	807b      	strh	r3, [r7, #2]
 8005410:	4613      	mov	r3, r2
 8005412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005414:	787b      	ldrb	r3, [r7, #1]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541a:	887a      	ldrh	r2, [r7, #2]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005420:	e003      	b.n	800542a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005422:	887b      	ldrh	r3, [r7, #2]
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	619a      	str	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_HSEM_FastTake+0x2c>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3320      	adds	r3, #32
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <HAL_HSEM_FastTake+0x30>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	58026400 	.word	0x58026400
 8005468:	80000300 	.word	0x80000300

0800546c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005476:	4906      	ldr	r1, [pc, #24]	; (8005490 <HAL_HSEM_Release+0x24>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	58026400 	.word	0x58026400

08005494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005496:	b08f      	sub	sp, #60	; 0x3c
 8005498:	af0a      	add	r7, sp, #40	; 0x28
 800549a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e116      	b.n	80056d4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fc ffc7 	bl	8002454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2203      	movs	r2, #3
 80054ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f005 f859 	bl	800a59c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	687e      	ldr	r6, [r7, #4]
 80054f2:	466d      	mov	r5, sp
 80054f4:	f106 0410 	add.w	r4, r6, #16
 80054f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005504:	e885 0003 	stmia.w	r5, {r0, r1}
 8005508:	1d33      	adds	r3, r6, #4
 800550a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800550c:	6838      	ldr	r0, [r7, #0]
 800550e:	f004 ffd7 	bl	800a4c0 <USB_CoreInit>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0d7      	b.n	80056d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f005 f847 	bl	800a5be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e04a      	b.n	80055cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	333d      	adds	r3, #61	; 0x3d
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	333c      	adds	r3, #60	; 0x3c
 800555a:	7bfa      	ldrb	r2, [r7, #15]
 800555c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800555e:	7bfa      	ldrb	r2, [r7, #15]
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	b298      	uxth	r0, r3
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3342      	adds	r3, #66	; 0x42
 8005572:	4602      	mov	r2, r0
 8005574:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	333f      	adds	r3, #63	; 0x3f
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3344      	adds	r3, #68	; 0x44
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	3348      	adds	r3, #72	; 0x48
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055b2:	7bfa      	ldrb	r2, [r7, #15]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3350      	adds	r3, #80	; 0x50
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	3301      	adds	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	7bfa      	ldrb	r2, [r7, #15]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3af      	bcc.n	8005536 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e044      	b.n	8005666 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005604:	7bfa      	ldrb	r2, [r7, #15]
 8005606:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800564a:	7bfa      	ldrb	r2, [r7, #15]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	3301      	adds	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3b5      	bcc.n	80055dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	687e      	ldr	r6, [r7, #4]
 8005678:	466d      	mov	r5, sp
 800567a:	f106 0410 	add.w	r4, r6, #16
 800567e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568a:	e885 0003 	stmia.w	r5, {r0, r1}
 800568e:	1d33      	adds	r3, r6, #4
 8005690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f004 ffe0 	bl	800a658 <USB_DevInit>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e014      	b.n	80056d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d102      	bne.n	80056c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f80a 	bl	80056dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f005 f99a 	bl	800aa06 <USB_DevDisconnect>

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_PCDEx_ActivateLPM+0x44>)
 800570c:	4313      	orrs	r3, r2
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	10000003 	.word	0x10000003

08005724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800572c:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	2b06      	cmp	r3, #6
 8005736:	d00a      	beq.n	800574e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e040      	b.n	80057cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e03e      	b.n	80057cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800574e:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005756:	491f      	ldr	r1, [pc, #124]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4313      	orrs	r3, r2
 800575c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800575e:	f7fd f80d 	bl	800277c <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005764:	e009      	b.n	800577a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005766:	f7fd f809 	bl	800277c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	d901      	bls.n	800577a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e028      	b.n	80057cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800577a:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	d1ee      	bne.n	8005766 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b1e      	cmp	r3, #30
 800578c:	d008      	beq.n	80057a0 <HAL_PWREx_ConfigSupply+0x7c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b2e      	cmp	r3, #46	; 0x2e
 8005792:	d005      	beq.n	80057a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b1d      	cmp	r3, #29
 8005798:	d002      	beq.n	80057a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b2d      	cmp	r3, #45	; 0x2d
 800579e:	d114      	bne.n	80057ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80057a0:	f7fc ffec 	bl	800277c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80057a6:	e009      	b.n	80057bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057a8:	f7fc ffe8 	bl	800277c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057b6:	d901      	bls.n	80057bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e007      	b.n	80057cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d1ee      	bne.n	80057a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	58024800 	.word	0x58024800

080057d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80057e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e6:	60d3      	str	r3, [r2, #12]
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	58024800 	.word	0x58024800

080057f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	; 0x30
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f000 bc1c 	b.w	8006044 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8087 	beq.w	8005928 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581a:	4b9e      	ldr	r3, [pc, #632]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005824:	4b9b      	ldr	r3, [pc, #620]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b10      	cmp	r3, #16
 800582e:	d007      	beq.n	8005840 <HAL_RCC_OscConfig+0x48>
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	2b18      	cmp	r3, #24
 8005834:	d110      	bne.n	8005858 <HAL_RCC_OscConfig+0x60>
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d10b      	bne.n	8005858 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005840:	4b94      	ldr	r3, [pc, #592]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d06c      	beq.n	8005926 <HAL_RCC_OscConfig+0x12e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d168      	bne.n	8005926 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e3f5      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x78>
 8005862:	4b8c      	ldr	r3, [pc, #560]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a8b      	ldr	r2, [pc, #556]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e02e      	b.n	80058ce <HAL_RCC_OscConfig+0xd6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x9a>
 8005878:	4b86      	ldr	r3, [pc, #536]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a85      	ldr	r2, [pc, #532]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a82      	ldr	r2, [pc, #520]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e01d      	b.n	80058ce <HAL_RCC_OscConfig+0xd6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800589a:	d10c      	bne.n	80058b6 <HAL_RCC_OscConfig+0xbe>
 800589c:	4b7d      	ldr	r3, [pc, #500]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7c      	ldr	r2, [pc, #496]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	4b7a      	ldr	r3, [pc, #488]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a79      	ldr	r2, [pc, #484]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e00b      	b.n	80058ce <HAL_RCC_OscConfig+0xd6>
 80058b6:	4b77      	ldr	r3, [pc, #476]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a76      	ldr	r2, [pc, #472]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b74      	ldr	r3, [pc, #464]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d013      	beq.n	80058fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fc ff51 	bl	800277c <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058de:	f7fc ff4d 	bl	800277c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b64      	cmp	r3, #100	; 0x64
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e3a9      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058f0:	4b68      	ldr	r3, [pc, #416]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0xe6>
 80058fc:	e014      	b.n	8005928 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fe:	f7fc ff3d 	bl	800277c <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005906:	f7fc ff39 	bl	800277c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b64      	cmp	r3, #100	; 0x64
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e395      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005918:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f0      	bne.n	8005906 <HAL_RCC_OscConfig+0x10e>
 8005924:	e000      	b.n	8005928 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005926:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80ca 	beq.w	8005aca <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005936:	4b57      	ldr	r3, [pc, #348]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800593e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005940:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_RCC_OscConfig+0x164>
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	2b18      	cmp	r3, #24
 8005950:	d156      	bne.n	8005a00 <HAL_RCC_OscConfig+0x208>
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d151      	bne.n	8005a00 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800595c:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_OscConfig+0x17c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e367      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005974:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 0219 	bic.w	r2, r3, #25
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4944      	ldr	r1, [pc, #272]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005986:	f7fc fef9 	bl	800277c <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc fef5 	bl	800277c <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e351      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a0:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ac:	f7fc ff16 	bl	80027dc <HAL_GetREVID>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d817      	bhi.n	80059ea <HAL_RCC_OscConfig+0x1f2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d108      	bne.n	80059d4 <HAL_RCC_OscConfig+0x1dc>
 80059c2:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059ca:	4a32      	ldr	r2, [pc, #200]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d2:	e07a      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d4:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	492c      	ldr	r1, [pc, #176]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e8:	e06f      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	4926      	ldr	r1, [pc, #152]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059fe:	e064      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d047      	beq.n	8005a98 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a08:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 0219 	bic.w	r2, r3, #25
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	491f      	ldr	r1, [pc, #124]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1a:	f7fc feaf 	bl	800277c <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a22:	f7fc feab 	bl	800277c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e307      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a40:	f7fc fecc 	bl	80027dc <HAL_GetREVID>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d817      	bhi.n	8005a7e <HAL_RCC_OscConfig+0x286>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d108      	bne.n	8005a68 <HAL_RCC_OscConfig+0x270>
 8005a56:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a64:	6053      	str	r3, [r2, #4]
 8005a66:	e030      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	031b      	lsls	r3, r3, #12
 8005a76:	4907      	ldr	r1, [pc, #28]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
 8005a7c:	e025      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	4901      	ldr	r1, [pc, #4]	; (8005a94 <HAL_RCC_OscConfig+0x29c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
 8005a92:	e01a      	b.n	8005aca <HAL_RCC_OscConfig+0x2d2>
 8005a94:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a98:	4b9e      	ldr	r3, [pc, #632]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a9d      	ldr	r2, [pc, #628]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fc fe6a 	bl	800277c <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aac:	f7fc fe66 	bl	800277c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e2c2      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005abe:	4b95      	ldr	r3, [pc, #596]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80a9 	beq.w	8005c2a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad8:	4b8e      	ldr	r3, [pc, #568]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae2:	4b8c      	ldr	r3, [pc, #560]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d007      	beq.n	8005afe <HAL_RCC_OscConfig+0x306>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b18      	cmp	r3, #24
 8005af2:	d13a      	bne.n	8005b6a <HAL_RCC_OscConfig+0x372>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d135      	bne.n	8005b6a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005afe:	4b85      	ldr	r3, [pc, #532]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_RCC_OscConfig+0x31e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e296      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b16:	f7fc fe61 	bl	80027dc <HAL_GetREVID>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d817      	bhi.n	8005b54 <HAL_RCC_OscConfig+0x35c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d108      	bne.n	8005b3e <HAL_RCC_OscConfig+0x346>
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b34:	4a77      	ldr	r2, [pc, #476]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b3a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b3c:	e075      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b3e:	4b75      	ldr	r3, [pc, #468]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	069b      	lsls	r3, r3, #26
 8005b4c:	4971      	ldr	r1, [pc, #452]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b52:	e06a      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b54:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	496c      	ldr	r1, [pc, #432]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b68:	e05f      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d042      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b72:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a67      	ldr	r2, [pc, #412]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fdfd 	bl	800277c <HAL_GetTick>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b86:	f7fc fdf9 	bl	800277c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e255      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b98:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ba4:	f7fc fe1a 	bl	80027dc <HAL_GetREVID>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d817      	bhi.n	8005be2 <HAL_RCC_OscConfig+0x3ea>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d108      	bne.n	8005bcc <HAL_RCC_OscConfig+0x3d4>
 8005bba:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bc2:	4a54      	ldr	r2, [pc, #336]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	e02e      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
 8005bcc:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	069b      	lsls	r3, r3, #26
 8005bda:	494e      	ldr	r1, [pc, #312]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	e023      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
 8005be2:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	4948      	ldr	r1, [pc, #288]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60cb      	str	r3, [r1, #12]
 8005bf6:	e018      	b.n	8005c2a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005bf8:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a45      	ldr	r2, [pc, #276]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c04:	f7fc fdba 	bl	800277c <HAL_GetTick>
 8005c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c0c:	f7fc fdb6 	bl	800277c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e212      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d036      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d019      	beq.n	8005c72 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4a:	f7fc fd97 	bl	800277c <HAL_GetTick>
 8005c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c52:	f7fc fd93 	bl	800277c <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e1ef      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x45a>
 8005c70:	e018      	b.n	8005ca4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c72:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c76:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fc fd7d 	bl	800277c <HAL_GetTick>
 8005c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fc fd79 	bl	800277c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1d5      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d039      	beq.n	8005d24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cb8:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fd5a 	bl	800277c <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ccc:	f7fc fd56 	bl	800277c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e1b2      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cde:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4d4>
 8005cea:	e01b      	b.n	8005d24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <HAL_RCC_OscConfig+0x51c>)
 8005cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cf8:	f7fc fd40 	bl	800277c <HAL_GetTick>
 8005cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cfe:	e00b      	b.n	8005d18 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d00:	f7fc fd3c 	bl	800277c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d904      	bls.n	8005d18 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e198      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d18:	4ba3      	ldr	r3, [pc, #652]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ed      	bne.n	8005d00 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8081 	beq.w	8005e34 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d32:	4b9e      	ldr	r3, [pc, #632]	; (8005fac <HAL_RCC_OscConfig+0x7b4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a9d      	ldr	r2, [pc, #628]	; (8005fac <HAL_RCC_OscConfig+0x7b4>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d3e:	f7fc fd1d 	bl	800277c <HAL_GetTick>
 8005d42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fc fd19 	bl	800277c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e175      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d58:	4b94      	ldr	r3, [pc, #592]	; (8005fac <HAL_RCC_OscConfig+0x7b4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x582>
 8005d6c:	4b8e      	ldr	r3, [pc, #568]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a8d      	ldr	r2, [pc, #564]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
 8005d78:	e02d      	b.n	8005dd6 <HAL_RCC_OscConfig+0x5de>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x5a4>
 8005d82:	4b89      	ldr	r3, [pc, #548]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	4a88      	ldr	r2, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8e:	4b86      	ldr	r3, [pc, #536]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	4a85      	ldr	r2, [pc, #532]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9a:	e01c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x5de>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCC_OscConfig+0x5c6>
 8005da4:	4b80      	ldr	r3, [pc, #512]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	4a7f      	ldr	r2, [pc, #508]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6713      	str	r3, [r2, #112]	; 0x70
 8005db0:	4b7d      	ldr	r3, [pc, #500]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a7c      	ldr	r2, [pc, #496]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbc:	e00b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x5de>
 8005dbe:	4b7a      	ldr	r3, [pc, #488]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	4a79      	ldr	r2, [pc, #484]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dca:	4b77      	ldr	r3, [pc, #476]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	4a76      	ldr	r2, [pc, #472]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dde:	f7fc fccd 	bl	800277c <HAL_GetTick>
 8005de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fc fcc9 	bl	800277c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e123      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ee      	beq.n	8005de6 <HAL_RCC_OscConfig+0x5ee>
 8005e08:	e014      	b.n	8005e34 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fc fcb7 	bl	800277c <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fc fcb3 	bl	800277c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e10d      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e28:	4b5f      	ldr	r3, [pc, #380]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ee      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8102 	beq.w	8006042 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e3e:	4b5a      	ldr	r3, [pc, #360]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e46:	2b18      	cmp	r3, #24
 8005e48:	f000 80bd 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f040 8095 	bne.w	8005f80 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a53      	ldr	r2, [pc, #332]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fc fc8b 	bl	800277c <HAL_GetTick>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fc fc87 	bl	800277c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0e3      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e7c:	4b4a      	ldr	r3, [pc, #296]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f0      	bne.n	8005e6a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e88:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8c:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <HAL_RCC_OscConfig+0x7b8>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e98:	0112      	lsls	r2, r2, #4
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	4942      	ldr	r1, [pc, #264]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	628b      	str	r3, [r1, #40]	; 0x28
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	025b      	lsls	r3, r3, #9
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	061b      	lsls	r3, r3, #24
 8005ece:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ed2:	4935      	ldr	r1, [pc, #212]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005ed8:	4b33      	ldr	r3, [pc, #204]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a32      	ldr	r2, [pc, #200]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ee4:	4b30      	ldr	r3, [pc, #192]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee8:	4b32      	ldr	r3, [pc, #200]	; (8005fb4 <HAL_RCC_OscConfig+0x7bc>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ef0:	00d2      	lsls	r2, r2, #3
 8005ef2:	492d      	ldr	r1, [pc, #180]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	f023 020c 	bic.w	r2, r3, #12
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	4928      	ldr	r1, [pc, #160]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f023 0202 	bic.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	4924      	ldr	r1, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f28:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f34:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fc fc10 	bl	800277c <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f60:	f7fc fc0c 	bl	800277c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e068      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x768>
 8005f7e:	e060      	b.n	8006042 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <HAL_RCC_OscConfig+0x7b0>)
 8005f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fc fbf6 	bl	800277c <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f92:	e011      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fc fbf2 	bl	800277c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d90a      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e04e      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	58024800 	.word	0x58024800
 8005fb0:	fffffc0c 	.word	0xfffffc0c
 8005fb4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fb8:	4b24      	ldr	r3, [pc, #144]	; (800604c <HAL_RCC_OscConfig+0x854>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e7      	bne.n	8005f94 <HAL_RCC_OscConfig+0x79c>
 8005fc4:	e03d      	b.n	8006042 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fc6:	4b21      	ldr	r3, [pc, #132]	; (800604c <HAL_RCC_OscConfig+0x854>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fcc:	4b1f      	ldr	r3, [pc, #124]	; (800604c <HAL_RCC_OscConfig+0x854>)
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d031      	beq.n	800603e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f003 0203 	and.w	r2, r3, #3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d12a      	bne.n	800603e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d122      	bne.n	800603e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d11a      	bne.n	800603e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0a5b      	lsrs	r3, r3, #9
 800600c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006014:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d111      	bne.n	800603e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d108      	bne.n	800603e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	0e1b      	lsrs	r3, r3, #24
 8006030:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d001      	beq.n	8006042 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3730      	adds	r7, #48	; 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024400 	.word	0x58024400

08006050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e19c      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006064:	4b8a      	ldr	r3, [pc, #552]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d910      	bls.n	8006094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b87      	ldr	r3, [pc, #540]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f023 020f 	bic.w	r2, r3, #15
 800607a:	4985      	ldr	r1, [pc, #532]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	4313      	orrs	r3, r2
 8006080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	4b83      	ldr	r3, [pc, #524]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d001      	beq.n	8006094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e184      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d010      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	4b7b      	ldr	r3, [pc, #492]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d908      	bls.n	80060c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060b0:	4b78      	ldr	r3, [pc, #480]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	4975      	ldr	r1, [pc, #468]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	4b70      	ldr	r3, [pc, #448]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060da:	429a      	cmp	r2, r3
 80060dc:	d908      	bls.n	80060f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060de:	4b6d      	ldr	r3, [pc, #436]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	496a      	ldr	r1, [pc, #424]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	4b64      	ldr	r3, [pc, #400]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006108:	429a      	cmp	r2, r3
 800610a:	d908      	bls.n	800611e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800610c:	4b61      	ldr	r3, [pc, #388]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	495e      	ldr	r1, [pc, #376]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800611a:	4313      	orrs	r3, r2
 800611c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d010      	beq.n	800614c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	4b59      	ldr	r3, [pc, #356]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006136:	429a      	cmp	r2, r3
 8006138:	d908      	bls.n	800614c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800613a:	4b56      	ldr	r3, [pc, #344]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	4953      	ldr	r1, [pc, #332]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006148:	4313      	orrs	r3, r2
 800614a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d010      	beq.n	800617a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	4b4d      	ldr	r3, [pc, #308]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	429a      	cmp	r2, r3
 8006166:	d908      	bls.n	800617a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006168:	4b4a      	ldr	r3, [pc, #296]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f023 020f 	bic.w	r2, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4947      	ldr	r1, [pc, #284]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006176:	4313      	orrs	r3, r2
 8006178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d055      	beq.n	8006232 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006186:	4b43      	ldr	r3, [pc, #268]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	4940      	ldr	r1, [pc, #256]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006194:	4313      	orrs	r3, r2
 8006196:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d107      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061a0:	4b3c      	ldr	r3, [pc, #240]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d121      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0f6      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d107      	bne.n	80061c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061b8:	4b36      	ldr	r3, [pc, #216]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d115      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e0ea      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d107      	bne.n	80061e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061d0:	4b30      	ldr	r3, [pc, #192]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0de      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e0:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0d6      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f023 0207 	bic.w	r2, r3, #7
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4925      	ldr	r1, [pc, #148]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fc fabb 	bl	800277c <HAL_GetTick>
 8006206:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006208:	e00a      	b.n	8006220 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620a:	f7fc fab7 	bl	800277c <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	; 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0be      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006220:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	429a      	cmp	r2, r3
 8006230:	d1eb      	bne.n	800620a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d010      	beq.n	8006260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	429a      	cmp	r2, r3
 800624c:	d208      	bcs.n	8006260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800624e:	4b11      	ldr	r3, [pc, #68]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f023 020f 	bic.w	r2, r3, #15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	490e      	ldr	r1, [pc, #56]	; (8006294 <HAL_RCC_ClockConfig+0x244>)
 800625c:	4313      	orrs	r3, r2
 800625e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d214      	bcs.n	8006298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626e:	4b08      	ldr	r3, [pc, #32]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 020f 	bic.w	r2, r3, #15
 8006276:	4906      	ldr	r1, [pc, #24]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <HAL_RCC_ClockConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d005      	beq.n	8006298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e086      	b.n	800639e <HAL_RCC_ClockConfig+0x34e>
 8006290:	52002000 	.word	0x52002000
 8006294:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d208      	bcs.n	80062c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062b4:	4b3c      	ldr	r3, [pc, #240]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	4939      	ldr	r1, [pc, #228]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d010      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	4b34      	ldr	r3, [pc, #208]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062de:	429a      	cmp	r2, r3
 80062e0:	d208      	bcs.n	80062f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062e2:	4b31      	ldr	r3, [pc, #196]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	492e      	ldr	r1, [pc, #184]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d010      	beq.n	8006322 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800630c:	429a      	cmp	r2, r3
 800630e:	d208      	bcs.n	8006322 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	4922      	ldr	r1, [pc, #136]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 800631e:	4313      	orrs	r3, r2
 8006320:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d010      	beq.n	8006350 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800633a:	429a      	cmp	r2, r3
 800633c:	d208      	bcs.n	8006350 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4917      	ldr	r1, [pc, #92]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 800634c:	4313      	orrs	r3, r2
 800634e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006350:	f000 f834 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8006354:	4602      	mov	r2, r0
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	4912      	ldr	r1, [pc, #72]	; (80063ac <HAL_RCC_ClockConfig+0x35c>)
 8006362:	5ccb      	ldrb	r3, [r1, r3]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800636e:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <HAL_RCC_ClockConfig+0x358>)
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <HAL_RCC_ClockConfig+0x35c>)
 8006378:	5cd3      	ldrb	r3, [r2, r3]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <HAL_RCC_ClockConfig+0x360>)
 8006386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006388:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x364>)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800638e:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <HAL_RCC_ClockConfig+0x368>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fc f9a8 	bl	80026e8 <HAL_InitTick>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	58024400 	.word	0x58024400
 80063ac:	0800ab38 	.word	0x0800ab38
 80063b0:	24000004 	.word	0x24000004
 80063b4:	24000000 	.word	0x24000000
 80063b8:	24000058 	.word	0x24000058

080063bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	b089      	sub	sp, #36	; 0x24
 80063c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c2:	4bb3      	ldr	r3, [pc, #716]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ca:	2b18      	cmp	r3, #24
 80063cc:	f200 8155 	bhi.w	800667a <HAL_RCC_GetSysClockFreq+0x2be>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	0800667b 	.word	0x0800667b
 80063e0:	0800667b 	.word	0x0800667b
 80063e4:	0800667b 	.word	0x0800667b
 80063e8:	0800667b 	.word	0x0800667b
 80063ec:	0800667b 	.word	0x0800667b
 80063f0:	0800667b 	.word	0x0800667b
 80063f4:	0800667b 	.word	0x0800667b
 80063f8:	08006463 	.word	0x08006463
 80063fc:	0800667b 	.word	0x0800667b
 8006400:	0800667b 	.word	0x0800667b
 8006404:	0800667b 	.word	0x0800667b
 8006408:	0800667b 	.word	0x0800667b
 800640c:	0800667b 	.word	0x0800667b
 8006410:	0800667b 	.word	0x0800667b
 8006414:	0800667b 	.word	0x0800667b
 8006418:	08006469 	.word	0x08006469
 800641c:	0800667b 	.word	0x0800667b
 8006420:	0800667b 	.word	0x0800667b
 8006424:	0800667b 	.word	0x0800667b
 8006428:	0800667b 	.word	0x0800667b
 800642c:	0800667b 	.word	0x0800667b
 8006430:	0800667b 	.word	0x0800667b
 8006434:	0800667b 	.word	0x0800667b
 8006438:	0800646f 	.word	0x0800646f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800643c:	4b94      	ldr	r3, [pc, #592]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006448:	4b91      	ldr	r3, [pc, #580]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a90      	ldr	r2, [pc, #576]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800645a:	e111      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800645c:	4b8d      	ldr	r3, [pc, #564]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800645e:	61bb      	str	r3, [r7, #24]
    break;
 8006460:	e10e      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006462:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006464:	61bb      	str	r3, [r7, #24]
    break;
 8006466:	e10b      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006468:	4b8c      	ldr	r3, [pc, #560]	; (800669c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800646a:	61bb      	str	r3, [r7, #24]
    break;
 800646c:	e108      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800646e:	4b88      	ldr	r3, [pc, #544]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006478:	4b85      	ldr	r3, [pc, #532]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006482:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006484:	4b82      	ldr	r3, [pc, #520]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800648e:	4b80      	ldr	r3, [pc, #512]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80e1 	beq.w	8006674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	f000 8083 	beq.w	80065c0 <HAL_RCC_GetSysClockFreq+0x204>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f200 80a1 	bhi.w	8006604 <HAL_RCC_GetSysClockFreq+0x248>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x114>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d056      	beq.n	800657c <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ce:	e099      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d0:	4b6f      	ldr	r3, [pc, #444]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02d      	beq.n	8006538 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064dc:	4b6c      	ldr	r3, [pc, #432]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	4a6b      	ldr	r2, [pc, #428]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b62      	ldr	r3, [pc, #392]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a02 	vldr	s12, [r7, #8]
 800651a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80066a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006536:	e087      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a58 	vldr	s13, [pc, #352]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b51      	ldr	r3, [pc, #324]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a02 	vldr	s12, [r7, #8]
 800655e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80066a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657a:	e065      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eddf 6a48 	vldr	s13, [pc, #288]	; 80066a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	4b40      	ldr	r3, [pc, #256]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659e:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80066a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065be:	e043      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80066ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d2:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80066a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006602:	e021      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80066a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006616:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006626:	ed97 6a02 	vldr	s12, [r7, #8]
 800662a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80066a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800662e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006646:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006648:	4b11      	ldr	r3, [pc, #68]	; (8006690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	0a5b      	lsrs	r3, r3, #9
 800664e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006652:	3301      	adds	r3, #1
 8006654:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006660:	edd7 6a07 	vldr	s13, [r7, #28]
 8006664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666c:	ee17 3a90 	vmov	r3, s15
 8006670:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006672:	e005      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]
    break;
 8006678:	e002      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800667c:	61bb      	str	r3, [r7, #24]
    break;
 800667e:	bf00      	nop
  }

  return sysclockfreq;
 8006680:	69bb      	ldr	r3, [r7, #24]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3724      	adds	r7, #36	; 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
 8006694:	03d09000 	.word	0x03d09000
 8006698:	003d0900 	.word	0x003d0900
 800669c:	007a1200 	.word	0x007a1200
 80066a0:	46000000 	.word	0x46000000
 80066a4:	4c742400 	.word	0x4c742400
 80066a8:	4a742400 	.word	0x4a742400
 80066ac:	4af42400 	.word	0x4af42400

080066b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066b6:	f7ff fe81 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <HAL_RCC_GetHCLKFreq+0x50>)
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490f      	ldr	r1, [pc, #60]	; (8006704 <HAL_RCC_GetHCLKFreq+0x54>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	fa22 f303 	lsr.w	r3, r2, r3
 80066d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <HAL_RCC_GetHCLKFreq+0x50>)
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	4a09      	ldr	r2, [pc, #36]	; (8006704 <HAL_RCC_GetHCLKFreq+0x54>)
 80066de:	5cd3      	ldrb	r3, [r2, r3]
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	4a07      	ldr	r2, [pc, #28]	; (8006708 <HAL_RCC_GetHCLKFreq+0x58>)
 80066ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ee:	4a07      	ldr	r2, [pc, #28]	; (800670c <HAL_RCC_GetHCLKFreq+0x5c>)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <HAL_RCC_GetHCLKFreq+0x58>)
 80066f6:	681b      	ldr	r3, [r3, #0]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	58024400 	.word	0x58024400
 8006704:	0800ab38 	.word	0x0800ab38
 8006708:	24000004 	.word	0x24000004
 800670c:	24000000 	.word	0x24000000

08006710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006714:	f7ff ffcc 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4904      	ldr	r1, [pc, #16]	; (8006738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58024400 	.word	0x58024400
 8006738:	0800ab38 	.word	0x0800ab38

0800673c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006740:	f7ff ffb6 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	4904      	ldr	r1, [pc, #16]	; (8006764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	58024400 	.word	0x58024400
 8006764:	0800ab38 	.word	0x0800ab38

08006768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006770:	2300      	movs	r3, #0
 8006772:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006774:	2300      	movs	r3, #0
 8006776:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03f      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678c:	d02a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800678e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006792:	d824      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006798:	d018      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800679a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679e:	d81e      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a8:	d007      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80067aa:	e018      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ac:	4bab      	ldr	r3, [pc, #684]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4aaa      	ldr	r2, [pc, #680]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80067b8:	e015      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	2102      	movs	r1, #2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 f9cf 	bl	8007b64 <RCCEx_PLL2_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80067ca:	e00c      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3324      	adds	r3, #36	; 0x24
 80067d0:	2102      	movs	r1, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fa78 	bl	8007cc8 <RCCEx_PLL3_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80067e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067ec:	4b9b      	ldr	r3, [pc, #620]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f8:	4998      	ldr	r1, [pc, #608]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	650b      	str	r3, [r1, #80]	; 0x50
 80067fe:	e001      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	2b04      	cmp	r3, #4
 8006816:	d826      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006835 	.word	0x08006835
 8006824:	08006843 	.word	0x08006843
 8006828:	08006855 	.word	0x08006855
 800682c:	0800686d 	.word	0x0800686d
 8006830:	0800686d 	.word	0x0800686d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b89      	ldr	r3, [pc, #548]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a88      	ldr	r2, [pc, #544]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006840:	e015      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f98b 	bl	8007b64 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006852:	e00c      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3324      	adds	r3, #36	; 0x24
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fa34 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006864:	e003      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]
      break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800686c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006874:	4b79      	ldr	r3, [pc, #484]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006878:	f023 0207 	bic.w	r2, r3, #7
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	4976      	ldr	r1, [pc, #472]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	650b      	str	r3, [r1, #80]	; 0x50
 8006886:	e001      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006894:	2b00      	cmp	r3, #0
 8006896:	d042      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d02b      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d825      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80068a8:	2bc0      	cmp	r3, #192	; 0xc0
 80068aa:	d028      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068ac:	2bc0      	cmp	r3, #192	; 0xc0
 80068ae:	d821      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d016      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d81d      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d007      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80068c0:	e018      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c2:	4b66      	ldr	r3, [pc, #408]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	4a65      	ldr	r2, [pc, #404]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80068ce:	e017      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	2100      	movs	r1, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f944 	bl	8007b64 <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80068e0:	e00e      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3324      	adds	r3, #36	; 0x24
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f9ed 	bl	8007cc8 <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80068f2:	e005      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
      break;
 80068f8:	e002      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80068fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006906:	4b55      	ldr	r3, [pc, #340]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006912:	4952      	ldr	r1, [pc, #328]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006914:	4313      	orrs	r3, r2
 8006916:	650b      	str	r3, [r1, #80]	; 0x50
 8006918:	e001      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006926:	2b00      	cmp	r3, #0
 8006928:	d049      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006934:	d030      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800693a:	d82a      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800693c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006940:	d02c      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006942:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006946:	d824      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694c:	d018      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800694e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006952:	d81e      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800695c:	d007      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800695e:	e018      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006960:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a3d      	ldr	r2, [pc, #244]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800696c:	e017      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f001 f8f5 	bl	8007b64 <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800697e:	e00e      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 f99e 	bl	8007cc8 <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006990:	e005      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
      break;
 8006996:	e002      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800699c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069b2:	492a      	ldr	r1, [pc, #168]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	658b      	str	r3, [r1, #88]	; 0x58
 80069b8:	e001      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d04c      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d4:	d030      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80069d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069da:	d82a      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80069dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069e0:	d02c      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80069e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069e6:	d824      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80069e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ec:	d018      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f2:	d81e      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80069f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069fc:	d007      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80069fe:	e018      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a0c:	e017      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f8a5 	bl	8007b64 <RCCEx_PLL2_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a1e:	e00e      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3324      	adds	r3, #36	; 0x24
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f94e 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a30:	e005      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
      break;
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a52:	4902      	ldr	r1, [pc, #8]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	658b      	str	r3, [r1, #88]	; 0x58
 8006a58:	e004      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006a5a:	bf00      	nop
 8006a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d032      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d01c      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a78:	2b30      	cmp	r3, #48	; 0x30
 8006a7a:	d817      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d00c      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d813      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d016      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d10f      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8c:	4baf      	ldr	r3, [pc, #700]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	4aae      	ldr	r2, [pc, #696]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006a98:	e00e      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f85f 	bl	8007b64 <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006abe:	4ba3      	ldr	r3, [pc, #652]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aca:	49a0      	ldr	r1, [pc, #640]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d047      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aea:	d030      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af0:	d82a      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006af2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006af6:	d02c      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006af8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006afc:	d824      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d018      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b08:	d81e      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d007      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006b14:	e018      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b16:	4b8d      	ldr	r3, [pc, #564]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	4a8c      	ldr	r2, [pc, #560]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b22:	e017      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f81a 	bl	8007b64 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b34:	e00e      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3324      	adds	r3, #36	; 0x24
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f8c3 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b46:	e005      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4c:	e002      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b5a:	4b7c      	ldr	r3, [pc, #496]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b66:	4979      	ldr	r1, [pc, #484]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	650b      	str	r3, [r1, #80]	; 0x50
 8006b6c:	e001      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d049      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b86:	d02e      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b8c:	d828      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b92:	d02a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b98:	d822      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b9e:	d026      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006ba0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ba4:	d81c      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d010      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb0:	d816      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bba:	d111      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 ffce 	bl	8007b64 <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e012      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f877 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006bde:	e009      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006be6:	bf00      	nop
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bfa:	4b54      	ldr	r3, [pc, #336]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c06:	4951      	ldr	r1, [pc, #324]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	650b      	str	r3, [r1, #80]	; 0x50
 8006c0c:	e001      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d04b      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c28:	d02e      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c2e:	d828      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c34:	d02a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d822      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c40:	d026      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c46:	d81c      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4c:	d010      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c52:	d816      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01d      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5c:	d111      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3304      	adds	r3, #4
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ff7d 	bl	8007b64 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c6e:	e012      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3324      	adds	r3, #36	; 0x24
 8006c74:	2101      	movs	r1, #1
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 f826 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c80:	e009      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
      break;
 8006c86:	e006      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006c88:	bf00      	nop
 8006c8a:	e004      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006caa:	4928      	ldr	r1, [pc, #160]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	658b      	str	r3, [r1, #88]	; 0x58
 8006cb0:	e001      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d02f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cca:	d00e      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd0:	d814      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cda:	d10f      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	4a1a      	ldr	r2, [pc, #104]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ce8:	e00c      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 ff37 	bl	8007b64 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006cfa:	e003      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d16:	490d      	ldr	r1, [pc, #52]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	650b      	str	r3, [r1, #80]	; 0x50
 8006d1c:	e001      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d033      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d81c      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d77 	.word	0x08006d77
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d5f 	.word	0x08006d5f
 8006d48:	08006d77 	.word	0x08006d77
 8006d4c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d50:	4bb8      	ldr	r3, [pc, #736]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4ab7      	ldr	r2, [pc, #732]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d5c:	e00c      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3304      	adds	r3, #4
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fefd 	bl	8007b64 <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d6e:	e003      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	e000      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d7e:	4bad      	ldr	r3, [pc, #692]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	f023 0203 	bic.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	49aa      	ldr	r1, [pc, #680]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d90:	e001      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8086 	beq.w	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006da4:	4ba4      	ldr	r3, [pc, #656]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4aa3      	ldr	r2, [pc, #652]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006db0:	f7fb fce4 	bl	800277c <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006db6:	e009      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db8:	f7fb fce0 	bl	800277c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d902      	bls.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
        break;
 8006dca:	e005      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dcc:	4b9a      	ldr	r3, [pc, #616]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0ef      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d166      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006dde:	4b95      	ldr	r3, [pc, #596]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006de0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de8:	4053      	eors	r3, r2
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d013      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006df2:	4b90      	ldr	r3, [pc, #576]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dfc:	4b8d      	ldr	r3, [pc, #564]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	4a8c      	ldr	r2, [pc, #560]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e08:	4b8a      	ldr	r3, [pc, #552]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	4a89      	ldr	r2, [pc, #548]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e14:	4a87      	ldr	r2, [pc, #540]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e24:	d115      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e26:	f7fb fca9 	bl	800277c <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e2c:	e00b      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e2e:	f7fb fca5 	bl	800277c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d902      	bls.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	75fb      	strb	r3, [r7, #23]
            break;
 8006e44:	e005      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e46:	4b7b      	ldr	r3, [pc, #492]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0ed      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d126      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e66:	d10d      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006e68:	4b72      	ldr	r3, [pc, #456]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e76:	0919      	lsrs	r1, r3, #4
 8006e78:	4b70      	ldr	r3, [pc, #448]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	496d      	ldr	r1, [pc, #436]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	610b      	str	r3, [r1, #16]
 8006e82:	e005      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006e84:	4b6b      	ldr	r3, [pc, #428]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	4a6a      	ldr	r2, [pc, #424]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e8e:	6113      	str	r3, [r2, #16]
 8006e90:	4b68      	ldr	r3, [pc, #416]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9e:	4965      	ldr	r1, [pc, #404]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	670b      	str	r3, [r1, #112]	; 0x70
 8006ea4:	e004      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	75bb      	strb	r3, [r7, #22]
 8006eaa:	e001      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d07e      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec0:	2b28      	cmp	r3, #40	; 0x28
 8006ec2:	d867      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006f9b 	.word	0x08006f9b
 8006ed0:	08006f95 	.word	0x08006f95
 8006ed4:	08006f95 	.word	0x08006f95
 8006ed8:	08006f95 	.word	0x08006f95
 8006edc:	08006f95 	.word	0x08006f95
 8006ee0:	08006f95 	.word	0x08006f95
 8006ee4:	08006f95 	.word	0x08006f95
 8006ee8:	08006f95 	.word	0x08006f95
 8006eec:	08006f71 	.word	0x08006f71
 8006ef0:	08006f95 	.word	0x08006f95
 8006ef4:	08006f95 	.word	0x08006f95
 8006ef8:	08006f95 	.word	0x08006f95
 8006efc:	08006f95 	.word	0x08006f95
 8006f00:	08006f95 	.word	0x08006f95
 8006f04:	08006f95 	.word	0x08006f95
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006f83 	.word	0x08006f83
 8006f10:	08006f95 	.word	0x08006f95
 8006f14:	08006f95 	.word	0x08006f95
 8006f18:	08006f95 	.word	0x08006f95
 8006f1c:	08006f95 	.word	0x08006f95
 8006f20:	08006f95 	.word	0x08006f95
 8006f24:	08006f95 	.word	0x08006f95
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08006f9b 	.word	0x08006f9b
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	08006f95 	.word	0x08006f95
 8006f38:	08006f95 	.word	0x08006f95
 8006f3c:	08006f95 	.word	0x08006f95
 8006f40:	08006f95 	.word	0x08006f95
 8006f44:	08006f95 	.word	0x08006f95
 8006f48:	08006f95 	.word	0x08006f95
 8006f4c:	08006f9b 	.word	0x08006f9b
 8006f50:	08006f95 	.word	0x08006f95
 8006f54:	08006f95 	.word	0x08006f95
 8006f58:	08006f95 	.word	0x08006f95
 8006f5c:	08006f95 	.word	0x08006f95
 8006f60:	08006f95 	.word	0x08006f95
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	08006f9b 	.word	0x08006f9b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	2101      	movs	r1, #1
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fdf4 	bl	8007b64 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f80:	e00c      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2101      	movs	r1, #1
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fe9d 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f92:	e003      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]
      break;
 8006f98:	e000      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fae:	4921      	ldr	r1, [pc, #132]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	654b      	str	r3, [r1, #84]	; 0x54
 8006fb4:	e001      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03e      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d820      	bhi.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007017 	.word	0x08007017
 8006fd8:	08006fed 	.word	0x08006fed
 8006fdc:	08006fff 	.word	0x08006fff
 8006fe0:	08007017 	.word	0x08007017
 8006fe4:	08007017 	.word	0x08007017
 8006fe8:	08007017 	.word	0x08007017
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fdb6 	bl	8007b64 <RCCEx_PLL2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ffc:	e00c      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	2101      	movs	r1, #1
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fe5f 	bl	8007cc8 <RCCEx_PLL3_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800700e:	e003      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
      break;
 8007014:	e000      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d110      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	f023 0207 	bic.w	r2, r3, #7
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	4902      	ldr	r1, [pc, #8]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	654b      	str	r3, [r1, #84]	; 0x54
 8007030:	e008      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007032:	bf00      	nop
 8007034:	58024400 	.word	0x58024400
 8007038:	58024800 	.word	0x58024800
 800703c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d039      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007056:	2b05      	cmp	r3, #5
 8007058:	d820      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	080070a3 	.word	0x080070a3
 8007064:	08007079 	.word	0x08007079
 8007068:	0800708b 	.word	0x0800708b
 800706c:	080070a3 	.word	0x080070a3
 8007070:	080070a3 	.word	0x080070a3
 8007074:	080070a3 	.word	0x080070a3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	2101      	movs	r1, #1
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fd70 	bl	8007b64 <RCCEx_PLL2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007088:	e00c      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3324      	adds	r3, #36	; 0x24
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fe19 	bl	8007cc8 <RCCEx_PLL3_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800709a:	e003      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
      break;
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80070a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070aa:	4bb7      	ldr	r3, [pc, #732]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	f023 0207 	bic.w	r2, r3, #7
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	49b3      	ldr	r1, [pc, #716]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	658b      	str	r3, [r1, #88]	; 0x58
 80070be:	e001      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d04b      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070da:	d02e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80070dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070e0:	d828      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80070e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e6:	d02a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d822      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80070ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f2:	d026      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80070f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f8:	d81c      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80070fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070fe:	d010      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007104:	d816      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01d      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800710a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710e:	d111      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fd24 	bl	8007b64 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007120:	e012      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3324      	adds	r3, #36	; 0x24
 8007126:	2102      	movs	r1, #2
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fdcd 	bl	8007cc8 <RCCEx_PLL3_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007132:	e009      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800713a:	bf00      	nop
 800713c:	e004      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800714e:	4b8e      	ldr	r3, [pc, #568]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715c:	498a      	ldr	r1, [pc, #552]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800715e:	4313      	orrs	r3, r2
 8007160:	654b      	str	r3, [r1, #84]	; 0x54
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d04b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800717a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800717e:	d02e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007180:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007184:	d828      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	d02a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d822      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007196:	d026      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800719c:	d81c      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800719e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a2:	d010      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a8:	d816      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01d      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b2:	d111      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fcd2 	bl	8007b64 <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80071c4:	e012      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fd7b 	bl	8007cc8 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80071d6:	e009      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80071ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071f2:	4b65      	ldr	r3, [pc, #404]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007200:	4961      	ldr	r1, [pc, #388]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007202:	4313      	orrs	r3, r2
 8007204:	658b      	str	r3, [r1, #88]	; 0x58
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d04b      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800721e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007222:	d02e      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007224:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007228:	d828      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800722a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722e:	d02a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007234:	d822      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007236:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800723a:	d026      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800723c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007240:	d81c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007246:	d010      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724c:	d816      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01d      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d111      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fc80 	bl	8007b64 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007268:	e012      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3324      	adds	r3, #36	; 0x24
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fd29 	bl	8007cc8 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800727a:	e009      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007282:	bf00      	nop
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800728e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007296:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072a4:	4938      	ldr	r1, [pc, #224]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	658b      	str	r3, [r1, #88]	; 0x58
 80072aa:	e001      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01a      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c6:	d10a      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3324      	adds	r3, #36	; 0x24
 80072cc:	2102      	movs	r1, #2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fcfa 	bl	8007cc8 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80072de:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ec:	4926      	ldr	r1, [pc, #152]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01a      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007308:	d10a      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3324      	adds	r3, #36	; 0x24
 800730e:	2102      	movs	r1, #2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fcd9 	bl	8007cc8 <RCCEx_PLL3_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800732e:	4916      	ldr	r1, [pc, #88]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007330:	4313      	orrs	r3, r2
 8007332:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d036      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734a:	d01f      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800734c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007350:	d817      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735a:	d009      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800735c:	e011      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fbfd 	bl	8007b64 <RCCEx_PLL2_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800736e:	e00e      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fca6 	bl	8007cc8 <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007380:	e005      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]
      break;
 8007386:	e002      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007388:	58024400 	.word	0x58024400
      break;
 800738c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007394:	4b93      	ldr	r3, [pc, #588]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073a2:	4990      	ldr	r1, [pc, #576]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	658b      	str	r3, [r1, #88]	; 0x58
 80073a8:	e001      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d033      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073c4:	d01c      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80073c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073ca:	d816      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80073cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d0:	d003      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80073d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073d6:	d007      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80073d8:	e00f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073da:	4b82      	ldr	r3, [pc, #520]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a81      	ldr	r2, [pc, #516]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80073e6:	e00c      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3324      	adds	r3, #36	; 0x24
 80073ec:	2101      	movs	r1, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fc6a 	bl	8007cc8 <RCCEx_PLL3_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
      break;
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007408:	4b76      	ldr	r3, [pc, #472]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007416:	4973      	ldr	r1, [pc, #460]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007418:	4313      	orrs	r3, r2
 800741a:	654b      	str	r3, [r1, #84]	; 0x54
 800741c:	e001      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d029      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743a:	d007      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800743c:	e00f      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743e:	4b69      	ldr	r3, [pc, #420]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	4a68      	ldr	r2, [pc, #416]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800744a:	e00b      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2102      	movs	r1, #2
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb86 	bl	8007b64 <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
      break;
 8007462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800746a:	4b5e      	ldr	r3, [pc, #376]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	495b      	ldr	r1, [pc, #364]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007478:	4313      	orrs	r3, r2
 800747a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800747c:	e001      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	; 0x24
 8007492:	2102      	movs	r1, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fc17 	bl	8007cc8 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d030      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074b8:	d017      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80074ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074be:	d811      	bhi.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80074c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c4:	d013      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80074c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ca:	d80b      	bhi.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d010      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80074d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d4:	d106      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d6:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	4a42      	ldr	r2, [pc, #264]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80074e2:	e007      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	e004      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80074ea:	bf00      	nop
 80074ec:	e002      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80074ee:	bf00      	nop
 80074f0:	e000      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80074f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074fa:	4b3a      	ldr	r3, [pc, #232]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007506:	4937      	ldr	r1, [pc, #220]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	654b      	str	r3, [r1, #84]	; 0x54
 800750c:	e001      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800751e:	4b31      	ldr	r3, [pc, #196]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	492e      	ldr	r1, [pc, #184]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800753c:	4b29      	ldr	r3, [pc, #164]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754a:	4926      	ldr	r1, [pc, #152]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800754c:	4313      	orrs	r3, r2
 800754e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800755c:	4b21      	ldr	r3, [pc, #132]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800755e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007568:	491e      	ldr	r1, [pc, #120]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800756a:	4313      	orrs	r3, r2
 800756c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007580:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007584:	6113      	str	r3, [r2, #16]
 8007586:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007590:	4914      	ldr	r1, [pc, #80]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	da08      	bge.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	490e      	ldr	r1, [pc, #56]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ca:	4906      	ldr	r1, [pc, #24]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80075d0:	7dbb      	ldrb	r3, [r7, #22]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	e000      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	58024400 	.word	0x58024400

080075e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075ec:	f7ff f860 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	4904      	ldr	r1, [pc, #16]	; (8007610 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075fe:	5ccb      	ldrb	r3, [r1, r3]
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007608:	4618      	mov	r0, r3
 800760a:	bd80      	pop	{r7, pc}
 800760c:	58024400 	.word	0x58024400
 8007610:	0800ab38 	.word	0x0800ab38

08007614 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800761c:	4ba1      	ldr	r3, [pc, #644]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007626:	4b9f      	ldr	r3, [pc, #636]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	0b1b      	lsrs	r3, r3, #12
 800762c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007630:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007632:	4b9c      	ldr	r3, [pc, #624]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	091b      	lsrs	r3, r3, #4
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800763e:	4b99      	ldr	r3, [pc, #612]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007642:	08db      	lsrs	r3, r3, #3
 8007644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8111 	beq.w	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b02      	cmp	r3, #2
 8007666:	f000 8083 	beq.w	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b02      	cmp	r3, #2
 800766e:	f200 80a1 	bhi.w	80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d056      	beq.n	800772c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800767e:	e099      	b.n	80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007680:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02d      	beq.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768c:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	4a84      	ldr	r2, [pc, #528]	; (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b7b      	ldr	r3, [pc, #492]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076e6:	e087      	b.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b6a      	ldr	r3, [pc, #424]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a03 	vldr	s12, [r7, #12]
 800770e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800772a:	e065      	b.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b59      	ldr	r3, [pc, #356]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007752:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800776e:	e043      	b.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b48      	ldr	r3, [pc, #288]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b2:	e021      	b.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b37      	ldr	r3, [pc, #220]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077f8:	4b2a      	ldr	r3, [pc, #168]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	0a5b      	lsrs	r3, r3, #9
 80077fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007812:	edd7 6a07 	vldr	s13, [r7, #28]
 8007816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781e:	ee17 2a90 	vmov	r2, s15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007826:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	0c1b      	lsrs	r3, r3, #16
 800782c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007840:	edd7 6a07 	vldr	s13, [r7, #28]
 8007844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784c:	ee17 2a90 	vmov	r2, s15
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007854:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	0e1b      	lsrs	r3, r3, #24
 800785a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787a:	ee17 2a90 	vmov	r2, s15
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007882:	e008      	b.n	8007896 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
}
 8007896:	bf00      	nop
 8007898:	3724      	adds	r7, #36	; 0x24
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
 80078a8:	03d09000 	.word	0x03d09000
 80078ac:	46000000 	.word	0x46000000
 80078b0:	4c742400 	.word	0x4c742400
 80078b4:	4a742400 	.word	0x4a742400
 80078b8:	4af42400 	.word	0x4af42400

080078bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	; 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c4:	4ba1      	ldr	r3, [pc, #644]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078ce:	4b9f      	ldr	r3, [pc, #636]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	0d1b      	lsrs	r3, r3, #20
 80078d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078da:	4b9c      	ldr	r3, [pc, #624]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078e6:	4b99      	ldr	r3, [pc, #612]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8111 	beq.w	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	f000 8083 	beq.w	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b02      	cmp	r3, #2
 8007916:	f200 80a1 	bhi.w	8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d056      	beq.n	80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007926:	e099      	b.n	8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007928:	4b88      	ldr	r3, [pc, #544]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02d      	beq.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007934:	4b85      	ldr	r3, [pc, #532]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	08db      	lsrs	r3, r3, #3
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	4a84      	ldr	r2, [pc, #528]	; (8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800798e:	e087      	b.n	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a2:	4b6a      	ldr	r3, [pc, #424]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d2:	e065      	b.n	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a16:	e043      	b.n	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b48      	ldr	r3, [pc, #288]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a5a:	e021      	b.n	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007aa0:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	0a5b      	lsrs	r3, r3, #9
 8007aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac6:	ee17 2a90 	vmov	r2, s15
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ace:	4b1f      	ldr	r3, [pc, #124]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af4:	ee17 2a90 	vmov	r2, s15
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007afc:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	0e1b      	lsrs	r3, r3, #24
 8007b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b22:	ee17 2a90 	vmov	r2, s15
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b2a:	e008      	b.n	8007b3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	609a      	str	r2, [r3, #8]
}
 8007b3e:	bf00      	nop
 8007b40:	3724      	adds	r7, #36	; 0x24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	03d09000 	.word	0x03d09000
 8007b54:	46000000 	.word	0x46000000
 8007b58:	4c742400 	.word	0x4c742400
 8007b5c:	4a742400 	.word	0x4a742400
 8007b60:	4af42400 	.word	0x4af42400

08007b64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b72:	4b53      	ldr	r3, [pc, #332]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d101      	bne.n	8007b82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e099      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b82:	4b4f      	ldr	r3, [pc, #316]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a4e      	ldr	r2, [pc, #312]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8e:	f7fa fdf5 	bl	800277c <HAL_GetTick>
 8007b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b94:	e008      	b.n	8007ba8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b96:	f7fa fdf1 	bl	800277c <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e086      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ba8:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f0      	bne.n	8007b96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bb4:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	493f      	ldr	r1, [pc, #252]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	061b      	lsls	r3, r3, #24
 8007bf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bf8:	4931      	ldr	r1, [pc, #196]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bfe:	4b30      	ldr	r3, [pc, #192]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	492d      	ldr	r1, [pc, #180]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	f023 0220 	bic.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	4928      	ldr	r1, [pc, #160]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c22:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a26      	ldr	r2, [pc, #152]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	f023 0310 	bic.w	r3, r3, #16
 8007c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <RCCEx_PLL2_Config+0x160>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	69d2      	ldr	r2, [r2, #28]
 8007c3a:	00d2      	lsls	r2, r2, #3
 8007c3c:	4920      	ldr	r1, [pc, #128]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	f043 0310 	orr.w	r3, r3, #16
 8007c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c60:	e00f      	b.n	8007c82 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d106      	bne.n	8007c76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c74:	e005      	b.n	8007c82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c76:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a0e      	ldr	r2, [pc, #56]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7fa fd75 	bl	800277c <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c96:	f7fa fd71 	bl	800277c <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e006      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f0      	beq.n	8007c96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	ffff0007 	.word	0xffff0007

08007cc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd6:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d101      	bne.n	8007ce6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e099      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ce6:	4b4f      	ldr	r3, [pc, #316]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4e      	ldr	r2, [pc, #312]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf2:	f7fa fd43 	bl	800277c <HAL_GetTick>
 8007cf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cf8:	e008      	b.n	8007d0c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cfa:	f7fa fd3f 	bl	800277c <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e086      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d0c:	4b45      	ldr	r3, [pc, #276]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f0      	bne.n	8007cfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d18:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	051b      	lsls	r3, r3, #20
 8007d26:	493f      	ldr	r1, [pc, #252]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	025b      	lsls	r3, r3, #9
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d5c:	4931      	ldr	r1, [pc, #196]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d62:	4b30      	ldr	r3, [pc, #192]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	492d      	ldr	r1, [pc, #180]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d74:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	4928      	ldr	r1, [pc, #160]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d86:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4a26      	ldr	r2, [pc, #152]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d96:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <RCCEx_PLL3_Config+0x160>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	69d2      	ldr	r2, [r2, #28]
 8007d9e:	00d2      	lsls	r2, r2, #3
 8007da0:	4920      	ldr	r1, [pc, #128]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007da6:	4b1f      	ldr	r3, [pc, #124]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007db8:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dc4:	e00f      	b.n	8007de6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d106      	bne.n	8007dda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dcc:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a14      	ldr	r2, [pc, #80]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dd8:	e005      	b.n	8007de6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a0e      	ldr	r2, [pc, #56]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df2:	f7fa fcc3 	bl	800277c <HAL_GetTick>
 8007df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007df8:	e008      	b.n	8007e0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dfa:	f7fa fcbf 	bl	800277c <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e006      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	58024400 	.word	0x58024400
 8007e28:	ffff0007 	.word	0xffff0007

08007e2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e0f1      	b.n	8008022 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a78      	ldr	r2, [pc, #480]	; (800802c <HAL_SPI_Init+0x200>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00f      	beq.n	8007e6e <HAL_SPI_Init+0x42>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a77      	ldr	r2, [pc, #476]	; (8008030 <HAL_SPI_Init+0x204>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00a      	beq.n	8007e6e <HAL_SPI_Init+0x42>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a75      	ldr	r2, [pc, #468]	; (8008034 <HAL_SPI_Init+0x208>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d005      	beq.n	8007e6e <HAL_SPI_Init+0x42>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d901      	bls.n	8007e6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e0d9      	b.n	8008022 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 faa2 	bl	80093b8 <SPI_GetPacketSize>
 8007e74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a6c      	ldr	r2, [pc, #432]	; (800802c <HAL_SPI_Init+0x200>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00c      	beq.n	8007e9a <HAL_SPI_Init+0x6e>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a6a      	ldr	r2, [pc, #424]	; (8008030 <HAL_SPI_Init+0x204>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <HAL_SPI_Init+0x6e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a69      	ldr	r2, [pc, #420]	; (8008034 <HAL_SPI_Init+0x208>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d002      	beq.n	8007e9a <HAL_SPI_Init+0x6e>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d811      	bhi.n	8007ebe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e9e:	4a63      	ldr	r2, [pc, #396]	; (800802c <HAL_SPI_Init+0x200>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d009      	beq.n	8007eb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a61      	ldr	r2, [pc, #388]	; (8008030 <HAL_SPI_Init+0x204>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d004      	beq.n	8007eb8 <HAL_SPI_Init+0x8c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a60      	ldr	r2, [pc, #384]	; (8008034 <HAL_SPI_Init+0x208>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d104      	bne.n	8007ec2 <HAL_SPI_Init+0x96>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d901      	bls.n	8007ec2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e0af      	b.n	8008022 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fa f8b2 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007efe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f08:	d119      	bne.n	8007f3e <HAL_SPI_Init+0x112>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f12:	d103      	bne.n	8007f1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10c      	bne.n	8007f3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f2c:	d107      	bne.n	8007f3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f50:	ea42 0103 	orr.w	r1, r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f9e:	ea42 0103 	orr.w	r1, r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d113      	bne.n	8007fde <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fc8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fdc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40013000 	.word	0x40013000
 8008030:	40003800 	.word	0x40003800
 8008034:	40003c00 	.word	0x40003c00

08008038 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3320      	adds	r3, #32
 800804e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_SPI_Transmit+0x2a>
 800805e:	2302      	movs	r3, #2
 8008060:	e1d7      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800806a:	f7fa fb87 	bl	800277c <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	d007      	beq.n	800808c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800807c:	2302      	movs	r3, #2
 800807e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008088:	7efb      	ldrb	r3, [r7, #27]
 800808a:	e1c2      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_SPI_Transmit+0x60>
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d107      	bne.n	80080a8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80080a4:	7efb      	ldrb	r3, [r7, #27]
 80080a6:	e1b4      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2203      	movs	r2, #3
 80080ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	88fa      	ldrh	r2, [r7, #6]
 80080c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	88fa      	ldrh	r2, [r7, #6]
 80080ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80080f8:	d107      	bne.n	800810a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008108:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b96      	ldr	r3, [pc, #600]	; (800836c <HAL_SPI_Transmit+0x334>)
 8008112:	4013      	ands	r3, r2
 8008114:	88f9      	ldrh	r1, [r7, #6]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	430b      	orrs	r3, r1
 800811c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008136:	d107      	bne.n	8008148 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b0f      	cmp	r3, #15
 800814e:	d947      	bls.n	80081e0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008150:	e03f      	b.n	80081d2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d114      	bne.n	800818a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008170:	1d1a      	adds	r2, r3, #4
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008188:	e023      	b.n	80081d2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800818a:	f7fa faf7 	bl	800277c <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d803      	bhi.n	80081a2 <HAL_SPI_Transmit+0x16a>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d102      	bne.n	80081a8 <HAL_SPI_Transmit+0x170>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d114      	bne.n	80081d2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f001 f837 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e11f      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1b9      	bne.n	8008152 <HAL_SPI_Transmit+0x11a>
 80081de:	e0f2      	b.n	80083c6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b07      	cmp	r3, #7
 80081e6:	f240 80e7 	bls.w	80083b8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80081ea:	e05d      	b.n	80082a8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d132      	bne.n	8008260 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b01      	cmp	r3, #1
 8008204:	d918      	bls.n	8008238 <HAL_SPI_Transmit+0x200>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d014      	beq.n	8008238 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800822a:	b29b      	uxth	r3, r3
 800822c:	3b02      	subs	r3, #2
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008236:	e037      	b.n	80082a8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823c:	881a      	ldrh	r2, [r3, #0]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008246:	1c9a      	adds	r2, r3, #2
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800825e:	e023      	b.n	80082a8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008260:	f7fa fa8c 	bl	800277c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d803      	bhi.n	8008278 <HAL_SPI_Transmit+0x240>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d102      	bne.n	800827e <HAL_SPI_Transmit+0x246>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d114      	bne.n	80082a8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 ffcc 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e0b4      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d19b      	bne.n	80081ec <HAL_SPI_Transmit+0x1b4>
 80082b4:	e087      	b.n	80083c6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d155      	bne.n	8008370 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d918      	bls.n	8008302 <HAL_SPI_Transmit+0x2ca>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	d914      	bls.n	8008302 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e8:	1d1a      	adds	r2, r3, #4
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b04      	subs	r3, #4
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008300:	e05a      	b.n	80083b8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d917      	bls.n	800833e <HAL_SPI_Transmit+0x306>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d013      	beq.n	800833e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	881a      	ldrh	r2, [r3, #0]
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008324:	1c9a      	adds	r2, r3, #2
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b02      	subs	r3, #2
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800833c:	e03c      	b.n	80083b8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3320      	adds	r3, #32
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008368:	e026      	b.n	80083b8 <HAL_SPI_Transmit+0x380>
 800836a:	bf00      	nop
 800836c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008370:	f7fa fa04 	bl	800277c <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d803      	bhi.n	8008388 <HAL_SPI_Transmit+0x350>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d102      	bne.n	800838e <HAL_SPI_Transmit+0x356>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d114      	bne.n	80083b8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 ff44 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e02c      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af78 	bne.w	80082b6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2200      	movs	r2, #0
 80083ce:	2108      	movs	r1, #8
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 ffc3 	bl	800935c <SPI_WaitOnFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	f043 0220 	orr.w	r2, r3, #32
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 ff15 	bl	800921c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008410:	7efb      	ldrb	r3, [r7, #27]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop

0800841c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3330      	adds	r3, #48	; 0x30
 8008436:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008440:	d112      	bne.n	8008468 <HAL_SPI_Receive+0x4c>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10e      	bne.n	8008468 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2204      	movs	r2, #4
 800844e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f9ce 	bl	8008800 <HAL_SPI_TransmitReceive>
 8008464:	4603      	mov	r3, r0
 8008466:	e1c7      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_SPI_Receive+0x5a>
 8008472:	2302      	movs	r3, #2
 8008474:	e1c0      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800847e:	f7fa f97d 	bl	800277c <HAL_GetTick>
 8008482:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	d007      	beq.n	80084a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008490:	2302      	movs	r3, #2
 8008492:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800849c:	7ffb      	ldrb	r3, [r7, #31]
 800849e:	e1ab      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <HAL_SPI_Receive+0x90>
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80084b8:	7ffb      	ldrb	r3, [r7, #31]
 80084ba:	e19d      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2204      	movs	r2, #4
 80084c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	88fa      	ldrh	r2, [r7, #6]
 80084d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800850c:	d107      	bne.n	800851e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800851c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	4b94      	ldr	r3, [pc, #592]	; (8008778 <HAL_SPI_Receive+0x35c>)
 8008526:	4013      	ands	r3, r2
 8008528:	88f9      	ldrh	r1, [r7, #6]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	430b      	orrs	r3, r1
 8008530:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0201 	orr.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854a:	d107      	bne.n	800855c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800855a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b0f      	cmp	r3, #15
 8008562:	d948      	bls.n	80085f6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008564:	e040      	b.n	80085e8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008570:	4013      	ands	r3, r2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d014      	beq.n	80085a0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008580:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800859e:	e023      	b.n	80085e8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085a0:	f7fa f8ec 	bl	800277c <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d803      	bhi.n	80085b8 <HAL_SPI_Receive+0x19c>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b6:	d102      	bne.n	80085be <HAL_SPI_Receive+0x1a2>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d114      	bne.n	80085e8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fe2c 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e107      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1b8      	bne.n	8008566 <HAL_SPI_Receive+0x14a>
 80085f4:	e0ed      	b.n	80087d2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b07      	cmp	r3, #7
 80085fc:	f240 80e2 	bls.w	80087c4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008600:	e05b      	b.n	80086ba <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d030      	beq.n	8008672 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008626:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008628:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b02      	subs	r3, #2
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008646:	e038      	b.n	80086ba <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	8812      	ldrh	r2, [r2, #0]
 8008650:	b292      	uxth	r2, r2
 8008652:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008670:	e023      	b.n	80086ba <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008672:	f7fa f883 	bl	800277c <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d803      	bhi.n	800868a <HAL_SPI_Receive+0x26e>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d102      	bne.n	8008690 <HAL_SPI_Receive+0x274>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d114      	bne.n	80086ba <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 fdc3 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e09e      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d19d      	bne.n	8008602 <HAL_SPI_Receive+0x1e6>
 80086c6:	e084      	b.n	80087d2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d052      	beq.n	800877c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d014      	beq.n	800870e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086ee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f4:	1d1a      	adds	r2, r3, #4
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b04      	subs	r3, #4
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800870c:	e05a      	b.n	80087c4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871c:	d914      	bls.n	8008748 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	8812      	ldrh	r2, [r2, #0]
 8008726:	b292      	uxth	r2, r2
 8008728:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872e:	1c9a      	adds	r2, r3, #2
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b02      	subs	r3, #2
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008746:	e03d      	b.n	80087c4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800876a:	b29b      	uxth	r3, r3
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008776:	e025      	b.n	80087c4 <HAL_SPI_Receive+0x3a8>
 8008778:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800877c:	f7f9 fffe 	bl	800277c <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d803      	bhi.n	8008794 <HAL_SPI_Receive+0x378>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d102      	bne.n	800879a <HAL_SPI_Receive+0x37e>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d114      	bne.n	80087c4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fd3e 	bl	800921c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e019      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f af7b 	bne.w	80086c8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fd22 	bl	800921c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80087f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3320      	adds	r3, #32
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3330      	adds	r3, #48	; 0x30
 8008822:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x32>
 800882e:	2302      	movs	r3, #2
 8008830:	e2ce      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800883a:	f7f9 ff9f 	bl	800277c <HAL_GetTick>
 800883e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008840:	887b      	ldrh	r3, [r7, #2]
 8008842:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008844:	887b      	ldrh	r3, [r7, #2]
 8008846:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800884e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008856:	7efb      	ldrb	r3, [r7, #27]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d014      	beq.n	8008886 <HAL_SPI_TransmitReceive+0x86>
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008862:	d106      	bne.n	8008872 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800886c:	7efb      	ldrb	r3, [r7, #27]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d009      	beq.n	8008886 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008872:	2302      	movs	r3, #2
 8008874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008884:	e2a4      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <HAL_SPI_TransmitReceive+0x98>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_SPI_TransmitReceive+0x98>
 8008892:	887b      	ldrh	r3, [r7, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088aa:	e291      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d003      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2205      	movs	r2, #5
 80088bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	887a      	ldrh	r2, [r7, #2]
 80088d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	887a      	ldrh	r2, [r7, #2]
 80088da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	887a      	ldrh	r2, [r7, #2]
 80088e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	887a      	ldrh	r2, [r7, #2]
 80088f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4b9f      	ldr	r3, [pc, #636]	; (8008b84 <HAL_SPI_TransmitReceive+0x384>)
 8008908:	4013      	ands	r3, r2
 800890a:	8879      	ldrh	r1, [r7, #2]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	6812      	ldr	r2, [r2, #0]
 8008910:	430b      	orrs	r3, r1
 8008912:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800892c:	d107      	bne.n	800893e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	2b0f      	cmp	r3, #15
 8008944:	d970      	bls.n	8008a28 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008946:	e068      	b.n	8008a1a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d11a      	bne.n	800898c <HAL_SPI_TransmitReceive+0x18c>
 8008956:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008958:	2b00      	cmp	r3, #0
 800895a:	d017      	beq.n	800898c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800898a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	f248 0308 	movw	r3, #32776	; 0x8008
 8008996:	4013      	ands	r3, r2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01a      	beq.n	80089d2 <HAL_SPI_TransmitReceive+0x1d2>
 800899c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b2:	1d1a      	adds	r2, r3, #4
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089d2:	f7f9 fed3 	bl	800277c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089de:	429a      	cmp	r2, r3
 80089e0:	d803      	bhi.n	80089ea <HAL_SPI_TransmitReceive+0x1ea>
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d102      	bne.n	80089f0 <HAL_SPI_TransmitReceive+0x1f0>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d114      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fc13 	bl	800921c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e1da      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d193      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x148>
 8008a20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d190      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x148>
 8008a26:	e1ac      	b.n	8008d82 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	2b07      	cmp	r3, #7
 8008a2e:	f240 81a0 	bls.w	8008d72 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a32:	e0a9      	b.n	8008b88 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d139      	bne.n	8008ab6 <HAL_SPI_TransmitReceive+0x2b6>
 8008a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d036      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d91c      	bls.n	8008a88 <HAL_SPI_TransmitReceive+0x288>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d018      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6812      	ldr	r2, [r2, #0]
 8008a60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b02      	subs	r3, #2
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008a86:	e016      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8c:	881a      	ldrh	r2, [r3, #0]
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d03a      	beq.n	8008b3a <HAL_SPI_TransmitReceive+0x33a>
 8008ac4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d037      	beq.n	8008b3a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d018      	beq.n	8008b0a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ae2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae8:	1d1a      	adds	r2, r3, #4
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b02      	subs	r3, #2
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008b08:	e017      	b.n	8008b3a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0e:	6a3a      	ldr	r2, [r7, #32]
 8008b10:	8812      	ldrh	r2, [r2, #0]
 8008b12:	b292      	uxth	r2, r2
 8008b14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b1a:	1c9a      	adds	r2, r3, #2
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b38:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b3a:	f7f9 fe1f 	bl	800277c <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d803      	bhi.n	8008b52 <HAL_SPI_TransmitReceive+0x352>
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d102      	bne.n	8008b58 <HAL_SPI_TransmitReceive+0x358>
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d117      	bne.n	8008b88 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fb5f 	bl	800921c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e126      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
 8008b82:	bf00      	nop
 8008b84:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f47f af52 	bne.w	8008a34 <HAL_SPI_TransmitReceive+0x234>
 8008b90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f47f af4e 	bne.w	8008a34 <HAL_SPI_TransmitReceive+0x234>
 8008b98:	e0f3      	b.n	8008d82 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d15a      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x45e>
 8008ba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d057      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d91c      	bls.n	8008bee <HAL_SPI_TransmitReceive+0x3ee>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d918      	bls.n	8008bee <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b04      	subs	r3, #4
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008bec:	e037      	b.n	8008c5e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d91b      	bls.n	8008c2c <HAL_SPI_TransmitReceive+0x42c>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d017      	beq.n	8008c2c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c00:	881a      	ldrh	r2, [r3, #0]
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0a:	1c9a      	adds	r2, r3, #2
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c2a:	e018      	b.n	8008c5e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3320      	adds	r3, #32
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d05e      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x52a>
 8008c6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d05b      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d018      	beq.n	8008cb2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c8a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c90:	1d1a      	adds	r2, r3, #4
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008cb0:	e03b      	b.n	8008d2a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc0:	d918      	bls.n	8008cf4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cc6:	6a3a      	ldr	r2, [r7, #32]
 8008cc8:	8812      	ldrh	r2, [r2, #0]
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b02      	subs	r3, #2
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008cf2:	e01a      	b.n	8008d2a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d28:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d2a:	f7f9 fd27 	bl	800277c <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d803      	bhi.n	8008d42 <HAL_SPI_TransmitReceive+0x542>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d102      	bne.n	8008d48 <HAL_SPI_TransmitReceive+0x548>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d114      	bne.n	8008d72 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fa67 	bl	800921c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e02e      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f af10 	bne.w	8008b9a <HAL_SPI_TransmitReceive+0x39a>
 8008d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f47f af0c 	bne.w	8008b9a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2108      	movs	r1, #8
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 fae5 	bl	800935c <SPI_WaitOnFlagUntilTimeout>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fa37 	bl	800921c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e001      	b.n	8008dd0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8008dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3730      	adds	r7, #48	; 0x30
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008df0:	6a3a      	ldr	r2, [r7, #32]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4013      	ands	r3, r2
 8008df6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e0a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3330      	adds	r3, #48	; 0x30
 8008e12:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d113      	bne.n	8008e46 <HAL_SPI_IRQHandler+0x6e>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10e      	bne.n	8008e46 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
    handled = 1UL;
 8008e42:	2301      	movs	r3, #1
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10f      	bne.n	8008e70 <HAL_SPI_IRQHandler+0x98>
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
    handled = 1UL;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_SPI_IRQHandler+0xc2>
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
    handled = 1UL;
 8008e96:	2301      	movs	r3, #1
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 816f 	bne.w	8009180 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 80a0 	beq.w	8008fee <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0208 	orr.w	r2, r2, #8
 8008ebc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699a      	ldr	r2, [r3, #24]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f042 0210 	orr.w	r2, r2, #16
 8008ecc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008edc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0208 	bic.w	r2, r2, #8
 8008eec:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00f      	beq.n	8008f18 <HAL_SPI_IRQHandler+0x140>
 8008ef8:	7cfb      	ldrb	r3, [r7, #19]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d004      	beq.n	8008f08 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <HAL_SPI_IRQHandler+0x140>
 8008f08:	7cfb      	ldrb	r3, [r7, #19]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d059      	beq.n	8008fc2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d154      	bne.n	8008fc2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d13d      	bne.n	8008fa2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8008f26:	e036      	b.n	8008f96 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b0f      	cmp	r3, #15
 8008f2e:	d90b      	bls.n	8008f48 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f3a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	665a      	str	r2, [r3, #100]	; 0x64
 8008f46:	e01d      	b.n	8008f84 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d90b      	bls.n	8008f68 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	8812      	ldrh	r2, [r2, #0]
 8008f58:	b292      	uxth	r2, r2
 8008f5a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f60:	1c9a      	adds	r2, r3, #2
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64
 8008f66:	e00d      	b.n	8008f84 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1c2      	bne.n	8008f28 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f93a 	bl	800921c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f90a 	bl	80091d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008fc0:	e0e3      	b.n	800918a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008fc2:	7cfb      	ldrb	r3, [r7, #19]
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d103      	bne.n	8008fd0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f8f9 	bl	80091c0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008fce:	e0d9      	b.n	8009184 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008fd0:	7cfb      	ldrb	r3, [r7, #19]
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d103      	bne.n	8008fde <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f8e8 	bl	80091ac <HAL_SPI_RxCpltCallback>
    return;
 8008fdc:	e0d2      	b.n	8009184 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008fde:	7cfb      	ldrb	r3, [r7, #19]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	f040 80cf 	bne.w	8009184 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f8d6 	bl	8009198 <HAL_SPI_TxCpltCallback>
    return;
 8008fec:	e0ca      	b.n	8009184 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00d      	beq.n	8009014 <HAL_SPI_IRQHandler+0x23c>
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009010:	619a      	str	r2, [r3, #24]

    return;
 8009012:	e0ba      	b.n	800918a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80b5 	beq.w	800918a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00f      	beq.n	800904a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009030:	f043 0204 	orr.w	r2, r3, #4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009048:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00f      	beq.n	8009074 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800905a:	f043 0201 	orr.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009072:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00f      	beq.n	800909e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	f043 0208 	orr.w	r2, r3, #8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800909c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f003 0320 	and.w	r3, r3, #32
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00f      	beq.n	80090c8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0220 	orr.w	r2, r2, #32
 80090c6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d05a      	beq.n	8009188 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6919      	ldr	r1, [r3, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b28      	ldr	r3, [pc, #160]	; (8009190 <HAL_SPI_IRQHandler+0x3b8>)
 80090ee:	400b      	ands	r3, r1
 80090f0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80090fc:	d138      	bne.n	8009170 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800910c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d013      	beq.n	800913e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800911a:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <HAL_SPI_IRQHandler+0x3bc>)
 800911c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009122:	4618      	mov	r0, r3
 8009124:	f7f9 ffe6 	bl	80030f4 <HAL_DMA_Abort_IT>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800914a:	4a12      	ldr	r2, [pc, #72]	; (8009194 <HAL_SPI_IRQHandler+0x3bc>)
 800914c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009152:	4618      	mov	r0, r3
 8009154:	f7f9 ffce 	bl	80030f4 <HAL_DMA_Abort_IT>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d014      	beq.n	8009188 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800916e:	e00b      	b.n	8009188 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f82b 	bl	80091d4 <HAL_SPI_ErrorCallback>
    return;
 800917e:	e003      	b.n	8009188 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009180:	bf00      	nop
 8009182:	e002      	b.n	800918a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009184:	bf00      	nop
 8009186:	e000      	b.n	800918a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009188:	bf00      	nop
  }
}
 800918a:	3728      	adds	r7, #40	; 0x28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	fffffc94 	.word	0xfffffc94
 8009194:	080091e9 	.word	0x080091e9

08009198 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff ffe0 	bl	80091d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699a      	ldr	r2, [r3, #24]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0208 	orr.w	r2, r2, #8
 800923a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0210 	orr.w	r2, r2, #16
 800924a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0201 	bic.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6919      	ldr	r1, [r3, #16]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b3c      	ldr	r3, [pc, #240]	; (8009358 <SPI_CloseTransfer+0x13c>)
 8009268:	400b      	ands	r3, r1
 800926a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800927a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b04      	cmp	r3, #4
 8009286:	d014      	beq.n	80092b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00f      	beq.n	80092b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009298:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699a      	ldr	r2, [r3, #24]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0220 	orr.w	r2, r2, #32
 80092b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d014      	beq.n	80092e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00f      	beq.n	80092e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ce:	f043 0204 	orr.w	r2, r3, #4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00f      	beq.n	8009312 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f8:	f043 0201 	orr.w	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	699a      	ldr	r2, [r3, #24]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009310:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00f      	beq.n	800933c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009322:	f043 0208 	orr.w	r2, r3, #8
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	fffffc90 	.word	0xfffffc90

0800935c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4613      	mov	r3, r2
 800936a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800936c:	e010      	b.n	8009390 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800936e:	f7f9 fa05 	bl	800277c <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	429a      	cmp	r2, r3
 800937c:	d803      	bhi.n	8009386 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d102      	bne.n	800938c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e00f      	b.n	80093b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	429a      	cmp	r2, r3
 800939e:	bf0c      	ite	eq
 80093a0:	2301      	moveq	r3, #1
 80093a2:	2300      	movne	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d0df      	beq.n	800936e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c4:	095b      	lsrs	r3, r3, #5
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	3307      	adds	r3, #7
 80093d6:	08db      	lsrs	r3, r3, #3
 80093d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	fb02 f303 	mul.w	r3, r2, r3
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e042      	b.n	8009486 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7f8 ffb8 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2224      	movs	r2, #36	; 0x24
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f82d 	bl	8009490 <UART_SetConfig>
 8009436:	4603      	mov	r3, r0
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e022      	b.n	8009486 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fd81 	bl	8009f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800945c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800946c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0201 	orr.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fe08 	bl	800a094 <UART_CheckIdleState>
 8009484:	4603      	mov	r3, r0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009490:	b5b0      	push	{r4, r5, r7, lr}
 8009492:	b08e      	sub	sp, #56	; 0x38
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	431a      	orrs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	4bbf      	ldr	r3, [pc, #764]	; (80097bc <UART_SetConfig+0x32c>)
 80094be:	4013      	ands	r3, r2
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094c6:	430b      	orrs	r3, r1
 80094c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4ab5      	ldr	r2, [pc, #724]	; (80097c0 <UART_SetConfig+0x330>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f6:	4313      	orrs	r3, r2
 80094f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	4bb0      	ldr	r3, [pc, #704]	; (80097c4 <UART_SetConfig+0x334>)
 8009502:	4013      	ands	r3, r2
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800950a:	430b      	orrs	r3, r1
 800950c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	f023 010f 	bic.w	r1, r3, #15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4aa7      	ldr	r2, [pc, #668]	; (80097c8 <UART_SetConfig+0x338>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d176      	bne.n	800961c <UART_SetConfig+0x18c>
 800952e:	4ba7      	ldr	r3, [pc, #668]	; (80097cc <UART_SetConfig+0x33c>)
 8009530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009536:	2b28      	cmp	r3, #40	; 0x28
 8009538:	d86c      	bhi.n	8009614 <UART_SetConfig+0x184>
 800953a:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0xb0>)
 800953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009540:	080095e5 	.word	0x080095e5
 8009544:	08009615 	.word	0x08009615
 8009548:	08009615 	.word	0x08009615
 800954c:	08009615 	.word	0x08009615
 8009550:	08009615 	.word	0x08009615
 8009554:	08009615 	.word	0x08009615
 8009558:	08009615 	.word	0x08009615
 800955c:	08009615 	.word	0x08009615
 8009560:	080095ed 	.word	0x080095ed
 8009564:	08009615 	.word	0x08009615
 8009568:	08009615 	.word	0x08009615
 800956c:	08009615 	.word	0x08009615
 8009570:	08009615 	.word	0x08009615
 8009574:	08009615 	.word	0x08009615
 8009578:	08009615 	.word	0x08009615
 800957c:	08009615 	.word	0x08009615
 8009580:	080095f5 	.word	0x080095f5
 8009584:	08009615 	.word	0x08009615
 8009588:	08009615 	.word	0x08009615
 800958c:	08009615 	.word	0x08009615
 8009590:	08009615 	.word	0x08009615
 8009594:	08009615 	.word	0x08009615
 8009598:	08009615 	.word	0x08009615
 800959c:	08009615 	.word	0x08009615
 80095a0:	080095fd 	.word	0x080095fd
 80095a4:	08009615 	.word	0x08009615
 80095a8:	08009615 	.word	0x08009615
 80095ac:	08009615 	.word	0x08009615
 80095b0:	08009615 	.word	0x08009615
 80095b4:	08009615 	.word	0x08009615
 80095b8:	08009615 	.word	0x08009615
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009605 	.word	0x08009605
 80095c4:	08009615 	.word	0x08009615
 80095c8:	08009615 	.word	0x08009615
 80095cc:	08009615 	.word	0x08009615
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009615 	.word	0x08009615
 80095d8:	08009615 	.word	0x08009615
 80095dc:	08009615 	.word	0x08009615
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e222      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e21e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e21a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e216      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e212      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e20e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e20a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a6b      	ldr	r2, [pc, #428]	; (80097d0 <UART_SetConfig+0x340>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d130      	bne.n	8009688 <UART_SetConfig+0x1f8>
 8009626:	4b69      	ldr	r3, [pc, #420]	; (80097cc <UART_SetConfig+0x33c>)
 8009628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	2b05      	cmp	r3, #5
 8009630:	d826      	bhi.n	8009680 <UART_SetConfig+0x1f0>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <UART_SetConfig+0x1a8>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	08009651 	.word	0x08009651
 800963c:	08009659 	.word	0x08009659
 8009640:	08009661 	.word	0x08009661
 8009644:	08009669 	.word	0x08009669
 8009648:	08009671 	.word	0x08009671
 800964c:	08009679 	.word	0x08009679
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e1ec      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e1e8      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e1e4      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e1e0      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009670:	2320      	movs	r3, #32
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e1dc      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009678:	2340      	movs	r3, #64	; 0x40
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e1d8      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009680:	2380      	movs	r3, #128	; 0x80
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e1d4      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a51      	ldr	r2, [pc, #324]	; (80097d4 <UART_SetConfig+0x344>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d130      	bne.n	80096f4 <UART_SetConfig+0x264>
 8009692:	4b4e      	ldr	r3, [pc, #312]	; (80097cc <UART_SetConfig+0x33c>)
 8009694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b05      	cmp	r3, #5
 800969c:	d826      	bhi.n	80096ec <UART_SetConfig+0x25c>
 800969e:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <UART_SetConfig+0x214>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096cd 	.word	0x080096cd
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e1b6      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096c4:	2304      	movs	r3, #4
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e1b2      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096cc:	2308      	movs	r3, #8
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e1ae      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096d4:	2310      	movs	r3, #16
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e1aa      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096dc:	2320      	movs	r3, #32
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e1a6      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e1a2      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096ec:	2380      	movs	r3, #128	; 0x80
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e19e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a37      	ldr	r2, [pc, #220]	; (80097d8 <UART_SetConfig+0x348>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d130      	bne.n	8009760 <UART_SetConfig+0x2d0>
 80096fe:	4b33      	ldr	r3, [pc, #204]	; (80097cc <UART_SetConfig+0x33c>)
 8009700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b05      	cmp	r3, #5
 8009708:	d826      	bhi.n	8009758 <UART_SetConfig+0x2c8>
 800970a:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <UART_SetConfig+0x280>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	08009729 	.word	0x08009729
 8009714:	08009731 	.word	0x08009731
 8009718:	08009739 	.word	0x08009739
 800971c:	08009741 	.word	0x08009741
 8009720:	08009749 	.word	0x08009749
 8009724:	08009751 	.word	0x08009751
 8009728:	2300      	movs	r3, #0
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e180      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e17c      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e178      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e174      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009748:	2320      	movs	r3, #32
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e170      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009750:	2340      	movs	r3, #64	; 0x40
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e16c      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009758:	2380      	movs	r3, #128	; 0x80
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e168      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1d      	ldr	r2, [pc, #116]	; (80097dc <UART_SetConfig+0x34c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d142      	bne.n	80097f0 <UART_SetConfig+0x360>
 800976a:	4b18      	ldr	r3, [pc, #96]	; (80097cc <UART_SetConfig+0x33c>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	2b05      	cmp	r3, #5
 8009774:	d838      	bhi.n	80097e8 <UART_SetConfig+0x358>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <UART_SetConfig+0x2ec>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	08009795 	.word	0x08009795
 8009780:	0800979d 	.word	0x0800979d
 8009784:	080097a5 	.word	0x080097a5
 8009788:	080097ad 	.word	0x080097ad
 800978c:	080097b5 	.word	0x080097b5
 8009790:	080097e1 	.word	0x080097e1
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979a:	e14a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e146      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e142      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e13e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097b4:	2320      	movs	r3, #32
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e13a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097bc:	cfff69f3 	.word	0xcfff69f3
 80097c0:	58000c00 	.word	0x58000c00
 80097c4:	11fff4ff 	.word	0x11fff4ff
 80097c8:	40011000 	.word	0x40011000
 80097cc:	58024400 	.word	0x58024400
 80097d0:	40004400 	.word	0x40004400
 80097d4:	40004800 	.word	0x40004800
 80097d8:	40004c00 	.word	0x40004c00
 80097dc:	40005000 	.word	0x40005000
 80097e0:	2340      	movs	r3, #64	; 0x40
 80097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e6:	e124      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097e8:	2380      	movs	r3, #128	; 0x80
 80097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ee:	e120      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4acc      	ldr	r2, [pc, #816]	; (8009b28 <UART_SetConfig+0x698>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d176      	bne.n	80098e8 <UART_SetConfig+0x458>
 80097fa:	4bcc      	ldr	r3, [pc, #816]	; (8009b2c <UART_SetConfig+0x69c>)
 80097fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009802:	2b28      	cmp	r3, #40	; 0x28
 8009804:	d86c      	bhi.n	80098e0 <UART_SetConfig+0x450>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <UART_SetConfig+0x37c>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	080098b1 	.word	0x080098b1
 8009810:	080098e1 	.word	0x080098e1
 8009814:	080098e1 	.word	0x080098e1
 8009818:	080098e1 	.word	0x080098e1
 800981c:	080098e1 	.word	0x080098e1
 8009820:	080098e1 	.word	0x080098e1
 8009824:	080098e1 	.word	0x080098e1
 8009828:	080098e1 	.word	0x080098e1
 800982c:	080098b9 	.word	0x080098b9
 8009830:	080098e1 	.word	0x080098e1
 8009834:	080098e1 	.word	0x080098e1
 8009838:	080098e1 	.word	0x080098e1
 800983c:	080098e1 	.word	0x080098e1
 8009840:	080098e1 	.word	0x080098e1
 8009844:	080098e1 	.word	0x080098e1
 8009848:	080098e1 	.word	0x080098e1
 800984c:	080098c1 	.word	0x080098c1
 8009850:	080098e1 	.word	0x080098e1
 8009854:	080098e1 	.word	0x080098e1
 8009858:	080098e1 	.word	0x080098e1
 800985c:	080098e1 	.word	0x080098e1
 8009860:	080098e1 	.word	0x080098e1
 8009864:	080098e1 	.word	0x080098e1
 8009868:	080098e1 	.word	0x080098e1
 800986c:	080098c9 	.word	0x080098c9
 8009870:	080098e1 	.word	0x080098e1
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080098e1 	.word	0x080098e1
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098e1 	.word	0x080098e1
 8009884:	080098e1 	.word	0x080098e1
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098e1 	.word	0x080098e1
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e1 	.word	0x080098e1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098e1 	.word	0x080098e1
 80098ac:	080098d9 	.word	0x080098d9
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e0bc      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098b8:	2304      	movs	r3, #4
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e0b8      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098c0:	2308      	movs	r3, #8
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e0b4      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098c8:	2310      	movs	r3, #16
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e0b0      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098d0:	2320      	movs	r3, #32
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e0ac      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098d8:	2340      	movs	r3, #64	; 0x40
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e0a8      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e0a4      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a90      	ldr	r2, [pc, #576]	; (8009b30 <UART_SetConfig+0x6a0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d130      	bne.n	8009954 <UART_SetConfig+0x4c4>
 80098f2:	4b8e      	ldr	r3, [pc, #568]	; (8009b2c <UART_SetConfig+0x69c>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d826      	bhi.n	800994c <UART_SetConfig+0x4bc>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0x474>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	0800991d 	.word	0x0800991d
 8009908:	08009925 	.word	0x08009925
 800990c:	0800992d 	.word	0x0800992d
 8009910:	08009935 	.word	0x08009935
 8009914:	0800993d 	.word	0x0800993d
 8009918:	08009945 	.word	0x08009945
 800991c:	2300      	movs	r3, #0
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e086      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009924:	2304      	movs	r3, #4
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e082      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800992c:	2308      	movs	r3, #8
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e07e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e07a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800993c:	2320      	movs	r3, #32
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e076      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009944:	2340      	movs	r3, #64	; 0x40
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e072      	b.n	8009a32 <UART_SetConfig+0x5a2>
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e06e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a76      	ldr	r2, [pc, #472]	; (8009b34 <UART_SetConfig+0x6a4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d130      	bne.n	80099c0 <UART_SetConfig+0x530>
 800995e:	4b73      	ldr	r3, [pc, #460]	; (8009b2c <UART_SetConfig+0x69c>)
 8009960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b05      	cmp	r3, #5
 8009968:	d826      	bhi.n	80099b8 <UART_SetConfig+0x528>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <UART_SetConfig+0x4e0>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	08009989 	.word	0x08009989
 8009974:	08009991 	.word	0x08009991
 8009978:	08009999 	.word	0x08009999
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099b1 	.word	0x080099b1
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e050      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009990:	2304      	movs	r3, #4
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e04c      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009998:	2308      	movs	r3, #8
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e048      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099a0:	2310      	movs	r3, #16
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e044      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099a8:	2320      	movs	r3, #32
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e040      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e03c      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e038      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a5c      	ldr	r2, [pc, #368]	; (8009b38 <UART_SetConfig+0x6a8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d130      	bne.n	8009a2c <UART_SetConfig+0x59c>
 80099ca:	4b58      	ldr	r3, [pc, #352]	; (8009b2c <UART_SetConfig+0x69c>)
 80099cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d826      	bhi.n	8009a24 <UART_SetConfig+0x594>
 80099d6:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <UART_SetConfig+0x54c>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	080099f5 	.word	0x080099f5
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	08009a05 	.word	0x08009a05
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	2302      	movs	r3, #2
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e01a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e016      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e012      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e00e      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a14:	2320      	movs	r3, #32
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e00a      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e006      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e002      	b.n	8009a32 <UART_SetConfig+0x5a2>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a40      	ldr	r2, [pc, #256]	; (8009b38 <UART_SetConfig+0x6a8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 80ef 	bne.w	8009c1c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	dc46      	bgt.n	8009ad4 <UART_SetConfig+0x644>
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	f2c0 8081 	blt.w	8009b4e <UART_SetConfig+0x6be>
 8009a4c:	3b02      	subs	r3, #2
 8009a4e:	2b1e      	cmp	r3, #30
 8009a50:	d87d      	bhi.n	8009b4e <UART_SetConfig+0x6be>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x5c8>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009adb 	.word	0x08009adb
 8009a5c:	08009b4f 	.word	0x08009b4f
 8009a60:	08009ae3 	.word	0x08009ae3
 8009a64:	08009b4f 	.word	0x08009b4f
 8009a68:	08009b4f 	.word	0x08009b4f
 8009a6c:	08009b4f 	.word	0x08009b4f
 8009a70:	08009af3 	.word	0x08009af3
 8009a74:	08009b4f 	.word	0x08009b4f
 8009a78:	08009b4f 	.word	0x08009b4f
 8009a7c:	08009b4f 	.word	0x08009b4f
 8009a80:	08009b4f 	.word	0x08009b4f
 8009a84:	08009b4f 	.word	0x08009b4f
 8009a88:	08009b4f 	.word	0x08009b4f
 8009a8c:	08009b4f 	.word	0x08009b4f
 8009a90:	08009b03 	.word	0x08009b03
 8009a94:	08009b4f 	.word	0x08009b4f
 8009a98:	08009b4f 	.word	0x08009b4f
 8009a9c:	08009b4f 	.word	0x08009b4f
 8009aa0:	08009b4f 	.word	0x08009b4f
 8009aa4:	08009b4f 	.word	0x08009b4f
 8009aa8:	08009b4f 	.word	0x08009b4f
 8009aac:	08009b4f 	.word	0x08009b4f
 8009ab0:	08009b4f 	.word	0x08009b4f
 8009ab4:	08009b4f 	.word	0x08009b4f
 8009ab8:	08009b4f 	.word	0x08009b4f
 8009abc:	08009b4f 	.word	0x08009b4f
 8009ac0:	08009b4f 	.word	0x08009b4f
 8009ac4:	08009b4f 	.word	0x08009b4f
 8009ac8:	08009b4f 	.word	0x08009b4f
 8009acc:	08009b4f 	.word	0x08009b4f
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	2b40      	cmp	r3, #64	; 0x40
 8009ad6:	d036      	beq.n	8009b46 <UART_SetConfig+0x6b6>
 8009ad8:	e039      	b.n	8009b4e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ada:	f7fd fd85 	bl	80075e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ade:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ae0:	e03b      	b.n	8009b5a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae2:	f107 0314 	add.w	r3, r7, #20
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fd fd94 	bl	8007614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af0:	e033      	b.n	8009b5a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd fee0 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b00:	e02b      	b.n	8009b5a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b02:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <UART_SetConfig+0x69c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d009      	beq.n	8009b22 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b0e:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <UART_SetConfig+0x69c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	08db      	lsrs	r3, r3, #3
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <UART_SetConfig+0x6ac>)
 8009b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b20:	e01b      	b.n	8009b5a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009b22:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <UART_SetConfig+0x6ac>)
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b26:	e018      	b.n	8009b5a <UART_SetConfig+0x6ca>
 8009b28:	40011400 	.word	0x40011400
 8009b2c:	58024400 	.word	0x58024400
 8009b30:	40007800 	.word	0x40007800
 8009b34:	40007c00 	.word	0x40007c00
 8009b38:	58000c00 	.word	0x58000c00
 8009b3c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b40:	4bc4      	ldr	r3, [pc, #784]	; (8009e54 <UART_SetConfig+0x9c4>)
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b44:	e009      	b.n	8009b5a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b4c:	e005      	b.n	8009b5a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 81da 	beq.w	8009f16 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	4abc      	ldr	r2, [pc, #752]	; (8009e58 <UART_SetConfig+0x9c8>)
 8009b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b74:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	4413      	add	r3, r2
 8009b80:	6a3a      	ldr	r2, [r7, #32]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d305      	bcc.n	8009b92 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b8c:	6a3a      	ldr	r2, [r7, #32]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d903      	bls.n	8009b9a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b98:	e1bd      	b.n	8009f16 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f04f 0100 	mov.w	r1, #0
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	4aac      	ldr	r2, [pc, #688]	; (8009e58 <UART_SetConfig+0x9c8>)
 8009ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	f7f6 fb91 	bl	80002d8 <__aeabi_uldivmod>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4610      	mov	r0, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f04f 0200 	mov.w	r2, #0
 8009bc2:	f04f 0300 	mov.w	r3, #0
 8009bc6:	020b      	lsls	r3, r1, #8
 8009bc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bcc:	0202      	lsls	r2, r0, #8
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	6849      	ldr	r1, [r1, #4]
 8009bd2:	0849      	lsrs	r1, r1, #1
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	f04f 0100 	mov.w	r1, #0
 8009bda:	1814      	adds	r4, r2, r0
 8009bdc:	eb43 0501 	adc.w	r5, r3, r1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	461a      	mov	r2, r3
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fb73 	bl	80002d8 <__aeabi_uldivmod>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c00:	d308      	bcc.n	8009c14 <UART_SetConfig+0x784>
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c08:	d204      	bcs.n	8009c14 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c10:	60da      	str	r2, [r3, #12]
 8009c12:	e180      	b.n	8009f16 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c1a:	e17c      	b.n	8009f16 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c24:	f040 80be 	bne.w	8009da4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	dc49      	bgt.n	8009cc4 <UART_SetConfig+0x834>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	db7c      	blt.n	8009d2e <UART_SetConfig+0x89e>
 8009c34:	2b20      	cmp	r3, #32
 8009c36:	d87a      	bhi.n	8009d2e <UART_SetConfig+0x89e>
 8009c38:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <UART_SetConfig+0x7b0>)
 8009c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3e:	bf00      	nop
 8009c40:	08009ccb 	.word	0x08009ccb
 8009c44:	08009cd3 	.word	0x08009cd3
 8009c48:	08009d2f 	.word	0x08009d2f
 8009c4c:	08009d2f 	.word	0x08009d2f
 8009c50:	08009cdb 	.word	0x08009cdb
 8009c54:	08009d2f 	.word	0x08009d2f
 8009c58:	08009d2f 	.word	0x08009d2f
 8009c5c:	08009d2f 	.word	0x08009d2f
 8009c60:	08009ceb 	.word	0x08009ceb
 8009c64:	08009d2f 	.word	0x08009d2f
 8009c68:	08009d2f 	.word	0x08009d2f
 8009c6c:	08009d2f 	.word	0x08009d2f
 8009c70:	08009d2f 	.word	0x08009d2f
 8009c74:	08009d2f 	.word	0x08009d2f
 8009c78:	08009d2f 	.word	0x08009d2f
 8009c7c:	08009d2f 	.word	0x08009d2f
 8009c80:	08009cfb 	.word	0x08009cfb
 8009c84:	08009d2f 	.word	0x08009d2f
 8009c88:	08009d2f 	.word	0x08009d2f
 8009c8c:	08009d2f 	.word	0x08009d2f
 8009c90:	08009d2f 	.word	0x08009d2f
 8009c94:	08009d2f 	.word	0x08009d2f
 8009c98:	08009d2f 	.word	0x08009d2f
 8009c9c:	08009d2f 	.word	0x08009d2f
 8009ca0:	08009d2f 	.word	0x08009d2f
 8009ca4:	08009d2f 	.word	0x08009d2f
 8009ca8:	08009d2f 	.word	0x08009d2f
 8009cac:	08009d2f 	.word	0x08009d2f
 8009cb0:	08009d2f 	.word	0x08009d2f
 8009cb4:	08009d2f 	.word	0x08009d2f
 8009cb8:	08009d2f 	.word	0x08009d2f
 8009cbc:	08009d2f 	.word	0x08009d2f
 8009cc0:	08009d21 	.word	0x08009d21
 8009cc4:	2b40      	cmp	r3, #64	; 0x40
 8009cc6:	d02e      	beq.n	8009d26 <UART_SetConfig+0x896>
 8009cc8:	e031      	b.n	8009d2e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cca:	f7fc fd21 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8009cce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cd0:	e033      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cd2:	f7fc fd33 	bl	800673c <HAL_RCC_GetPCLK2Freq>
 8009cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cd8:	e02f      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cda:	f107 0314 	add.w	r3, r7, #20
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fd fc98 	bl	8007614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce8:	e027      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cea:	f107 0308 	add.w	r3, r7, #8
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fd fde4 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf8:	e01f      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cfa:	4b58      	ldr	r3, [pc, #352]	; (8009e5c <UART_SetConfig+0x9cc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d009      	beq.n	8009d1a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d06:	4b55      	ldr	r3, [pc, #340]	; (8009e5c <UART_SetConfig+0x9cc>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	08db      	lsrs	r3, r3, #3
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	4a53      	ldr	r2, [pc, #332]	; (8009e60 <UART_SetConfig+0x9d0>)
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d18:	e00f      	b.n	8009d3a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009d1a:	4b51      	ldr	r3, [pc, #324]	; (8009e60 <UART_SetConfig+0x9d0>)
 8009d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d1e:	e00c      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d20:	4b4c      	ldr	r3, [pc, #304]	; (8009e54 <UART_SetConfig+0x9c4>)
 8009d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d24:	e009      	b.n	8009d3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d2c:	e005      	b.n	8009d3a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80ea 	beq.w	8009f16 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	4a44      	ldr	r2, [pc, #272]	; (8009e58 <UART_SetConfig+0x9c8>)
 8009d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d54:	005a      	lsls	r2, r3, #1
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	085b      	lsrs	r3, r3, #1
 8009d5c:	441a      	add	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	d916      	bls.n	8009d9c <UART_SetConfig+0x90c>
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d74:	d212      	bcs.n	8009d9c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f023 030f 	bic.w	r3, r3, #15
 8009d7e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	085b      	lsrs	r3, r3, #1
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	e0bc      	b.n	8009f16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009da2:	e0b8      	b.n	8009f16 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	dc4b      	bgt.n	8009e44 <UART_SetConfig+0x9b4>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f2c0 8087 	blt.w	8009ec0 <UART_SetConfig+0xa30>
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	f200 8084 	bhi.w	8009ec0 <UART_SetConfig+0xa30>
 8009db8:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <UART_SetConfig+0x930>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009e4b 	.word	0x08009e4b
 8009dc4:	08009e65 	.word	0x08009e65
 8009dc8:	08009ec1 	.word	0x08009ec1
 8009dcc:	08009ec1 	.word	0x08009ec1
 8009dd0:	08009e6d 	.word	0x08009e6d
 8009dd4:	08009ec1 	.word	0x08009ec1
 8009dd8:	08009ec1 	.word	0x08009ec1
 8009ddc:	08009ec1 	.word	0x08009ec1
 8009de0:	08009e7d 	.word	0x08009e7d
 8009de4:	08009ec1 	.word	0x08009ec1
 8009de8:	08009ec1 	.word	0x08009ec1
 8009dec:	08009ec1 	.word	0x08009ec1
 8009df0:	08009ec1 	.word	0x08009ec1
 8009df4:	08009ec1 	.word	0x08009ec1
 8009df8:	08009ec1 	.word	0x08009ec1
 8009dfc:	08009ec1 	.word	0x08009ec1
 8009e00:	08009e8d 	.word	0x08009e8d
 8009e04:	08009ec1 	.word	0x08009ec1
 8009e08:	08009ec1 	.word	0x08009ec1
 8009e0c:	08009ec1 	.word	0x08009ec1
 8009e10:	08009ec1 	.word	0x08009ec1
 8009e14:	08009ec1 	.word	0x08009ec1
 8009e18:	08009ec1 	.word	0x08009ec1
 8009e1c:	08009ec1 	.word	0x08009ec1
 8009e20:	08009ec1 	.word	0x08009ec1
 8009e24:	08009ec1 	.word	0x08009ec1
 8009e28:	08009ec1 	.word	0x08009ec1
 8009e2c:	08009ec1 	.word	0x08009ec1
 8009e30:	08009ec1 	.word	0x08009ec1
 8009e34:	08009ec1 	.word	0x08009ec1
 8009e38:	08009ec1 	.word	0x08009ec1
 8009e3c:	08009ec1 	.word	0x08009ec1
 8009e40:	08009eb3 	.word	0x08009eb3
 8009e44:	2b40      	cmp	r3, #64	; 0x40
 8009e46:	d037      	beq.n	8009eb8 <UART_SetConfig+0xa28>
 8009e48:	e03a      	b.n	8009ec0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e4a:	f7fc fc61 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8009e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e50:	e03c      	b.n	8009ecc <UART_SetConfig+0xa3c>
 8009e52:	bf00      	nop
 8009e54:	003d0900 	.word	0x003d0900
 8009e58:	0800bf10 	.word	0x0800bf10
 8009e5c:	58024400 	.word	0x58024400
 8009e60:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e64:	f7fc fc6a 	bl	800673c <HAL_RCC_GetPCLK2Freq>
 8009e68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e6a:	e02f      	b.n	8009ecc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fd fbcf 	bl	8007614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e7a:	e027      	b.n	8009ecc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e7c:	f107 0308 	add.w	r3, r7, #8
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fd fd1b 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e8a:	e01f      	b.n	8009ecc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e8c:	4b2c      	ldr	r3, [pc, #176]	; (8009f40 <UART_SetConfig+0xab0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d009      	beq.n	8009eac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e98:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <UART_SetConfig+0xab0>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	08db      	lsrs	r3, r3, #3
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	4a28      	ldr	r2, [pc, #160]	; (8009f44 <UART_SetConfig+0xab4>)
 8009ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009eaa:	e00f      	b.n	8009ecc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <UART_SetConfig+0xab4>)
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb0:	e00c      	b.n	8009ecc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009eb2:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <UART_SetConfig+0xab8>)
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb6:	e009      	b.n	8009ecc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ebe:	e005      	b.n	8009ecc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009eca:	bf00      	nop
    }

    if (pclk != 0U)
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d021      	beq.n	8009f16 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	4a1d      	ldr	r2, [pc, #116]	; (8009f4c <UART_SetConfig+0xabc>)
 8009ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009edc:	461a      	mov	r2, r3
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	085b      	lsrs	r3, r3, #1
 8009eea:	441a      	add	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	2b0f      	cmp	r3, #15
 8009efa:	d909      	bls.n	8009f10 <UART_SetConfig+0xa80>
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f02:	d205      	bcs.n	8009f10 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	e002      	b.n	8009f16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009f32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3738      	adds	r7, #56	; 0x38
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	58024400 	.word	0x58024400
 8009f44:	03d09000 	.word	0x03d09000
 8009f48:	003d0900 	.word	0x003d0900
 8009f4c:	0800bf10 	.word	0x0800bf10

08009f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00a      	beq.n	8009fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	f003 0308 	and.w	r3, r3, #8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	f003 0310 	and.w	r3, r3, #16
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01a      	beq.n	800a066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a04e:	d10a      	bne.n	800a066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	605a      	str	r2, [r3, #4]
  }
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af02      	add	r7, sp, #8
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0a4:	f7f8 fb6a 	bl	800277c <HAL_GetTick>
 800a0a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0308 	and.w	r3, r3, #8
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d10e      	bne.n	800a0d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f82f 	bl	800a12a <UART_WaitOnFlagUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e025      	b.n	800a122 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d10e      	bne.n	800a102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f819 	bl	800a12a <UART_WaitOnFlagUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e00f      	b.n	800a122 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2220      	movs	r2, #32
 800a106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b09c      	sub	sp, #112	; 0x70
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a13a:	e0a9      	b.n	800a290 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a13c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	f000 80a5 	beq.w	800a290 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a146:	f7f8 fb19 	bl	800277c <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a152:	429a      	cmp	r2, r3
 800a154:	d302      	bcc.n	800a15c <UART_WaitOnFlagUntilTimeout+0x32>
 800a156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d140      	bne.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a170:	667b      	str	r3, [r7, #100]	; 0x64
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a17a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a17c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e6      	bne.n	800a15c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3308      	adds	r3, #8
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	f023 0301 	bic.w	r3, r3, #1
 800a1a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e5      	bne.n	800a18e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e069      	b.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d051      	beq.n	800a290 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1fa:	d149      	bne.n	800a290 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a204:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a21a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
 800a226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e6      	bne.n	800a206 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	613b      	str	r3, [r7, #16]
   return(result);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f023 0301 	bic.w	r3, r3, #1
 800a24e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a258:	623a      	str	r2, [r7, #32]
 800a25a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	6a3a      	ldr	r2, [r7, #32]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	61bb      	str	r3, [r7, #24]
   return(result);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e5      	bne.n	800a238 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2220      	movs	r2, #32
 800a278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2220      	movs	r2, #32
 800a280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e010      	b.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	69da      	ldr	r2, [r3, #28]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	4013      	ands	r3, r2
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	bf0c      	ite	eq
 800a2a0:	2301      	moveq	r3, #1
 800a2a2:	2300      	movne	r3, #0
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	f43f af46 	beq.w	800a13c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3770      	adds	r7, #112	; 0x70
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e027      	b.n	800a320 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2224      	movs	r2, #36	; 0x24
 800a2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0201 	bic.w	r2, r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e02d      	b.n	800a3a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	; 0x24
 800a350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f84f 	bl	800a424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e02d      	b.n	800a41c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2224      	movs	r2, #36	; 0x24
 800a3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0201 	bic.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f811 	bl	800a424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a444:	e031      	b.n	800a4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a446:	2310      	movs	r3, #16
 800a448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a44a:	2310      	movs	r3, #16
 800a44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	0e5b      	lsrs	r3, r3, #25
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	0f5b      	lsrs	r3, r3, #29
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	7b3a      	ldrb	r2, [r7, #12]
 800a472:	4911      	ldr	r1, [pc, #68]	; (800a4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a474:	5c8a      	ldrb	r2, [r1, r2]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a47a:	7b3a      	ldrb	r2, [r7, #12]
 800a47c:	490f      	ldr	r1, [pc, #60]	; (800a4bc <UARTEx_SetNbDataToProcess+0x98>)
 800a47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a480:	fb93 f3f2 	sdiv	r3, r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	7b7a      	ldrb	r2, [r7, #13]
 800a490:	4909      	ldr	r1, [pc, #36]	; (800a4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a492:	5c8a      	ldrb	r2, [r1, r2]
 800a494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a498:	7b7a      	ldrb	r2, [r7, #13]
 800a49a:	4908      	ldr	r1, [pc, #32]	; (800a4bc <UARTEx_SetNbDataToProcess+0x98>)
 800a49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	0800bf28 	.word	0x0800bf28
 800a4bc:	0800bf30 	.word	0x0800bf30

0800a4c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	f107 001c 	add.w	r0, r7, #28
 800a4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d120      	bne.n	800a51a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	; (800a594 <USB_CoreInit+0xd4>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d105      	bne.n	800a50e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 faa8 	bl	800aa64 <USB_CoreReset>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
 800a518:	e01a      	b.n	800a550 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa9c 	bl	800aa64 <USB_CoreReset>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
 800a542:	e005      	b.n	800a550 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b01      	cmp	r3, #1
 800a554:	d116      	bne.n	800a584 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <USB_CoreInit+0xd8>)
 800a566:	4313      	orrs	r3, r2
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f043 0206 	orr.w	r2, r3, #6
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f043 0220 	orr.w	r2, r3, #32
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a590:	b004      	add	sp, #16
 800a592:	4770      	bx	lr
 800a594:	ffbdffbf 	.word	0xffbdffbf
 800a598:	03ee0000 	.word	0x03ee0000

0800a59c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f023 0201 	bic.w	r2, r3, #1
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d115      	bne.n	800a60c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	f7f8 f8d1 	bl	8002794 <HAL_Delay>
      ms++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fa25 	bl	800aa48 <USB_GetMode>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b01      	cmp	r3, #1
 800a602:	d01e      	beq.n	800a642 <USB_SetCurrentMode+0x84>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b31      	cmp	r3, #49	; 0x31
 800a608:	d9f0      	bls.n	800a5ec <USB_SetCurrentMode+0x2e>
 800a60a:	e01a      	b.n	800a642 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a60c:	78fb      	ldrb	r3, [r7, #3]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d115      	bne.n	800a63e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a61e:	2001      	movs	r0, #1
 800a620:	f7f8 f8b8 	bl	8002794 <HAL_Delay>
      ms++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa0c 	bl	800aa48 <USB_GetMode>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <USB_SetCurrentMode+0x84>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b31      	cmp	r3, #49	; 0x31
 800a63a:	d9f0      	bls.n	800a61e <USB_SetCurrentMode+0x60>
 800a63c:	e001      	b.n	800a642 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e005      	b.n	800a64e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b32      	cmp	r3, #50	; 0x32
 800a646:	d101      	bne.n	800a64c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a658:	b084      	sub	sp, #16
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	e009      	b.n	800a68c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3340      	adds	r3, #64	; 0x40
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	2200      	movs	r2, #0
 800a684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	3301      	adds	r3, #1
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b0e      	cmp	r3, #14
 800a690:	d9f2      	bls.n	800a678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11c      	bne.n	800a6d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6a6:	f043 0302 	orr.w	r3, r3, #2
 800a6aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e005      	b.n	800a6de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	680b      	ldr	r3, [r1, #0]
 800a6fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	2b01      	cmp	r3, #1
 800a702:	d10c      	bne.n	800a71e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d104      	bne.n	800a714 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a70a:	2100      	movs	r1, #0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f961 	bl	800a9d4 <USB_SetDevSpeed>
 800a712:	e008      	b.n	800a726 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a714:	2101      	movs	r1, #1
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f95c 	bl	800a9d4 <USB_SetDevSpeed>
 800a71c:	e003      	b.n	800a726 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a71e:	2103      	movs	r1, #3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f957 	bl	800a9d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a726:	2110      	movs	r1, #16
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f8f3 	bl	800a914 <USB_FlushTxFifo>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f91d 	bl	800a978 <USB_FlushRxFifo>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74e:	461a      	mov	r2, r3
 800a750:	2300      	movs	r3, #0
 800a752:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75a:	461a      	mov	r2, r3
 800a75c:	2300      	movs	r3, #0
 800a75e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a766:	461a      	mov	r2, r3
 800a768:	2300      	movs	r3, #0
 800a76a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	e043      	b.n	800a7fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a788:	d118      	bne.n	800a7bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	461a      	mov	r2, r3
 800a79e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e013      	b.n	800a7ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e008      	b.n	800a7ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7da:	461a      	mov	r2, r3
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d3b7      	bcc.n	800a772 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a802:	2300      	movs	r3, #0
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	e043      	b.n	800a890 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a81a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81e:	d118      	bne.n	800a852 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10a      	bne.n	800a83c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a832:	461a      	mov	r2, r3
 800a834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	e013      	b.n	800a864 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	461a      	mov	r2, r3
 800a84a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e008      	b.n	800a864 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85e:	461a      	mov	r2, r3
 800a860:	2300      	movs	r3, #0
 800a862:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a870:	461a      	mov	r2, r3
 800a872:	2300      	movs	r3, #0
 800a874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a882:	461a      	mov	r2, r3
 800a884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	3301      	adds	r3, #1
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	429a      	cmp	r2, r3
 800a896:	d3b7      	bcc.n	800a808 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a8b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	f043 0210 	orr.w	r2, r3, #16
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	; (800a90c <USB_DevInit+0x2b4>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	f043 0208 	orr.w	r2, r3, #8
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d105      	bne.n	800a8fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	4b06      	ldr	r3, [pc, #24]	; (800a910 <USB_DevInit+0x2b8>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a908:	b004      	add	sp, #16
 800a90a:	4770      	bx	lr
 800a90c:	803c3800 	.word	0x803c3800
 800a910:	40000004 	.word	0x40000004

0800a914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3301      	adds	r3, #1
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	4a12      	ldr	r2, [pc, #72]	; (800a974 <USB_FlushTxFifo+0x60>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d901      	bls.n	800a932 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e01a      	b.n	800a968 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	daf3      	bge.n	800a922 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	019b      	lsls	r3, r3, #6
 800a942:	f043 0220 	orr.w	r2, r3, #32
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3301      	adds	r3, #1
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	4a08      	ldr	r2, [pc, #32]	; (800a974 <USB_FlushTxFifo+0x60>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d901      	bls.n	800a95a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e006      	b.n	800a968 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f003 0320 	and.w	r3, r3, #32
 800a962:	2b20      	cmp	r3, #32
 800a964:	d0f1      	beq.n	800a94a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	00030d40 	.word	0x00030d40

0800a978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3301      	adds	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	4a11      	ldr	r2, [pc, #68]	; (800a9d0 <USB_FlushRxFifo+0x58>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d901      	bls.n	800a994 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e017      	b.n	800a9c4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	daf3      	bge.n	800a984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2210      	movs	r2, #16
 800a9a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	4a08      	ldr	r2, [pc, #32]	; (800a9d0 <USB_FlushRxFifo+0x58>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d901      	bls.n	800a9b6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e006      	b.n	800a9c4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d0f1      	beq.n	800a9a6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	00030d40 	.word	0x00030d40

0800a9d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	68f9      	ldr	r1, [r7, #12]
 800a9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa20:	f023 0303 	bic.w	r3, r3, #3
 800aa24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa34:	f043 0302 	orr.w	r3, r3, #2
 800aa38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	f003 0301 	and.w	r3, r3, #1
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	4a13      	ldr	r2, [pc, #76]	; (800aac4 <USB_CoreReset+0x60>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d901      	bls.n	800aa80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e01a      	b.n	800aab6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	daf3      	bge.n	800aa70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f043 0201 	orr.w	r2, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	4a09      	ldr	r2, [pc, #36]	; (800aac4 <USB_CoreReset+0x60>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d901      	bls.n	800aaa8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e006      	b.n	800aab6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d0f1      	beq.n	800aa98 <USB_CoreReset+0x34>

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	00030d40 	.word	0x00030d40

0800aac8 <__libc_init_array>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4d0d      	ldr	r5, [pc, #52]	; (800ab00 <__libc_init_array+0x38>)
 800aacc:	4c0d      	ldr	r4, [pc, #52]	; (800ab04 <__libc_init_array+0x3c>)
 800aace:	1b64      	subs	r4, r4, r5
 800aad0:	10a4      	asrs	r4, r4, #2
 800aad2:	2600      	movs	r6, #0
 800aad4:	42a6      	cmp	r6, r4
 800aad6:	d109      	bne.n	800aaec <__libc_init_array+0x24>
 800aad8:	4d0b      	ldr	r5, [pc, #44]	; (800ab08 <__libc_init_array+0x40>)
 800aada:	4c0c      	ldr	r4, [pc, #48]	; (800ab0c <__libc_init_array+0x44>)
 800aadc:	f000 f820 	bl	800ab20 <_init>
 800aae0:	1b64      	subs	r4, r4, r5
 800aae2:	10a4      	asrs	r4, r4, #2
 800aae4:	2600      	movs	r6, #0
 800aae6:	42a6      	cmp	r6, r4
 800aae8:	d105      	bne.n	800aaf6 <__libc_init_array+0x2e>
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf0:	4798      	blx	r3
 800aaf2:	3601      	adds	r6, #1
 800aaf4:	e7ee      	b.n	800aad4 <__libc_init_array+0xc>
 800aaf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aafa:	4798      	blx	r3
 800aafc:	3601      	adds	r6, #1
 800aafe:	e7f2      	b.n	800aae6 <__libc_init_array+0x1e>
 800ab00:	0800bf40 	.word	0x0800bf40
 800ab04:	0800bf40 	.word	0x0800bf40
 800ab08:	0800bf40 	.word	0x0800bf40
 800ab0c:	0800bf44 	.word	0x0800bf44

0800ab10 <memset>:
 800ab10:	4402      	add	r2, r0
 800ab12:	4603      	mov	r3, r0
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d100      	bne.n	800ab1a <memset+0xa>
 800ab18:	4770      	bx	lr
 800ab1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1e:	e7f9      	b.n	800ab14 <memset+0x4>

0800ab20 <_init>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr

0800ab2c <_fini>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	bf00      	nop
 800ab30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab32:	bc08      	pop	{r3}
 800ab34:	469e      	mov	lr, r3
 800ab36:	4770      	bx	lr
